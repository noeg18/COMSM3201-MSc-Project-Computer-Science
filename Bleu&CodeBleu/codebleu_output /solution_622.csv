response_num,response,cluster
1,"

def solve(arr1, arr2):
    merged = sorted(arr1 + arr2)
    n = len(merged)
    if n % 2 == 0:
        median = (merged[n//2] + merged[n//2 - 1]) / 2
    else:
        median = merged[n//2]
    return median",1
2,"

def solve(arr1, arr2):
    merged_arr = arr1 + arr2
    merged_arr.sort()
    length = len(merged_arr)
    if length % 2 == 0:
        median = (merged_arr[length//2] + merged_arr[length//2 - 1]) / 2
    else:
        median = merged_arr[(length-1)//2]
    return median",2
3,"

def solve(arr1, arr2):
    merged = arr1 + arr2
    merged.sort()
    n = len(merged)
    if n%2 == 0:
        median = (merged[n//2] + merged[n//2 - 1]) / 2
    else:
        median = merged[n//2]
    return median",3
4,"

def solve(arr1, arr2):
    n = len(arr1)
    arr = arr1 + arr2
    arr.sort()
    if n % 2 == 0:
        median = (arr[n//2] + arr[n//2 - 1]) / 2
    else:
        median = arr[n//2]
    return median",4
5,"

def solve(arr1,arr2):
  n = len(arr1)
  arr = arr1 + arr2
  arr.sort()
  if n%2 != 0:
    return arr[n//2]
  else:
    return (arr[n//2] + arr[(n//2)-1])/2",5
