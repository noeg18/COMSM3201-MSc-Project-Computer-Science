response_num,response,cluster
1,"

def solve(n):
    if n == 1:
        return 1
    if n == 2:
        return 2
    if n == 3:
        return 3
    dp = [0] * (n + 1)
    dp[1] = 1
    dp[2] = 2
    dp[3] = 3
    for i in range(4, n + 1):
        dp[i] = dp[i - 1] + dp[i - 2]
    return dp[n]",1
2,"

def solve(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solve(n-1) + solve(n-2)",2
3,"

def solve(n):
    if n == 0:
        return 1
    elif n == 1:
        return 0
    elif n == 2:
        return 3
    else:
        return solve(n-2)*3 + sum([solve(n-x) for x in range(4, n+1, 2)])",3
4,"

def solve(n):
    if n == 1:
        return 1
    if n == 2:
        return 2
    dp = [0 for i in range(n+1)]
    dp[1] = 1
    dp[2] = 2
    for i in range(3, n+1):
        dp[i] = dp[i-1] + dp[i-2]
    return dp[n]",4
5,"

def solve(n):
    if n < 3:
        return 0
    if n == 3:
        return 2
    dp = [0] * (n + 1)
    dp[0] = 0
    dp[1] = 0
    dp[2] = 3
    dp[3] = 2
    for i in range(4, n + 1):
        dp[i] = dp[i - 2] * 2 + dp[i - 3] * 2
    return dp[n]",5
