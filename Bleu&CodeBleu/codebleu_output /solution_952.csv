response_num,response,cluster
1,"

def solve(n, r, p): 
    if r > n: 
        return 0
    if r == 0 or r == n: 
        return 1
    num = 1
    den = 1
    for i in range(r): 
        num = (num * (n - i)) % p 
        den = (den * (i + 1)) % p 
    return (num * pow(den, p - 2, p)) % p",1
2,"

def solve(n, r, p):
    if r > n:
        return 0
    if r == 0 or r == n:
        return 1
    num = 1
    den = 1
    for i in range(r):
        num = (num * (n - i)) % p
        den = (den * (i + 1)) % p
    return (num * pow(den, p - 2, p)) % p",1
3,"

def solve(n, r, p):
    if n < r:
        return 0
    if r == 0 or n == r:
        return 1
    num = 1
    den = 1
    for i in range(1, r+1):
        num = (num * (n-i+1)) % p
        den = (den * i) % p
    return (num * pow(den, p-2, p)) % p",2
4,"

def solve(n, r, p):
    if r > n:
        return 0
    if r > n - r:
        r = n - r
    c = 1
    for i in range(r):
        c = c * (n - i) // (i + 1)
    return c % p",3
5,"

def solve(n, r, p): 
    #initialize variables 
    fact_n = 1 
    fact_r = 1 
    fact_nr = 1 
    
    #calculate factorial of n 
    for i in range(1, n+1): 
        fact_n = (fact_n * i) % p 
        
    #calculate factorial of r 
    for i in range(1, r+1): 
        fact_r = (fact_r * i) % p 
        
    #calculate factorial of n-r 
    for i in range(1, n-r+1): 
        fact_nr = (fact_nr * i) % p 
        
    #calculate ncr mod p 
    ncr = (fact_n * pow(fact_r, p-2, p) * pow(fact_nr, p-2, p)) % p 
    
    return ncr",4
