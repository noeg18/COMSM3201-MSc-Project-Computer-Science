response_num,response,cluster
1,"
def solve(expression):
    stack = []
    opening = ['(', '[', '{']
    closing = [')', ']', '}']
    for char in expression:
        if char in opening:
            stack.append(char)
        elif char in closing:
            if not stack or closing.index(char) != opening.index(stack.pop()):
                return False
    if stack:
        return False
    return True ",1
2,"

def solve(expression):
    stack = []
    for char in expression:
        if char in [""("", ""["", ""{""]:
            stack.append(char)
        else:
            if not stack:
                return False
            current_char = stack.pop()
            if current_char == ""("":
                if char != "")"":
                    return False
            elif current_char == ""["":
                if char != ""]"":
                    return False
            elif current_char == ""{"":
                if char != ""}"":
                    return False
    if stack:
        return False
    return True",2
3,"

def solve(expression):
    stack = []
    for char in expression:
        if char in ['(', '{', '[']:
            stack.append(char)
        elif char in [')', '}', ']']:
            if not stack:
                return False
            else:
                last_open = stack.pop()
                if (char == ')' and last_open != '(') or (char == '}' and last_open != '{') or (char == ']' and last_open != '['):
                    return False
    if stack:
        return False
    return True",3
4,"

def solve(expression):
    stack = []
    for char in expression:
        if char in ['(', '[', '{']:
            stack.append(char)
        elif char in [')', ']', '}']:
            if not stack:
                return False
            last = stack.pop()
            if (char == ')' and last != '(') or (char == ']' and last != '[') or (char == '}' and last != '{'):
                return False
    if stack:
        return False
    else:
        return True",4
5,"

def solve(expression):
    stack = []
    for char in expression:
        if char in ""({["":
            stack.append(char)
        elif char in "")}]"":
            if len(stack) == 0:
                return False
            else:
                last_char = stack.pop()
                if last_char == ""("" and char != "")"":
                    return False
                elif last_char == ""{"" and char != ""}"":
                    return False
                elif last_char == ""["" and char != ""]"":
                    return False
    if len(stack) == 0:
        return True
    else:
        return False",5
