response_num,response,cluster
1,"

def solve(arr):
    n = len(arr)
    lis = [1]*n
    lds = [1]*n
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and lis[i] < lis[j] + 1:
                lis[i] = lis[j] + 1
    for i in range(n-2, -1, -1):
        for j in range(n-1, i, -1):
            if arr[i] > arr[j] and lds[i] < lds[j] + 1:
                lds[i] = lds[j] + 1
    max_length = 0
    for i in range(n):
        max_length = max(max_length, lis[i] + lds[i] - 1)
    return max_length",1
2,"

def solve(nums):
    n = len(nums)
    inc = [1] * n
    dec = [1] * n

    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j] and inc[i] < inc[j] + 1:
                inc[i] = inc[j] + 1

    for i in range(n-2, -1, -1):
        for j in range(n-1, i, -1):
            if nums[i] > nums[j] and dec[i] < dec[j] + 1:
                dec[i] = dec[j] + 1

    longest = 0
    for i in range(n):
        longest = max(longest, inc[i] + dec[i] - 1)

    return longest",2
3,"

def solve(arr):
    n = len(arr)
    inc = [1] * n
    dec = [1] * n

    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and inc[i] < inc[j] + 1:
                inc[i] = inc[j] + 1

    for i in range(n-2, -1, -1):
        for j in range(n-1, i, -1):
            if arr[i] > arr[j] and dec[i] < dec[j] + 1:
                dec[i] = dec[j] + 1

    max_len = 0
    for i in range(n):
        cur_len = inc[i] + dec[i] - 1
        max_len = max(max_len, cur_len)

    return max_len",3
4,"

def solve(arr):
    n = len(arr)
    # Compute longest increasing subsequence
    lis = [1] * n
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and lis[i] < lis[j] + 1:
                lis[i] = lis[j] + 1
    # Compute longest decreasing subsequence
    lds = [1] * n
    for i in range(n-2, -1, -1):
        for j in range(n-1, i, -1):
            if arr[i] > arr[j] and lds[i] < lds[j] + 1:
                lds[i] = lds[j] + 1
    # Compute longest bitonic subsequence
    lbs = [0] * n
    for i in range(n):
        lbs[i] = lis[i] + lds[i] - 1
    return max(lbs)",4
5,"

def solve(arr):
    n = len(arr)
    inc = [1] * n
    dec = [1] * n
    for i in range(n):
        for j in range(i):
            if arr[i] > arr[j]:
                inc[i] = max(inc[i], inc[j] + 1)
    for i in range(n-1, -1, -1):
        for j in range(i+1, n):
            if arr[i] > arr[j]:
                dec[i] = max(dec[i], dec[j] + 1)
    max_len = 0
    for i in range(n):
        max_len = max(max_len, inc[i] + dec[i] - 1)
    return max_len",5
