response_num,response,cluster
1,"

def solve(text, n):
    words = text.split()
    counts = {}
    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1
    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)
    most_common = sorted_counts[:n]
    return most_common",1
2,"

def solve(text, n):
    words = text.split()
    count = {}
    for word in words:
        if word not in count:
            count[word] = 1
        else:
            count[word] += 1
    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)
    most_common = []
    for i in range(n):
        most_common.append(sorted_count[i][0])
    return most_common",2
3,"
def solve(text, n): 
    words = text.split() 
    word_counts = {} 
    for word in words: 
        if word in word_counts: 
            word_counts[word] += 1 
        else: 
            word_counts[word] = 1 
    
    sorted_words = sorted(word_counts.items(), key=lambda x: x[1], reverse=True) 
    top_n_words = sorted_words[:n] 
    return top_n_words",3
4,"

def solve(text, n):
    # split the text into words
    words = text.split()
    
    # create a dictionary to store word counts
    counts = {}
    
    # loop through each word in the text
    for word in words:
        # convert word to lowercase
        word = word.lower()
        
        # remove any punctuation from the word
        word = word.strip("",.?!-:;"")
        
        # check if the word is already in the dictionary
        if word in counts:
            # if yes, increment its count by 1
            counts[word] += 1
        else:
            # if no, add the word to the dictionary with a count of 1
            counts[word] = 1
    
    # sort the dictionary by values in descending order
    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)
    
    # extract the top n most common words and their counts
    top_n_words = sorted_counts[:n]
    
    # create a list to store the most common words
    most_common_words = []
    
    # loop through each tuple in the list
    for word, count in top_n_words:
        # add the word to the list
        most_common_words.append(word)
    
    # return the list of most common words
    return most_common_words",4
5,"

def solve(text, n):
    word_list = text.split()
    words_dict = {}
    for word in word_list:
        if word in words_dict:
            words_dict[word] += 1
        else:
            words_dict[word] = 1
    sorted_words = sorted(words_dict.items(), key=lambda x: x[1], reverse=True)
    most_common_words = []
    for i in range(n):
        most_common_words.append(sorted_words[i][0])
    return most_common_words",5
