id,response_number,response,prob,logprob
1,1,"

def solve(cost, m, n):
    # initialize dp matrix with 0s
    dp = [[0 for i in range(n+1)] for j in range(m+1)]
    
    # fill first row and column with cumulative costs
    for i in range(1, m+1):
        dp[i][0] = dp[i-1][0] + cost[i][0]
    for j in range(1, n+1):
        dp[0][j] = dp[0][j-1] + cost[0][j]
    
    # fill rest of dp matrix with minimum cost path to reach each position
    for i in range(1, m+1):
        for j in range(1, n+1):
            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]
    
    # return minimum cost to reach (m, n)
    return dp[m][n]",0.8891,-24.44677858686249
1,2,"

def solve(cost, m, n):

    # initialize a 2D array to store the minimum cost path
    path = [[0 for i in range(n+1)] for j in range(m+1)]

    # base case for starting position (0,0)
    path[0][0] = cost[0][0]

    # fill the first row
    for j in range(1, n+1):
        path[0][j] = path[0][j-1] + cost[0][j]

    # fill the first column
    for i in range(1, m+1):
        path[i][0] = path[i-1][0] + cost[i][0]

    # fill the rest of the path
    for i in range(1, m+1):
        for j in range(1, n+1):
            path[i][j] = min(path[i-1][j], path[i][j-1]) + cost[i][j]

    # return the minimum cost path to reach (m,n)
    return path[m][n]",0.8831,-28.959369030400204
1,3,"

def solve(cost, m, n):
    # initialize a 2d array to store the minimum cost path
    dp = [[0 for i in range(n+1)] for j in range(m+1)]
    
    # fill the first row and column of the dp array with cumulative sum
    for i in range(1, m+1):
        dp[i][0] = dp[i-1][0] + cost[i][0]
    for j in range(1, n+1):
        dp[0][j] = dp[0][j-1] + cost[0][j]
    
    # fill the rest of the dp array by finding the minimum cost path
    for i in range(1, m+1):
        for j in range(1, n+1):
            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])
    
    # return the minimum cost path to reach (m, n)
    return dp[m][n]",0.887,-26.36789477551819
1,4,"

def solve(cost, m, n):
    # Initialize a 2D array to store the minimum cost to reach each position
    min_cost = [[0 for i in range(n+1)] for j in range(m+1)]
    
    # Initialize the first row and column with the cumulative sum of the cost matrix
    for i in range(1, m+1):
        min_cost[i][0] = min_cost[i-1][0] + cost[i][0]
    for j in range(1, n+1):
        min_cost[0][j] = min_cost[0][j-1] + cost[0][j]
        
    # Fill in the rest of the 2D array using dynamic programming
    for i in range(1, m+1):
        for j in range(1, n+1):
            min_cost[i][j] = min(min_cost[i-1][j], min_cost[i][j-1]) + cost[i][j]
            
    # Return the minimum cost to reach the given position
    return min_cost[m][n]",0.8852,-28.165568235551596
1,5,"

def solve(cost, m, n):
    # Initialize a 2D array to store the minimum cost at each position
    min_cost = [[0 for i in range(n+1)] for j in range(m+1)]
    
    # Fill the first row and column of the min_cost array with cumulative sum of cost array
    min_cost[0][0] = cost[0][0]
    for i in range(1, m+1):
        min_cost[i][0] = min_cost[i-1][0] + cost[i][0]
    for j in range(1, n+1):
        min_cost[0][j] = min_cost[0][j-1] + cost[0][j]
        
    # Fill the rest of the min_cost array by choosing the minimum cost from the top and left positions
    for i in range(1, m+1):
        for j in range(1, n+1):
            min_cost[i][j] = min(min_cost[i-1][j], min_cost[i][j-1]) + cost[i][j]
            
    # Return the minimum cost at the given position (m, n)
    return min_cost[m][n]",0.8949,-28.544754767224703
2,1,"

def solve(tup1, tup2):
    result = []
    for i in range(len(tup1)):
        for j in range(len(tup2)):
            if tup1[i] == tup2[j]:
                result.append(tup1[i])
    return tuple(result)",0.8239,-11.237482755779402
2,2,"

def solve(list1, list2):
    result = []
    for tup1 in list1:
        for tup2 in list2:
            if tup1 == tup2:
                result.append(tup1)
                break
    return result",0.8839,-6.168167914049602
2,3,"

def solve(tuple_list1, tuple_list2):
    common_elements = []
    for tuple1 in tuple_list1:
        for tuple2 in tuple_list2:
            if tuple1 == tuple2:
                common_elements.append(tuple1)
    return common_elements",0.8907,-6.133095380203
2,4,"

def solve(list1, list2):
    similar = []
    for elem1 in list1:
        if elem1 in list2:
            similar.append(elem1)
    return similar",0.8144,-7.800271179089001
2,5,"

def solve(list1, list2):
    result = []
    for i in list1:
        if i in list2:
            result.append(i)
    return result",0.8668,-5.004738675891
3,1,"

def solve(n):
    if n < 2:
        return False
    else:
        for i in range(2, n):
            if n % i == 0:
                return True
        return False",0.8568,-6.954011518946702
3,2,"

def solve(n):
    if n > 1:
        for i in range(2, n):
            if n % i == 0:
                return True
        else:
            return False
    else:
        return False",0.8096,-10.1397358052527
3,3,"

def solve(num):
    if num < 2:
        return True
    for i in range(2,num):
        if num % i == 0:
            return True
    return False",0.8723,-5.6007135290160015
3,4,"

def solve(num):
  if num < 2:
    return True
  for i in range(2, num):
    if num % i == 0:
      return True
  return False",0.8534,-6.657545403423998
3,5,"

def solve(n):
    if n < 2:
        return False
    for i in range(2, n):
        if n % i == 0:
            return True
    return False",0.9323,-2.9433007241633
4,1,"

import heapq

def solve(nums):
    heapq.heapify(nums)
    largest = heapq.nlargest(3, nums)
    return largest",0.8358,-5.203021403662
4,2,"

def solve(nums):
    import heapq
    heap = []
    for num in nums:
        heapq.heappush(heap, -num)
    
    largest = []
    for _ in range(len(nums)):
        largest.append(-heapq.heappop(heap))
    
    return largest",0.8553,-8.909833553816899
4,3,"

def solve(nums):
    heap = []
    for num in nums:
        heapq.heappush(heap, num)
    return heapq.nlargest(3, heap)",0.8152,-7.150479722948799
4,4,"

import heapq

def solve(nums):
    heapq.heapify(nums)
    largest = heapq.nlargest(3, nums)
    return largest",0.8358,-5.203021403662
4,5,"

def solve(lst):
  import heapq
  heap = []
  for num in lst:
    heapq.heappush(heap, -num)
  largest = []
  for i in range(len(lst)):
    largest.append(-heapq.heappop(heap))
  return largest",0.835,-9.920958183263602
5,1,"

def solve(n):
    if n == 1:
        return 1
    if n == 2:
        return 2
    if n == 3:
        return 3
    dp = [0] * (n + 1)
    dp[1] = 1
    dp[2] = 2
    dp[3] = 3
    for i in range(4, n + 1):
        dp[i] = dp[i - 1] + dp[i - 2]
    return dp[n]",0.9463,-6.463513978349001
5,2,"

def solve(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solve(n-1) + solve(n-2)",0.8645,-6.551303740217998
5,3,"

def solve(n):
    if n == 0:
        return 1
    elif n == 1:
        return 0
    elif n == 2:
        return 3
    else:
        return solve(n-2)*3 + sum([solve(n-x) for x in range(4, n+1, 2)])",0.8061,-15.736509132387
5,4,"

def solve(n):
    if n == 1:
        return 1
    if n == 2:
        return 2
    dp = [0 for i in range(n+1)]
    dp[1] = 1
    dp[2] = 2
    for i in range(3, n+1):
        dp[i] = dp[i-1] + dp[i-2]
    return dp[n]",0.9243,-7.320600199556001
5,5,"

def solve(n):
    if n < 3:
        return 0
    if n == 3:
        return 2
    dp = [0] * (n + 1)
    dp[0] = 0
    dp[1] = 0
    dp[2] = 3
    dp[3] = 2
    for i in range(4, n + 1):
        dp[i] = dp[i - 2] * 2 + dp[i - 3] * 2
    return dp[n]",0.8677,-17.164251321841007
6,1,"

def solve(num1, num2):
    # Convert the numbers to binary strings
    bin1 = bin(num1)[2:]
    bin2 = bin(num2)[2:]

    # Pad the shorter string with leading zeros
    if len(bin1) < len(bin2):
        bin1 = '0' * (len(bin2) - len(bin1)) + bin1
    elif len(bin2) < len(bin1):
        bin2 = '0' * (len(bin1) - len(bin2)) + bin2
    
    # Compare the two strings character by character
    diff_count = 0
    for i in range(len(bin1)):
        if bin1[i] != bin2[i]:
            diff_count += 1
    
    # Return True if there is only one difference, False otherwise
    return diff_count == 1",0.864,-26.156451649881504
6,2,"

def solve(num1, num2):
    xor = num1 ^ num2
    if xor & (xor - 1) == 0:
        return True
    else:
        return False",0.8795,-5.394458610725499
6,3,"

def solve(num1, num2):
    diff = num1 ^ num2
    return diff & (diff - 1) == 0",0.8505,-5.019370887449499
6,4,"

def solve(x,y):
    xor = x ^ y
    count = 0
    while xor > 0:
        if xor & 1:
            count += 1
        xor = xor >> 1
    if count == 1:
        return True
    else:
        return False",0.8353,-11.517592814655998
6,5,"

def solve(num1, num2):
    diff = num1 ^ num2
    count = 0
    while diff > 0:
        if diff & 1:
            count += 1
        diff = diff >> 1
    if count == 1:
        return True
    else:
        return False",0.8875,-8.235476738812501
7,1,"

import re

def solve(string):
    pattern = r'\b\w{4,}\b'
    matches = re.findall(pattern, string)
    return matches",0.9122,-3.122931776531999
7,2,"

def solve(string):
    pattern = r'\b\w{4,}\b'
    matches = re.findall(pattern, string)
    return matches",0.8736,-4.190289738622599
7,3,"

import re

def solve(string):
    pattern = r'\b\w{4,}\b'
    match = re.findall(pattern, string)
    return match",0.8334,-6.195659854406999
7,4,"

import re

def solve(string):
    return re.findall(r""[a-zA-Z]{4,}"", string)",0.7249,-7.399281707454999
7,5,"

import re 

def solve(string):
    pattern = r'\b\w{4,}\b'
    return re.findall(pattern, string)",0.772,-7.763349018444299
8,1,"

def solve(lst):
    return list(map(lambda x: x**2, lst))",0.9686,-0.5740861174330001
8,2,"

def solve(nums):
    return list(map(lambda x: x**2, nums))",0.8597,-2.7208684421069997
8,3,"

def solve(lst):
    squares = list(map(lambda x: x**2, lst))
    return squares",0.8463,-3.672473636611
8,4,"

def solve(lst):
    return list(map(lambda x: x**2, lst))",0.9686,-0.5740861174330001
8,5,"

def solve(lst):
    return list(map(lambda x: x**2, lst))",0.9686,-0.5740861174330001
9,1,"

def solve(string):
    if len(string) <= 1:
        return 0
    else:
        min_rotations = float('inf')
        for i in range(len(string)):
            rotated_string = string[i:] + string[:i]
            if rotated_string == string:
                min_rotations = min(min_rotations, i)
        return min_rotations",0.8485,-12.322618595329995
9,2,"

def solve(s):
    n = len(s)
    min_rotations = float('inf')
    for i in range(n):
        rotated = s[i:] + s[:i]
        if rotated == s:
            min_rotations = min(min_rotations, i)
    return min_rotations",0.8712,-8.413667931970997
9,3,"

def solve(string):
    n = len(string)
    rotations = 0
    for i in range(n):
        rotated_string = string[i:] + string[:i]
        if rotated_string == string:
            rotations = i
            break
    return rotations",0.8571,-8.329039048300004
9,4,"

def solve(string):
    if len(string) <= 1:
        return 0
    rotations = 0
    for i in range(1, len(string)):
        rotated = string[i:] + string[:i]
        if rotated == string:
            rotations = i
            break
    return rotations",0.8156,-13.046797793651002
9,5,"


def solve(s):
    rotated = s+s
    n = len(s)
    for i in range(n):
        new = rotated[i:i+n]
        if new == s:
            return i
    return -1",0.5651,-26.256339427996004
10,1,"

def solve(dataset, n):
    sorted_dataset = sorted(dataset)
    return sorted_dataset[:n]",0.9214,-1.7187074073089998
10,2,"

def solve(dataset, n):
    return sorted(dataset)[:n]",0.916,-1.228658628504
10,3,"

def solve(dataset, n):
    return sorted(dataset)[:n]",0.916,-1.228658628504
10,4,"

def solve(dataset, n):
    return sorted(dataset)[:n]",0.916,-1.228658628504
10,5,"

def solve(dataset, n):
    return sorted(dataset)[:n]",0.916,-1.228658628504
11,1,"

def solve(string, char):
  index = string.find(char)
  last_index = string.rfind(char)
  if index != -1 and last_index != -1:
    string = string[:index] + string[index+1:last_index] + string[last_index+1:]
  return string",0.8126,-12.658488531806
11,2,"

def solve(string, char):
    first_index = string.find(char)
    last_index = string.rfind(char)
    if first_index != -1 and last_index != -1:
        new_string = string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]
    else:
        new_string = string
    return new_string",0.9002,-7.988283544945601
11,3,"

def solve(string, char):
    first_index = string.find(char)
    last_index = string.rfind(char)
    if first_index != -1 and last_index != -1:
        return string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]
    else:
        return string",0.9262,-5.138488388834101
11,4,"

def solve(string, char):
    first_occurrence = string.find(char)
    last_occurrence = string.rfind(char)
    if first_occurrence == -1 or last_occurrence == -1:
        return string
    elif first_occurrence == last_occurrence:
        return string[:first_occurrence] + string[first_occurrence + 1:]
    else:
        return string[:first_occurrence] + string[first_occurrence + 1:last_occurrence] + string[last_occurrence + 1:]",0.9147,-9.361756378285802
11,5,"

def solve(text, char):
    first_index = text.find(char)
    last_index = text.rfind(char)
    if first_index == -1 or last_index == -1:
        return ""Character not found in string.""
    else:
        return text[:first_index] + text[first_index+1:last_index] + text[last_index+1:]",0.8233,-14.197562550778692
12,1,"

def solve(matrix):
    sums = [sum(row) for row in matrix]
    sorted_matrix = [x for _, x in sorted(zip(sums, matrix))]
    return sorted_matrix",0.8912,-4.378687043075999
12,2,"

def solve(matrix):
    # Create a new list to store the sums of each row
    row_sums = []
    
    # Loop through the matrix and calculate the sum of each row
    for row in matrix:
        # Use the sum() function to calculate the sum of the current row
        row_sum = sum(row)
        # Append the sum to the row_sums list
        row_sums.append(row_sum)
        
    # Create a new list to store the sorted rows
    sorted_rows = []
    
    # Sort the row_sums list in ascending order
    sorted_sums = sorted(row_sums)
    
    # Loop through the sorted_sums list
    for sum in sorted_sums:
        # Find the index of the current sum in the row_sums list
        index = row_sums.index(sum)
        # Use the index to get the corresponding row from the matrix
        sorted_rows.append(matrix[index])
        # Remove the current sum from the row_sums list to avoid duplicates
        row_sums.remove(sum)
    
    # Return the sorted matrix
    return sorted_rows",0.8476,-38.035863222119
12,3,"

def solve(matrix):
    for row in matrix:
        row_sum = sum(row)
        row.insert(0, row_sum)
    
    sorted_matrix = sorted(matrix)
    
    for row in sorted_matrix:
        del row[0]
    
    return sorted_matrix",0.7766,-13.654185347271996
12,4,"

def solve(matrix):
    sorted_matrix = sorted(matrix, key=lambda x: sum(x))
    return sorted_matrix",0.8851,-2.806751695658
12,5,"

def solve(matrix):
    sorted_matrix = sorted(matrix, key=lambda x: sum(x))
    return sorted_matrix",0.8851,-2.806751695658
13,1,"

def solve(dictionary):
    # create an empty dictionary to store the word counts
    word_counts = {}

    # loop through each word in the dictionary
    for word in dictionary:
        # if the word is already in the word_counts dictionary, increment its count by 1
        if word in word_counts:
            word_counts[word] += 1
        # if the word is not in the word_counts dictionary, add it with a count of 1
        else:
            word_counts[word] = 1

    # find the maximum count in the word_counts dictionary
    max_count = max(word_counts.values())

    # create an empty list to store the most common words
    most_common_words = []

    # loop through each key-value pair in the word_counts dictionary
    for word, count in word_counts.items():
        # if the count is equal to the maximum count, add the word to the most_common_words list
        if count == max_count:
            most_common_words.append(word)

    # return the most_common_words list
    return most_common_words",0.9277,-16.653536378434296
13,2,"

def solve(dictionary):
    word_count = {}
    for key in dictionary:
        if dictionary[key] in word_count:
            word_count[dictionary[key]] += 1
        else:
            word_count[dictionary[key]] = 1
    max_count = 0
    most_common_words = []
    for key, value in word_count.items():
        if value > max_count:
            max_count = value
            most_common_words = [key]
        elif value == max_count:
            most_common_words.append(key)
    return most_common_words",0.9244,-8.878057853137799
13,3,"

def solve(dictionary):
    word_count = {}
    for word in dictionary:
        if word in word_count:
            word_count[word] += 1
        else:
            word_count[word] = 1
    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)
    return sorted_word_count[0][0], sorted_word_count[0][1]",0.8997,-8.770425949520599
13,4,"

def solve(dictionary):
    words = {}
    for value in dictionary.values():
        for word in value:
            if word in words:
                words[word] += 1
            else:
                words[word] = 1
    return sorted(words.items(), key=lambda x: x[1], reverse=True)",0.8481,-10.544442144720495
13,5,"

def solve(dictionary):
    counts = {}
    for word in dictionary.values():
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1
    max_counts = max(counts.values())
    most_common = []
    for word, count in counts.items():
        if count == max_counts:
            most_common.append(word)
    return most_common",0.8437,-13.767692076025698
14,1,"

def solve(base, height, length):
    return (1/2 * base * height) * length",0.882,-2.7619781261539993
14,2,"

def solve(base, height, length):
    return (1/2 * base * height) * length",0.882,-2.7619781261539993
14,3,"

def solve(base, height, length, depth):
    area = 0.5 * base * height
    volume = area * length * depth
    return volume",0.7961,-7.980330047332999
14,4,"

def solve(base, height, length):
    return (base * height * length) / 2",0.9032,-2.1372903102200005
14,5,"

def solve(base, height, length):
    return (1/2 * base * height) * length",0.882,-2.7619781261539993
15,1,"

def solve(s):
    return [s[i:j] for i, j in zip([0] + filter(str.islower, range(len(s))), filter(str.islower, range(len(s))) + [len(s)])]",0.6712,-18.337716585379994
15,2,"
def solve(s):
    split_string = []
    current_word = """"

    for char in s:
        if char.islower():
            if current_word != """":
                split_string.append(current_word)
            current_word = char
        else:
            current_word += char

    if current_word != """":
        split_string.append(current_word)

    return split_string",0.8273,-13.6510273169505
15,3,"

def solve(string):
    result = []
    current = """"
    for char in string:
        if char.islower():
            if current:
                result.append(current)
            current = char
        else:
            current += char
    if current:
        result.append(current)
    return result",0.8942,-6.596725383256
15,4,"

def solve(s):
    result = []
    temp = """"
    for char in s:
        if char.islower():
            result.append(temp)
            temp = char
        else:
            temp += char
    result.append(temp)
    return result",0.8951,-5.651652114107002
15,5,"

def solve(string):
    split_string = []
    current_word = """"
    for char in string:
        if char.islower():
            if current_word:
                split_string.append(current_word)
            current_word = char
        else:
            current_word += char
    split_string.append(current_word)
    return split_string",0.8854,-7.909820134483398
16,1,"

def solve(s):
    output = []
    current = []
    
    for char in s:
        if char.islower():
            current.append(char)
        else:
            if len(current) > 1:
                output.append(""_"".join(current))
            current = []
    
    if len(current) > 1:
        output.append(""_"".join(current))
    
    return output",0.8176,-15.510699685420002
16,2,"

def solve(string):
    sequences = []
    current = """"
    for char in string:
        if char.islower():
            current += char
        elif current:
            if ""_"" in current:
                sequences.append(current)
            current = """"
    return sequences",0.7996,-11.628848546360995
16,3,"

def solve(string):
    sequences = []
    for i in range(len(string)):
        if string[i].islower():
            start = i
            while i < len(string) and string[i].islower():
                i += 1
            end = i
            if end - start > 1:
                sequences.append(string[start:end])
    return '_'.join(sequences)",0.883,-9.834276980275504
16,4,"

def solve(string):
    result = []
    current = """"
    for char in string:
        if char.islower():
            current += char
        else:
            if len(current) > 1 and ""_"" not in current:
                result.append(current)
            current = """"
    if len(current) > 1 and ""_"" not in current:
        result.append(current)
    return result",0.8656,-11.261222060612004
16,5,"

def solve(s):
    output = []
    for i in range(len(s)):
        if s[i].islower():
            seq = s[i]
            j = i + 1
            while j < len(s) and s[j].islower():
                seq += ""_"" + s[j]
                j += 1
            if len(seq) > 1:
                output.append(seq)
    return output",0.8484,-13.809025471259496
17,1,"

def solve(side):
    perimeter = 4 * side
    return perimeter",0.9411,-0.971001677162
17,2,"

def solve(side):
    perimeter = 4 * side
    return perimeter",0.9411,-0.971001677162
17,3,"

def solve(side):
    perimeter = 4 * side
    return perimeter",0.9411,-0.971001677162
17,4,"

def solve(side):
    return 4*side",0.7889,-2.60835471792
17,5,"

def solve(side):
    perimeter = 4 * side
    return perimeter",0.9411,-0.971001677162
18,1,"

def solve(s1, s2):
    res = """"
    for char in s1:
        if char not in s2:
            res += char
    return res",0.8349,-6.496594776484699
18,2,"

def solve(first, second):
    result = """"
    for char in first:
        if char not in second:
            result += char
    return result",0.8402,-5.5700172461560005
18,3,"

def solve(first_string, second_string):
    result = """"
    for char in first_string:
        if char not in second_string:
            result += char
    return result",0.8947,-4.0062234457349994
18,4,"

def solve(str1, str2):
    new_str = """"
    for char in str1:
        if char not in str2:
            new_str += char
    return new_str",0.9338,-2.6702292192836397
18,5,"

def solve(str1, str2):
    new_str = ''
    for char in str1:
        if char not in str2:
            new_str += char
    return new_str",0.89,-4.54322831363124
19,1,"

def solve(arr):
    if len(arr) == len(set(arr)):
        return False
    else:
        return True",0.9094,-2.3753868825140003
19,2,"

def solve(arr):
    if len(arr) == len(set(arr)):
        return False
    else:
        return True",0.9094,-2.3753868825140003
19,3,"

def solve(nums):
    return len(nums) != len(set(nums))",0.8389,-2.63418708955
19,4,"

def solve(nums):
    return len(nums) != len(set(nums))",0.8389,-2.63418708955
19,5,"

def solve(arr):
    return len(arr) > len(set(arr))",0.689,-5.587845259513999
20,1,"

def solve(n):
    if n % 4 == 0:
        return False
    elif n % 3 == 0:
        return True
    else:
        return False",0.7873,-9.325002335843998
20,2,"

def solve(num):
    if num < 0:
        return False
    sum = 0
    while num > 0:
        sum += num % 10
        num //= 10
    if sum == 10:
        return True
    else:
        return False",0.8466,-9.993029290249002
20,3,"
def solve(num):
    if num == 1:
        return True
    elif num % 3 == 0 and num % 5 == 0:
        return True
    else:
        return False",0.762,-11.958770305304997
20,4,"

def solve(num):
    if num == 1:
        return False
    elif num % 3 == 0:
        return True
    elif num % 10 == 0:
        return True
    return False",0.6577,-19.6946492343
20,5,"
def solve(num):
    if num < 1:
        return False
    elif num == 1:
        return True
    else:
        while num > 1:
            if num % 2 == 0:
                num = num // 2
            else:
                num = (3 * num) + 1
        if num == 1:
            return True
        else:
            return False",0.8376,-15.418465819543991
21,1,"

def solve(n, m):
    multiples = []
    for i in range(1, m+1):
        multiples.append(n*i)
    return multiples",0.9425,-1.893358963673
21,2,"

def solve(m, n):
    multiples = []
    for i in range(1, m+1):
        multiples.append(i * n)
    return multiples",0.8512,-5.315620869510498
21,3,"

def solve(n, m):
    multiples = []
    for i in range(1, m+1):
        multiples.append(n*i)
    return multiples",0.9425,-1.893358963673
21,4,"

def solve(m, n):
    result = []
    for i in range(1, m+1):
        result.append(n*i)
    return result",0.8956,-3.529987108759
21,5,"

def solve(n, m):
    multiples = []
    for i in range(1, m+1):
        multiples.append(n*i)
    return multiples",0.9425,-1.893358963673
22,1,"

def solve(arr):
    seen = set()
    for num in arr:
        if num in seen:
            return num
        seen.add(num)
    return -1",0.9473,-1.8942828980594997
22,2,"

def solve(arr):
    seen = set()
    for num in arr:
        if num in seen:
            return num
        else:
            seen.add(num)
    return -1",0.9514,-1.8930633814884992
22,3,"

def solve(arr):
    seen = set()
    for num in arr:
        if num in seen:
            return num
        else:
            seen.add(num)
    return -1",0.9514,-1.8930633814884992
22,4,"

def solve(arr):
    seen = set()
    for num in arr:
        if num in seen:
            return num
        else:
            seen.add(num)
    return -1 # if no duplicates are found",0.866,-6.3313938946085
22,5,"

def solve(arr):
    seen = set()
    for num in arr:
        if num in seen:
            return num
        seen.add(num)
    return -1",0.9473,-1.8942828980594997
23,1,"

def solve(list_of_lists):
    max_sum = 0
    for lst in list_of_lists:
        sum_lst = sum(lst)
        if sum_lst > max_sum:
            max_sum = sum_lst
    return max_sum",0.921,-3.95196915584
23,2,"

def solve(list_of_lists):
    max_sum = 0
    for lst in list_of_lists:
        lst_sum = sum(lst)
        if lst_sum > max_sum:
            max_sum = lst_sum
    return max_sum",0.9129,-4.373109365407499
23,3,"

def solve(list_of_lists):
    max_sum = float('-inf')
    for lst in list_of_lists:
        temp_sum = sum(lst)
        if temp_sum > max_sum:
            max_sum = temp_sum
    return max_sum",0.8686,-6.903657243528898
23,4,"

def solve(list_of_lists):
    max_sum = 0
    for lst in list_of_lists:
        curr_sum = sum(lst)
        if curr_sum > max_sum:
            max_sum = curr_sum
    return max_sum",0.9293,-3.5214611451319997
23,5,"

def solve(list_of_lists):
    max_sum = float(""-inf"")
    
    for lst in list_of_lists:
        curr_sum = sum(lst)
        if curr_sum > max_sum:
            max_sum = curr_sum
    
    return max_sum",0.841,-8.657848716978098
24,1,"

def solve(binary):
    decimal = 0
    power = 0
    while(binary > 0):
        decimal += (binary % 10) * (2**power)
        power += 1
        binary = binary // 10
    return decimal",0.8668,-8.005031648213
24,2,"

def solve(binary):
    decimal = 0
    power = 0
    while binary > 0:
        decimal += (binary % 10) * (2 ** power)
        power += 1
        binary = binary // 10
    return decimal",0.901,-5.836747064996
24,3,"

def solve(binary):
    decimal = 0
    power = 0
    while binary > 0:
        decimal += (binary % 10) * (2 ** power)
        power += 1
        binary //= 10
    return decimal ",0.8559,-8.560449564817002
24,4,"

def solve(binary):
    decimal = 0
    power = len(binary) - 1
    for digit in binary:
        decimal += int(digit) * (2 ** power)
        power -= 1
    return decimal",0.9203,-4.071332440129
24,5,"

def solve(binary):
    decimal = 0
    power = 0
    for digit in binary[::-1]:
        decimal += int(digit) * 2**power
        power += 1
    return decimal",0.8825,-5.876379979348999
25,1,"

def solve(arr):
    product = 1
    for num in arr:
        if arr.count(num) == 1:
            product *= num
    return product",0.9183,-2.982001782951
25,2,"

def solve(arr):
    result = 1
    for i in range(len(arr)):
        if arr.count(arr[i]) == 1:
            result *= arr[i]
    return result",0.8935,-4.390919187487
25,3,"

def solve(arr):
    product = 1
    for i in range(len(arr)):
        if arr.count(arr[i]) == 1:
            product *= arr[i]
    return product",0.945,-2.2070177998150005
25,4,"

def solve(arr):
    product = 1
    non_repeated = set()
    for num in arr:
        if num not in non_repeated:
            product *= num
            non_repeated.add(num)
    return product",0.856,-7.461021282459002
25,5,"

def solve(arr):
  prod = 1
  for i in range(len(arr)):
    if arr.count(arr[i]) == 1:
      prod = prod * arr[i]
  return prod",0.8205,-8.110586334339501
26,1,"

def solve(tuple_list, k):
    for tup in tuple_list:
        if len(tup) != k:
            return False
    return True",0.9437,-1.7959856990929994
26,2,"

def solve(tuple_list, k):
    for tup in tuple_list:
        if len(tup) != k:
            return False
    return True",0.9437,-1.7959856990929994
26,3,"

def solve(tuple_list, k):
    for tup in tuple_list:
        if len(tup) != k:
            return False
    return True",0.9437,-1.7959856990929994
26,4,"

def solve(tuple_list, k):
    for tup in tuple_list:
        if len(tup) < k:
            return False
    return True",0.8951,-3.4365406061869987
26,5,"

def solve(tuple_list, k):
    for tuple in tuple_list:
        if len(tuple) != k:
            return False
    return True",0.907,-2.928026043267
27,1,"

def solve(str_list):
    return [s for s in str_list if not any(c.isdigit() for c in s)]",0.7306,-8.1615631503305
27,2,"

def solve(lst):
    res = []
    for string in lst:
        new_str = """"
        for char in string:
            if char.isdigit():
                continue
            else:
                new_str += char
        res.append(new_str)
    return res",0.8118,-10.8414199173536
27,3,"

def solve(strings):
    result = []
    for string in strings:
        new_string = """"
        for letter in string:
            if not letter.isdigit():
                new_string += letter
        result.append(new_string)
    return result",0.8765,-6.196829269383701
27,4,"

def solve(lst):
    new_lst = []
    for string in lst:
        new_string = """"
        for char in string:
            if not char.isdigit():
                new_string += char
        new_lst.append(new_string)
    return new_lst",0.9414,-3.0175455285714996
27,5,"

def solve(lst):
    result = []
    for string in lst:
        new_string = ''
        for char in string:
            if not char.isdigit():
                new_string += char
        result.append(new_string)
    return result",0.9042,-4.7356969806369005
28,1,"
def solve(n, k):
    if k == 0 or k == n:
        return 1
    else:
        return solve(n-1, k-1) + solve(n-1, k)",0.896,-4.9396266386293
28,2,"

def solve(n, k):
    if k == 0 or k == n:
        return 1
    else:
        return solve(n-1, k-1) + solve(n-1, k)",0.9566,-1.9989314043478004
28,3,"

def solve(n, k):
    if k == 0 or k == n:
        return 1
    else:
        return solve(n-1, k-1) + solve(n-1, k)",0.9566,-1.9989314043478004
28,4,"

def solve(n, k):
    if k == 0 or k == n:
        return 1
    if k > n or k < 0:
        return 0
    return solve(n-1, k-1) + solve(n-1, k)",0.8616,-8.636582138576703
28,5,"

def solve(n, k):
    if k == 0 or k == n:
        return 1
    else:
        return solve(n - 1, k - 1) + solve(n - 1, k)",0.9253,-3.728745625581
29,1,"

def solve(arr):
    count = {}
    for element in arr:
        if element in count:
            count[element] += 1
        else:
            count[element] = 1
    
    for key, value in count.items():
        if value % 2 != 0:
            return key",0.8995,-6.568062746165102
29,2,"

def solve(arr):
    freq = {}
    for num in arr:
        freq[num] = freq.get(num, 0) + 1
    for key, value in freq.items():
        if value % 2 != 0:
            return key",0.8499,-8.617376990848397
29,3,"

def solve(arr):
    count = {}
    for num in arr:
        if num in count:
            count[num] += 1
        else:
            count[num] = 1
    for key, value in count.items():
        if value % 2 == 1:
            return key",0.9244,-4.871941370109799
29,4,"

def solve(lst):
    count = {}
    for num in lst:
        if num in count:
            count[num] += 1
        else:
            count[num] = 1
    for key, value in count.items():
        if value % 2 == 1:
            return key",0.9028,-6.340398014956799
29,5,"

def solve(arr):
    counts = {}
    for num in arr:
        if num in counts:
            counts[num] += 1
        else:
            counts[num] = 1
    for key, value in counts.items():
        if value % 2 == 1:
            return key",0.8982,-6.6550638637787
30,1,"

def solve(s):
    count = 0
    for i in range(len(s)):
        for j in range(i+1, len(s)):
            if s[i] == s[j]:
                count += 1
    return count",0.9396,-3.052727680555
30,2,"

def solve(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            if string[i] == string[j-1]:
                count += 1
    return count",0.9611,-2.1033044870069992
30,3,"

def solve(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            if string[i] == string[j-1]:
                count += 1
    return count",0.9611,-2.1033044870069992
30,4,"

def solve(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)):
            if string[i] == string[j]:
                count += 1
    return count",0.9769,-1.1475045620830002
30,5,"

def solve(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            if string[i] == string[j-1]:
                count += 1
    return count",0.9611,-2.1033044870069992
31,1,"

import heapq

def solve(lists, k):
    heap = []
    for lst in lists:
        for num in lst:
            heapq.heappush(heap, (-lst.count(num), num))
    top_k = heapq.nsmallest(k, heap)
    return [num for _, num in top_k]",0.8587,-9.747272127134998
31,2,"

import heapq

def solve(lists, k):
    
    #create a dictionary to store the count of each integer
    count_dict = {}
    #loop through each list
    for l in lists:
        #loop through each integer in the list
        for num in l:
            #if the integer is already in the dictionary, increment its count
            if num in count_dict:
                count_dict[num] += 1
            #else, add the integer to the dictionary with a count of 1
            else:
                count_dict[num] = 1
    
    #create a heap with the counts as the key and the integers as the value
    heap = [(-count, num) for num, count in count_dict.items()]
    #use heapq to turn the list into a heap
    heapq.heapify(heap)
    
    #create a list to store the top k integers
    top_k = []
    #loop k times
    for i in range(k):
        #pop the top element from the heap
        count, num = heapq.heappop(heap)
        #add the integer to the top_k list
        top_k.append(num)
    
    #return the top_k list
    return top_k",0.8396,-44.58926910431977
31,3,"

def solve(lst, k):
    freq = {}
    heap = []
    for num in lst:
        if num not in freq:
            freq[num] = 0
        freq[num] += 1
    for key, value in freq.items():
        heapq.heappush(heap, (-value, key))
    res = []
    for i in range(k):
        res.append(heapq.heappop(heap)[1])
    return res",0.8236,-17.656897180703
31,4,"

from heapq import heappush, heappop

def solve(arr, k):
    freq_map = {}
    heap = []

    # build frequency map
    for num in arr:
        freq_map[num] = freq_map.get(num, 0) + 1

    # build heap
    for num, freq in freq_map.items():
        heappush(heap, (-freq, num))

    # extract top k elements from heap
    top_k = []
    for _ in range(k):
        freq, num = heappop(heap)
        top_k.append(num)

    return top_k",0.8097,-26.182040169915503
31,5,"

def solve(arr, k):
    from collections import Counter
    import heapq
    
    # create a counter to keep track of the frequency of each integer
    freq = Counter(arr)
    
    # create a heap queue
    heap = []
    
    # loop through the unique integers in the counter
    for num in freq:
        # push the tuple (frequency, integer) into the heap
        heapq.heappush(heap, (-freq[num], num))
    
    # create a list to store the top k integers
    top_k = []
    
    # pop the first k elements from the heap
    for i in range(k):
        # pop the tuple with the highest frequency
        freq_num = heapq.heappop(heap)
        # append the integer to the top_k list
        top_k.append(freq_num[1])
    
    return top_k",0.7818,-43.5592773642984
32,1,"

def solve(num):
    largest = 0
    i = 2
    while i * i <= num:
        while num % i == 0:
            largest = i
            num = num / i
        i += 1
    if num > largest:
        largest = num
    return largest",0.8398,-11.519473439407
32,2,"

def solve(num):
    i = 2
    while i * i <= num:
        if num % i:
            i += 1
        else:
            num //= i
    return num",0.9422,-2.502067050086
32,3,"

def solve(n):
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
    return n",0.9397,-2.610761586546999
32,4,"

def solve(n):
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
    return n",0.9397,-2.610761586546999
32,5,"

def solve(num):
    i = 2
    while i * i <= num:
        if num % i:
            i += 1
        else:
            num //= i

    return num",0.848,-6.926738516446
33,1,"

def solve(decimal_num):
    binary_num = """"
    while decimal_num > 0:
        binary_num = str(decimal_num % 2) + binary_num
        decimal_num = decimal_num//2
    return binary_num",0.8147,-9.631415181947702
33,2,"

def solve(num):
    binary = """"
    while num > 0:
        binary = str(num % 2) + binary
        num = num // 2
    return binary",0.9077,-3.7750153132876
33,3,"

def solve(decimal):
    binary = """"
    while decimal > 0:
        binary = str(decimal % 2) + binary
        decimal = decimal // 2
    return binary",0.9351,-2.6161007295732004
33,4,"

def solve(decimal):
    binary = """"
    while decimal > 0:
        binary = str(decimal % 2) + binary
        decimal = decimal // 2
    return binary",0.9351,-2.6161007295732004
33,5,"

def solve(n):
    binary = """"
    while n > 0:
        binary = str(n % 2) + binary
        n = n // 2
    return binary",0.9086,-3.7402800239958007
34,1,"

def solve(arr):
    n = len(arr)
    total = (n+1)*(n+2)/2
    sum_arr = sum(arr)
    return int(total - sum_arr)",0.8921,-4.566553700779
34,2,"

def solve(arr):
    n = len(arr)
    total = (n+1)*(n+2)/2
    sum_of_arr = sum(arr)
    return int(total - sum_of_arr)",0.888,-4.988382058569001
34,3,"

def solve(arr):
    n = len(arr)
    total = (n+1)*(n+2)//2
    for i in range(n):
        total -= arr[i]
    return total",0.9168,-3.5603139702180004
34,4,"

def solve(arr):
    n = len(arr)
    total = (n+1)*(n+2)/2
    for i in range(n):
        total -= arr[i]
    return int(total)",0.9145,-3.843487582160999
34,5,"

def solve(arr):
    n = len(arr)
    total = (n+1)*(n+2)/2
    sum_of_arr = sum(arr)
    return total - sum_of_arr",0.9062,-3.938886221319001
35,1,"

def solve(n):
    return n*(n+1)/2",0.8041,-3.05249407856
35,2,"

def solve(n):
    return n * (n + 1)",0.9489,-0.787495010385
35,3,"

def solve(n):
    return n * (n + 1)",0.9489,-0.787495010385
35,4,"

def solve(n):
    return n * (n + 1)",0.9489,-0.787495010385
35,5,"

def solve(n):
    return n*(n+1)//2",0.8451,-2.3567325883800003
36,1,"

def solve(numerator, denominator, n):
    fraction = numerator / denominator
    fraction_str = str(fraction)
    decimal_index = fraction_str.index('.')
    nth_digit = fraction_str[decimal_index + n + 1]
    return nth_digit",0.8427,-8.902417043884999
36,2,"

def solve(numerator, denominator, n):
    fraction = numerator / denominator
    digits = str(fraction).split(""."")[1]
    return int(digits[n-1])",0.823,-7.205649158694001
36,3,"

def solve(numerator, denominator, n):
    fraction = str(numerator/denominator)
    decimal = fraction.split('.')[1]
    if n > len(decimal):
        return ""Error: n is larger than the number of digits in the fraction.""
    else:
        return decimal[n-1]",0.7568,-17.27530126272471
36,4,"

def solve(n, num1, num2):
    fraction = num1 / num2
    digits = str(fraction).split(""."")[1]
    return digits[n-1]",0.7873,-9.327727676923004
36,5,"

def solve(numerator, denominator, n):
    decimal = numerator/denominator
    decimal_str = str(decimal).split(""."")[1]
    if n < len(decimal_str):
        return int(decimal_str[n-1])
    else:
        return -1",0.7221,-17.583934203431
37,1,"

def solve(lst):
    ints = []
    strings = []
    for item in lst:
        if isinstance(item, int):
            ints.append(item)
        else:
            strings.append(item)
    ints.sort()
    strings.sort()
    return ints + strings",0.8942,-5.814914954253402
37,2,"

def solve(mixed_list):
    numbers = []
    strings = []
    for item in mixed_list:
        if isinstance(item, int):
            numbers.append(item)
        elif isinstance(item, str):
            strings.append(item)
    numbers.sort()
    strings.sort()
    sorted_list = numbers + strings
    return sorted_list",0.8832,-8.194488366604302
37,3,"

def solve(lst):
    ints = []
    strings = []
    for x in lst:
        if type(x) == int:
            ints.append(x)
        else:
            strings.append(x)
    ints.sort()
    strings.sort()
    lst = ints + strings
    return lst",0.8347,-10.479997056427
37,4,"

def solve(lst):
    nums = []
    strs = []
    for item in lst:
        if type(item) == int:
            nums.append(item)
        else:
            strs.append(item)
    nums.sort()
    strs.sort()
    return nums + strs",0.9015,-5.4977871883724
37,5,"

def solve(lst):
    numbers = []
    strings = []
    for i in lst:
        if type(i) == int:
            numbers.append(i)
        else:
            strings.append(i)
    numbers.sort()
    strings.sort()
    return numbers + strings",0.8743,-7.1197779018670015
38,1,"

def solve(lst):
    even = 0
    odd = 0
    for num in lst:
        if num % 2 == 0:
            even = num
            break
    for num in lst:
        if num % 2 != 0:
            odd = num
            break
    return even / odd",0.9604,-2.8259463554675004
38,2,"

def solve(lst):
    even = 0
    odd = 0
    for num in lst:
        if num % 2 == 0:
            even = num
            break
    for num in lst:
        if num % 2 != 0:
            odd = num
            break
    return even/odd",0.949,-3.663172256867499
38,3,"

def solve(lst):
    even = 0
    odd = 0
    for num in lst:
        if num % 2 == 0:
            even = num
            break
    for num in lst:
        if num % 2 != 0:
            odd = num
            break
    return even / odd",0.9604,-2.8259463554675004
38,4,"

def solve(nums):
    even = 0
    odd = 0
    for num in nums:
        if num % 2 == 0:
            even = num
            break
    for num in nums:
        if num % 2 == 1:
            odd = num
            break
    return even / odd",0.908,-6.7521495754544985
38,5,"

def solve(lst):
    even = None
    odd = None
    for num in lst:
        if num % 2 == 0:
            even = num
            break
    for num in lst:
        if num % 2 != 0:
            odd = num
            break
    return even / odd",0.9533,-3.251582639730399
39,1,"

def solve(string):
    # check if string is empty or has only one character
    if len(string) < 2:
        return True
    
    # create a dictionary to store the frequency of each character in the string
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    
    # check if there are any characters with a frequency of more than 1
    for char in freq:
        if freq[char] > 1:
            return False
    
    return True",0.8295,-22.621453932816515
39,2,"

def solve(string):
    char_count = {}
    for char in string:
        if char not in char_count:
            char_count[char] = 0
        char_count[char] += 1
    max_char = max(char_count, key=char_count.get)
    max_count = char_count[max_char]
    if max_count > (len(string) + 1) // 2:
        return False
    return True",0.8216,-17.486563920685594
39,3,"

def solve(string):
    # create a dictionary to store the frequency of each character
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    
    # sort the characters based on their frequency in descending order
    sorted_chars = sorted(freq, key=freq.get, reverse=True)
    
    # check if the most frequent character has a count that is more than half of the length of the string
    if freq[sorted_chars[0]] > len(string)//2:
        return False
    
    # create a new string with the first character being the most frequent one
    # and the rest of the characters in alternating order
    new_string = sorted_chars[0]
    for i in range(1, len(sorted_chars)):
        for j in range(freq[sorted_chars[i]]):
            new_string += sorted_chars[i]
    
    # check if the new string has two adjacent characters that are the same
    for i in range(len(new_string)-1):
        if new_string[i] == new_string[i+1]:
            return False
    
    return True",0.8295,-45.04271830598339
39,4,"

def solve(string):
    char_count = {}
    for char in string:
        if char not in char_count:
            char_count[char] = 1
        else:
            char_count[char] += 1
    
    max_freq = max(char_count.values())
    if max_freq > len(string) - max_freq + 1:
        return False
    else:
        return True",0.8835,-9.7884314774383
39,5,"

def solve(string):
    count = {}
    for i in string:
        count[i] = count.get(i, 0) + 1
    max_count = max(count.values())
    if max_count > (len(string)+1)//2:
        return False
    return True",0.782,-14.508560417309004
40,1,"

from collections import Counter

def solve(lists):
    flat_list = [item for sublist in lists for item in sublist]
    frequency = Counter(flat_list)
    return frequency",0.8563,-5.7401909712956
40,2,"

from collections import Counter

def solve(list_of_lists):
    flat_list = [item for sublist in list_of_lists for item in sublist]
    freq = Counter(flat_list)
    return freq",0.8952,-4.427306042832199
40,3,"

from collections import Counter

def solve(list_of_lists):
  flat_list = [item for sublist in list_of_lists for item in sublist]
  freq = Counter(flat_list)
  return freq",0.8329,-7.312473358087201
40,4,"

from collections import Counter

def solve(lists):
    flat_list = [item for sublist in lists for item in sublist]
    freq = Counter(flat_list)
    return freq",0.892,-4.2275891745130005
40,5,"

from collections import Counter

def solve(list_of_lists):
    flattened_list = [item for sublist in list_of_lists for item in sublist]
    frequency = Counter(flattened_list)
    return frequency",0.8896,-4.796523002565001
41,1,"
def solve(numbers):
    return list(filter(lambda x: x % 2 == 0, numbers))",0.8179,-4.422737812760001
41,2,"

def solve(nums):
    return list(filter(lambda x: x % 2 == 0, nums))",0.8992,-2.336774366035
41,3,"

def solve(nums):
    return list(filter(lambda x: x%2 == 0, nums))",0.8792,-2.7044324702419997
41,4,"

def solve(nums):
    return list(filter(lambda x: x % 2 == 0, nums))",0.8992,-2.336774366035
41,5,"

def solve(nums):
    return list(filter(lambda x: x % 2 == 0, nums))",0.8992,-2.336774366035
42,1,"

def solve(arr):
    sum_repeated = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] == arr[j]:
                sum_repeated += arr[i]
    return sum_repeated",0.8966,-6.003110898822501
42,2,"

def solve(arr):
    sum = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] == arr[j]:
                sum += arr[i]
    return sum",0.9651,-1.7422373014645005
42,3,"

def solve(arr):
    sum = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] == arr[j]:
                sum += arr[i]
    return sum",0.9651,-1.7422373014645005
42,4,"

def solve(arr):
    sum = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] == arr[j]:
                sum += arr[i]
    return sum",0.9651,-1.7422373014645005
42,5,"

def solve(arr):
    sum = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] == arr[j]:
                sum += arr[i]
    return sum",0.9651,-1.7422373014645005
43,1,"

import re 

def solve(text):
    pattern = r'[a-z]+_[a-z]+'
    matches = re.findall(pattern, text)
    
    return matches",0.7561,-9.505039493162998
43,2,"

import re

def solve(text):
    pattern = r'[a-z]+_[a-z]+'
    result = re.findall(pattern, text)
    return result",0.8522,-5.2772329279132
43,3,"

import re
def solve(text):
    pattern = r""[a-z]+_[a-z]+""
    matches = re.findall(pattern, text)
    return matches",0.8399,-5.756139927404101
43,4,"

import re

def solve(input_str):
    pattern = r'[a-z]+_[a-z]+'
    matches = re.findall(pattern, input_str)
    return matches",0.8736,-4.728454568495098
43,5,"

import re

def solve(string):
    pattern = r'[a-z]+_[a-z]+'
    matches = re.findall(pattern, string)
    return matches",0.9417,-1.9818090898016003
44,1,"

def solve(word, string):
    if string.startswith(word):
        return True
    else:
        return False",0.9507,-1.1632575228450002
44,2,"

def solve(word, string):
    if string[:len(word)] == word:
        return True
    else:
        return False",0.9164,-2.35817118709
44,3,"

def solve(word, string):
    if string.startswith(word):
        return True
    else:
        return False",0.9507,-1.1632575228450002
44,4,"

def solve(word, string):
    return string.startswith(word)",0.8117,-2.711611654396
44,5,"

def solve(word, string):
    if string.startswith(word):
        return True
    else:
        return False",0.9507,-1.1632575228450002
45,1,"

def solve(arr):
    def gcd(a, b):
        if b == 0:
            return a
        else:
            return gcd(b, a % b)
    result = arr[0]
    for i in range(1, len(arr)):
        result = gcd(result, arr[i])
    return result",0.9239,-5.144007873650002
45,2,"

def solve(arr):
    gcd = arr[0]
    for i in range(1, len(arr)):
        while arr[i] != 0:
            temp = gcd
            gcd = arr[i]
            arr[i] = temp % arr[i]
    return gcd",0.9196,-4.692906627820001
45,3,"

def solve(arr):
    gcd = arr[0]
    for i in range(1, len(arr)):
        gcd = math.gcd(gcd, arr[i])
    return gcd",0.9297,-2.77108916709
45,4,"
def solve(arr):
    gcd = arr[0]
    for i in range(1, len(arr)):
        gcd = math.gcd(gcd, arr[i])
    return gcd",0.8693,-5.323463606972999
45,5,"

def solve(arr):
    gcd = arr[0]
    for i in range(1, len(arr)):
        gcd = math.gcd(gcd, arr[i])
    return gcd",0.9297,-2.77108916709
46,1,"

def solve(numbers):
    if len(numbers) == len(set(numbers)):
        return True
    else:
        return False",0.9467,-1.3705813003659997
46,2,"

def solve(numbers):
    if len(numbers) == len(set(numbers)):
        return True
    else:
        return False",0.9467,-1.3705813003659997
46,3,"

def solve(numbers):
    return len(numbers) == len(set(numbers))",0.8217,-2.945276935606999
46,4,"

def solve(numbers):
    for i in range(len(numbers)):
        if numbers.count(numbers[i]) > 1:
            return False
    return True",0.8191,-6.184555503707999
46,5,"

def solve(numbers):
    if len(numbers) == len(set(numbers)):
        return True
    else:
        return False",0.9467,-1.3705813003659997
47,1,"

def solve(a, b):
    # Initialize variables
    fact_a = 1
    fact_b = 1
    # Calculate factorial of a
    for i in range(1, a+1):
        fact_a *= i
    # Calculate factorial of b
    for i in range(1, b+1):
        fact_b *= i
    # Find the last digit of factorial of a
    last_digit_a = fact_a % 10
    # Find the last digit of factorial of b
    last_digit_b = fact_b % 10
    # Find the last digit when factorial of a divides factorial of b
    last_digit = (last_digit_b // last_digit_a) % 10
    return last_digit",0.8965,-17.052484698691995
47,2,"

def solve(a, b):
    if a > b:
        return 0
    else:
        fact_a = 1
        fact_b = 1
        for i in range(1, a+1):
            fact_a *= i
        for i in range(1, b+1):
            fact_b *= i
        last_digit_a = fact_a % 10
        last_digit_b = fact_b % 10
        if last_digit_a == 0 or last_digit_b == 0:
            return 0
        else:
            return (last_digit_b // last_digit_a) % 10",0.9095,-12.424966489412697
47,3,"

def solve(a, b):
    factorial_a = 1
    factorial_b = 1
    
    for i in range(1, a+1):
        factorial_a *= i
    
    for j in range(1, b+1):
        factorial_b *= j
    
    last_digit_a = factorial_a % 10
    last_digit_b = factorial_b % 10
    
    if last_digit_a == 0:
        return 0
    elif last_digit_b == 0:
        return 1
    elif last_digit_a > last_digit_b:
        return last_digit_a % last_digit_b
    else:
        return last_digit_b % last_digit_a",0.9045,-13.959069536364
47,4,"

def solve(a, b):
    if a == 0 or b == 0:
        return 1
    elif a == b:
        return a % 10
    else:
        f_a = 1
        f_b = 1
        for i in range(1, a+1):
            f_a *= i
        for j in range(1, b+1):
            f_b *= j
        last_digit = f_a % f_b
        return last_digit % 10",0.8223,-20.933013204483007
47,5,"

def solve(a, b):
    a_fact = 1
    b_fact = 1
    
    for i in range(1, a+1):
        a_fact *= i
    
    for i in range(1, b+1):
        b_fact *= i
    
    last_digit = a_fact % b_fact
    
    return last_digit",0.8816,-8.945322404289
48,1,"

def solve(n):
    odd_bits = 0
    for i in range(0, 32, 2):
        odd_bits |= 1 << i
    return n | odd_bits",0.8122,-8.529420757418498
48,2,"

def solve(num):
    result = 0
    bit_pos = 0
    while num > 0:
        if bit_pos % 2 == 1:
            result |= (num & 1) << bit_pos
        num >>= 1
        bit_pos += 1
    return result",0.8274,-12.316718728796298
48,3,"

def solve(n):
    result = 0
    for i in range(0, len(bin(n)[2:]), 2):
        result += 2**i
    return result",0.762,-10.872376510443996
48,4,"

def solve(num):
    mask = 0xAAAAAAAA # mask to set all odd bits to 1
    return num | mask  # bitwise OR with num to set odd bits to 1",0.6478,-17.802050458265
48,5,"

def solve(num):
    result = 0
    i = 1
    while num > 0:
        if i % 2 == 1:
            result = result | (num & 1)
            num = num >> 1
            i += 1
        else:
            num = num >> 1
            i += 1
    return result",0.8497,-12.871448406935995
49,1,"

def solve(two_d_list, index=0):
    result = []
    for lst in two_d_list:
        if len(lst) > index:
            result.append(lst[index])
    return result",0.8467,-6.822860209116004
49,2,"

def solve(lst, index=0):
    result = []
    for i in range(len(lst)):
        if type(lst[i]) == list:
            result.append(lst[i][index])
        else:
            result.append(lst[i])
    return result",0.8751,-6.670269490651002
49,3,"

def solve(lst, n=1):
    result = []
    for sub_lst in lst:
        if len(sub_lst) >= n:
            result.append(sub_lst[n-1])
    return result",0.8566,-6.346148629036001
49,4,"

def solve(two_d_list, index=0):
    result = []
    for sublist in two_d_list:
        result.append(sublist[index])
    return result",0.8859,-4.119926650984999
49,5,"

def solve(lst, n=1):
    lst2 = []
    for i in range(len(lst)):
        if isinstance(lst[i], list) and len(lst[i]) >= n:
            lst2.append(lst[i][n-1])
        else:
            lst2.append(lst[i])
    return lst2",0.7501,-18.118526080531
50,1,"

def solve(lists):
    return min(lists, key=lambda x: len(x))",0.937,-1.236923046565
50,2,"

def solve(lst):
    return min(lst, key=lambda x: len(x))
",0.705,-5.941929070463999
50,3,"

def solve(lists):
    return min(lists, key=lambda x: len(x))",0.937,-1.236923046565
50,4,"

def solve(lists):
    return min(lists, key=lambda x: len(x))",0.937,-1.236923046565
50,5,"

def solve(lists):
    return min(lists, key=lambda x: len(x))",0.937,-1.236923046565
51,1,"

def solve(a, b, c):
    if a == b and b == c:
        print(""The triangle is equilateral."")
    else:
        print(""The triangle is not equilateral."")",0.9262,-3.1423441558589995
51,2,"

def solve(a, b, c):
    if a == b == c:
        print(""The triangle is equilateral."")
    else:
        print(""The triangle is not equilateral."")",0.9162,-3.4142252734409997
51,3,"

def solve(side1, side2, side3):
    if side1 == side2 and side1 == side3:
        print(""Equilateral Triangle"")
    else:
        print(""Not an Equilateral Triangle"")",0.8535,-7.130576625244499
51,4,"

def solve(a,b,c):
    if a == b == c:
        print(""The triangle is equilateral."")
    else:
        print(""The triangle is not equilateral."")",0.8592,-5.616618296386003
51,5,"

def solve(a,b,c):
    if a == b and b == c:
        return ""Equilateral triangle""
    else:
        return ""Not an equilateral triangle""",0.8113,-7.526467578973001
52,1,"

def solve(base, height):
    area = base * height
    return area",0.8995,-1.8014254862839998
52,2,"

def solve(base, height):
    return base * height",0.9557,-0.543870760193
52,3,"

def solve(base, height):
    return base * height",0.9557,-0.543870760193
52,4,"

def solve(base, height):
    return base * height",0.9557,-0.543870760193
52,5,"
def solve(base, height):
    return base * height",0.7826,-2.9414898768299995
53,1,"

def solve(s):
    if len(s) < 2:
        return False
    elif s[0] == s[-1]:
        return True
    else:
        return False",0.8675,-5.544656616554
53,2,"

def solve(str):
    if str[0] == str[-1]:
        return True
    else:
        return False",0.8555,-4.0586311687563015
53,3,"

def solve(string):
    if string[0] == string[-1]:
        return True
    else:
        return False",0.9697,-0.8008887440499999
53,4,"

def solve(string):
  if string[0] == string[-1]:
    return True
  else:
    return False ",0.7834,-6.5894279693333
53,5,"

def solve(string):
    return string[0] == string[-1]",0.7919,-3.7329916028240007
54,1,"

def solve(arr):
    max_num = max(arr)
    min_num = min(arr)
    range_num = max_num - min_num + 1
    count_arr = [0] * range_num
    output_arr = [0] * len(arr)
    
    for i in range(len(arr)):
        count_arr[arr[i] - min_num] += 1
        
    for i in range(1, len(count_arr)):
        count_arr[i] += count_arr[i-1]
        
    for i in range(len(arr)):
        output_arr[count_arr[arr[i] - min_num] - 1] = arr[i]
        count_arr[arr[i] - min_num] -= 1
        
    for i in range(len(arr)):
        arr[i] = output_arr[i]
        
    return arr",0.9176,-14.187262649771505
54,2,"

def solve(arr):
    count = [0] * (max(arr) + 1)
    result = [0] * len(arr)
    
    for num in arr:
        count[num] += 1
    
    for i in range(1, len(count)):
        count[i] += count[i-1]
    
    for num in arr:
        result[count[num]-1] = num
        count[num] -= 1
    
    return result",0.9213,-7.703036564242496
54,3,"

def solve(arr):
    count = [0] * (max(arr) + 1)

    for num in arr:
        count[num] += 1

    sorted_arr = []
    for i in range(len(count)):
        for j in range(count[i]):
            sorted_arr.append(i)

    return sorted_arr",0.8716,-8.931450259265002
54,4,"

def solve(arr):
    max_element = max(arr)
    min_element = min(arr)

    # Create a count array to store the count of each element
    count = [0] * (max_element - min_element + 1)

    # Store the count of each element in the count array
    for element in arr:
        count[element - min_element] += 1

    # Calculate the starting index of each element in the sorted array
    for i in range(1, len(count)):
        count[i] += count[i - 1]

    # Create a output array to store the sorted array
    output = [0] * len(arr)

    # Place each element in the output array based on its count
    for element in arr:
        output[count[element - min_element] - 1] = element
        count[element - min_element] -= 1

    # Copy the sorted array to the original array
    for i in range(len(arr)):
        arr[i] = output[i]",0.8372,-37.49808314721281
54,5,"

def solve(arr): 
    count = [0] * (max(arr) + 1) 
    output = [0] * len(arr) 

    for i in range(len(arr)): 
        count[arr[i]] += 1

    for i in range(1, len(count)): 
        count[i] += count[i-1] 

    for i in range(len(arr)-1, -1, -1): 
        output[count[arr[i]]-1] = arr[i] 
        count[arr[i]] -= 1

    for i in range(len(arr)): 
        arr[i] = output[i] 

    return arr",0.912,-12.4394899800129
55,1,"

def solve(a, r, n):
    return a * (r ** (n-1))",0.9389,-1.32329732172
55,2,"

def solve(a, r, n):
    return a * (r ** (n-1))",0.9389,-1.32329732172
55,3,"

def solve(a, r, n):
    term = a * (r ** (n - 1))
    return term",0.7765,-6.5757547386
55,4,"

def solve(a, r, n):
    term = a * (r ** (n-1))
    return term",0.834,-4.539211131067
55,5,"

def solve(a, r, n):
    return a * (r ** (n-1))",0.9389,-1.32329732172
56,1,"
def solve(num):
    reverse = int(str(num)[::-1])
    if num == (2*reverse) - 1:
        return True
    else:
        return False",0.8309,-7.039101443281302
56,2,"

def solve(num):
    reverse = str(num)[::-1]
    if num == (2 * int(reverse)) - 1:
        return True
    else:
        return False",0.8904,-4.4131151686273995
56,3,"

def solve(n):
    reverse = int(str(n)[::-1])
    if n == (2 * reverse - 1):
        return True
    else:
        return False",0.8564,-5.7375844948836
56,4,"

def solve(num):
    reverse = int(str(num)[::-1])
    if num == (2*reverse) - 1:
        return True
    else:
        return False",0.9096,-3.6008251784403
56,5,"

def solve(n):
    reverse = int(str(n)[::-1])
    if n == (2 * reverse) - 1:
        return True
    else:
        return False",0.9162,-3.3250086683166
57,1,"

def solve(digits):
    digits.sort(reverse=True)
    largest_num = ''
    for digit in digits:
        largest_num += str(digit)
    return int(largest_num)",0.8903,-4.297878814844503
57,2,"

def solve(digits):
    digits.sort(reverse=True)
    num = """"
    for digit in digits:
        num += str(digit)
    return int(num)",0.8626,-4.876906841914002
57,3,"

def solve(digits):
    # convert digits to a list
    digits_list = list(str(digits))
    # sort the digits in descending order
    digits_list.sort(reverse=True)
    # join the digits to form the largest number
    largest_num = int("""".join(digits_list))
    return largest_num",0.7938,-14.547224579799
57,4,"

def solve(digits):
    digits.sort(reverse=True)
    largest_num = """"
    for digit in digits:
        largest_num += str(digit)
    return int(largest_num)",0.9009,-3.860763253263
57,5,"

def solve(digits):
    digits.sort(reverse=True)
    return int("""".join(str(i) for i in digits))",0.8257,-4.7895447730292995
58,1,"

def solve(x, y):
    return (x < 0 and y > 0) or (x > 0 and y < 0)",0.9076,-3.1010178789790013
58,2,"

def solve(x, y):
    return (x < 0 and y > 0) or (x > 0 and y < 0)",0.9076,-3.1010178789790013
58,3,"

def solve(a, b):
    return (a < 0 and b > 0) or (a > 0 and b < 0)",0.9022,-3.294529377548
58,4,"

def solve(x, y):
    if (x < 0 and y > 0) or (x > 0 and y < 0):
        return True
    else:
        return False",0.9415,-2.530981856353
58,5,"

def solve(x, y):
    if (x < 0 and y > 0) or (x > 0 and y < 0):
        return True
    else:
        return False",0.9415,-2.530981856353
59,1,"

def solve(n):
    return n * (3 * n - 2)",0.9372,-1.10253531586
59,2,"

def solve(n):
    return n * (3 * n - 2)",0.9372,-1.10253531586
59,3,"

def solve(n):
    return n * (3 * n - 2)",0.9372,-1.10253531586
59,4,"

def solve(n):
    return n * (3 * n - 2)",0.9372,-1.10253531586
59,5,"

def solve(n):
    return n*(3*n-2)",0.8711,-1.93121551589
60,1,"

def solve(arr):
    longest = 0
    for i in range(len(arr)):
        current = 1
        j = i+1
        while j < len(arr):
            if abs(arr[j] - arr[j-1]) <= 1:
                current += 1
                j += 1
            else:
                break
        longest = max(longest, current)
    return longest",0.861,-12.724198661566998
60,2,"

def solve(arr):
    dp = [1] * len(arr)
    for i in range(1, len(arr)):
        for j in range(i):
            if abs(arr[i] - arr[j]) == 1:
                dp[i] = max(dp[i], dp[j] + 1)
    return max(dp)",0.9501,-3.480606828556001
60,3,"

def solve(arr):
    max_length = 0
    for i in range(len(arr)):
        curr_length = 1
        curr_element = arr[i]
        for j in range(i+1, len(arr)):
            if abs(arr[j] - curr_element) == 1:
                curr_length += 1
                curr_element = arr[j]
        max_length = max(max_length, curr_length)
    return max_length",0.8752,-11.8594638881877
60,4,"

def solve(arr):
    max_len = 1
    curr_len = 1
    
    for i in range(1, len(arr)):
        if abs(arr[i] - arr[i-1]) <= 1:
            curr_len += 1
        else:
            curr_len = 1
        
        if curr_len > max_len:
            max_len = curr_len
    
    return max_len",0.908,-7.9122707978007005
60,5,"

def solve(arr):
    if len(arr) == 0:
        return 0
    
    max_length = 1
    curr_length = 1
    
    for i in range(1, len(arr)):
        if abs(arr[i] - arr[i-1]) <= 1:
            curr_length += 1
        else:
            curr_length = 1
        max_length = max(max_length, curr_length)
    
    return max_length",0.8914,-10.690344894616
61,1,"

def solve(s):
    count = 0
    for i in range(len(s)):
        for j in range(i+1, len(s)+1):
            sub = s[i:j]
            if sum(map(int, sub)) == len(sub):
                count += 1
    return count",0.9232,-4.871473647002998
61,2,"

def solve(s):
    count = 0
    for i in range(len(s)):
        for j in range(i+1, len(s)+1):
            sub = s[i:j]
            if sum(int(digit) for digit in sub) == len(sub):
                count += 1
    return count",0.9222,-5.2646365616303
61,3,"

def solve(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            substring = string[i:j]
            if sum(map(int, substring)) == len(substring):
                count += 1
    return count",0.9369,-4.041681538761
61,4,"

def solve(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            substr = string[i:j]
            if len(substr) == sum(map(int, substr)):
                count += 1
    return count",0.905,-6.08756106961
61,5,"

def solve(s):
    count = 0
    for i in range(len(s)):
        for j in range(i+1, len(s)+1):
            sub = s[i:j]
            if len(sub) == sum([int(d) for d in sub]):
                count += 1
    return count",0.8903,-7.555838040409999
62,1,"

def solve(lst):
  min_num = lst[0]
  for num in lst:
    if num < min_num:
      min_num = num
  return min_num",0.85,-5.851041706422499
62,2,"

def solve(lst): 
    smallest = lst[0] 
    for i in range(1, len(lst)): 
        if lst[i] < smallest: 
            smallest = lst[i] 
    return smallest",0.8513,-7.2427305373343005
62,3,"

def solve(numbers):
    smallest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
    return smallest",0.9141,-2.8742054802839005
62,4,"

def solve(lst):
    smallest = lst[0]
    for num in lst:
        if num < smallest:
            smallest = num
    return smallest",0.9632,-1.2002868656388996
62,5,"

def solve(lst):
    smallest = lst[0]
    for num in lst:
        if num < smallest:
            smallest = num
    return smallest",0.9632,-1.2002868656388996
63,1,"

def solve(tuple_list):
    max_diff = 0
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])
            if diff > max_diff:
                max_diff = diff
    return max_diff",0.9702,-2.540780508938999
63,2,"

def solve(tuple_list):
    max_diff = 0
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])
            if diff > max_diff:
                max_diff = diff
    return max_diff",0.9702,-2.540780508938999
63,3,"

def solve(tuple_list):
    max_diff = 0
    for tup in tuple_list:
        for i in range(len(tup)):
            for j in range(i+1, len(tup)):
                diff = abs(tup[i] - tup[j])
                if diff > max_diff:
                    max_diff = diff
    return max_diff",0.9158,-6.244578064030101
63,4,"

def solve(tuple_list):
    max_diff = 0
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            diff = abs(tuple_list[i][0] - tuple_list[j][0])
            if diff > max_diff:
                max_diff = diff
    return max_diff",0.9682,-2.2286864018230004
63,5,"

def solve(tuple_list):
  max_diff = 0
  for i in range(len(tuple_list)):
    for j in range(i+1, len(tuple_list)):
      diff = abs(tuple_list[i][0] - tuple_list[j][0])
      if diff > max_diff:
        max_diff = diff
  return max_diff",0.9349,-4.645997637495
64,1,"

def solve(list_of_tuples):
    return sorted(list_of_tuples, key=lambda x: x[0])",0.8981,-2.3634670037449994
64,2,"

def solve(lst):
    return sorted(lst, key=lambda x: x[0])",0.886,-2.1778236385139995
64,3,"

def solve(tuple_list):
  sorted_list = sorted(tuple_list, key = lambda x: x[0])
  return sorted_list",0.7272,-8.601109142052
64,4,"

def solve(lst):
    return sorted(lst, key=lambda tup: tup[0])",0.7747,-4.594068717314
64,5,"

def solve(lst):
    return sorted(lst, key=lambda x: x[0])",0.886,-2.1778236385139995
65,1,"

def solve(lst):
    if not lst:
        return 0
    else:
        return lst[0] + solve(lst[1:])",0.8969,-3.265278185122501
65,2,"

def solve(lst):
    if len(lst) == 0:
        return 0
    else:
        return lst[0] + solve(lst[1:])",0.9646,-1.2238899318866003
65,3,"

def solve(nums):
    if len(nums) == 1:
        return nums[0]
    else:
        return nums[0] + solve(nums[1:])",0.8914,-4.024359029468499
65,4,"
def solve(lst):
    if len(lst) == 0: # base case
        return 0
    else:
        return lst[0] + solve(lst[1:]) # recursive case",0.7926,-9.528159888273304
65,5,"

def solve(lst):
    if len(lst) == 0:
        return 0
    else:
        return lst[0] + solve(lst[1:])",0.9646,-1.2238899318866003
66,1,"

def solve(lst):
    count = 0
    for num in lst:
        if num > 0:
            count += 1
    return count",0.9773,-0.7566580023794
66,2,"

def solve(list):
    count = 0
    for num in list:
        if num > 0:
            count += 1
    return count",0.9033,-3.3559099689121
66,3,"

def solve(numbers):
    count = 0
    for num in numbers:
        if num > 0:
            count += 1
    return count",0.9275,-2.4834594291576
66,4,"

def solve(lst):
    count = 0
    for num in lst:
        if num > 0:
            count += 1
    return count",0.9773,-0.7566580023794
66,5,"

def solve(lst):
    count = 0
    for num in lst:
        if num > 0:
            count += 1
    return count",0.9773,-0.7566580023794
67,1,"

def solve(n):
    if n == 0:
        return 1
    bell = [[0 for i in range(n+1)] for j in range(n+1)]
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1):
            bell[i][j] = bell[i][j-1] + bell[i-1][j-1]
    return bell[n][0]",0.9507,-6.069766688604997
67,2,"

def solve(n):
    if n < 0:
        return 0
    if n == 0 or n == 1:
        return 1
    bell = [[0 for i in range(n+1)] for j in range(n+1)]
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1):
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
    return bell[n][0]",0.9363,-9.019340542058494
67,3,"

def solve(n):
    if n == 0:
        return 1
    bell = [[0 for i in range(n+1)] for j in range(n+1)]
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1,i+1):
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
    return bell[n][0]

# Test cases
print(solve(0)) # 1
print(solve(1)) # 1
print(solve(2)) # 2
print(solve(3)) # 5
print(solve(4)) # 15",0.9143,-15.407535837423
67,4,"

def solve(n):
    bell = [[0 for i in range(n+1)] for j in range(n+1)]
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1):
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
    return bell[n][0]",0.9681,-3.4996570471005017
67,5,"

def solve(n):
    if n == 0:
        return 1
    else:
        bell = [[0 for x in range(n+1)] for y in range(n+1)]
        bell[0][0] = 1
        for i in range(1, n+1):
            bell[i][0] = bell[i-1][i-1]
            for j in range(1, i+1):
                bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
        return bell[n][0]",0.9395,-7.671397687705996
68,1,"

def solve(arr):
    increasing = True
    decreasing = True
    
    for i in range(len(arr)-1):
        if arr[i] > arr[i+1]:
            increasing = False
        if arr[i] < arr[i+1]:
            decreasing = False
    
    if increasing == True or decreasing == True:
        return True
    else:
        return False",0.9276,-5.7877271011925
68,2,"

def solve(array):
    increasing = True
    decreasing = True
    
    for i in range(len(array)-1):
        if array[i] > array[i+1]:
            increasing = False
        if array[i] < array[i+1]:
            decreasing = False
    if increasing or decreasing:
        return True
    else:
        return False",0.8849,-8.926280655613002
68,3,"

def solve(arr):
    increasing = True
    decreasing = True
    for i in range(len(arr)-1):
        if arr[i] > arr[i+1]:
            increasing = False
        if arr[i] < arr[i+1]:
            decreasing = False
    if increasing or decreasing:
        return True
    else:
        return False",0.9468,-3.990592225915999
68,4,"

def solve(arr):
    increasing = True
    decreasing = True
    for i in range(len(arr)-1):
        if arr[i] > arr[i+1]:
            increasing = False
        if arr[i] < arr[i+1]:
            decreasing = False
    return increasing or decreasing",0.9403,-3.819619577560999
68,5,"

def solve(arr):
    is_monotonic = True
    increasing = True
    decreasing = True
    
    for i in range(1, len(arr)):
        if arr[i] > arr[i-1]:
            decreasing = False
        elif arr[i] < arr[i-1]:
            increasing = False
    
    if increasing or decreasing:
        return is_monotonic
    else:
        return not is_monotonic",0.8947,-9.9034616931501
69,1,"

def solve(list, sublist):
    for i in range(len(list)-len(sublist)+1):
        if sublist == list[i:i+len(sublist)]:
            return True
    return False",0.8519,-6.409480493163999
69,2,"

def solve(list, sublist):
    if not sublist:
        return True
    if not list:
        return False
    for i in range(len(list)):
        if list[i:i+len(sublist)] == sublist:
            return True
    return False",0.8538,-8.221888081580998
69,3,"

def solve(lst, sublist):
    if len(sublist) > len(lst):
        return False
    for i in range(len(lst)):
        if lst[i:i+len(sublist)] == sublist:
            return True
    return False",0.8924,-5.465044801538498
69,4,"

def solve(list1, sublist):
    for i in range(len(list1)):
        if list1[i:i+len(sublist)] == sublist:
            return True
    return False",0.91,-3.488164995756001
69,5,"

def solve(list, sublist):
    if len(sublist) > len(list):
        return False
    for i in range(len(list)-len(sublist)+1):
        if list[i:i+len(sublist)] == sublist:
            return True
    return False",0.8919,-6.1795601243429985
70,1,"

def solve(tuples):
    length = len(tuples[0])
    for tup in tuples:
        if len(tup) != length:
            return False
    return True",0.9573,-1.6129984180519998
70,2,"

def solve(tuples):
    length = len(tuples[0])
    for tuple in tuples:
        if len(tuple) != length:
            return False
    return True",0.939,-2.266481312311999
70,3,"

def solve(tuples):
    length = len(tuples[0])
    for tuple in tuples:
        if len(tuple) != length:
            return False
    return True",0.939,-2.266481312311999
70,4,"

def solve(tuples):
    length = len(tuples[0])
    for t in tuples:
        if len(t) != length:
            return False
    return True",0.9478,-1.930356602721
70,5,"

def solve(tuples):
    length = len(tuples[0])
    for t in tuples:
        if len(t) != length:
            return False
    return True",0.9478,-1.930356602721
71,1,"

def solve(lst):
    gap = len(lst)
    shrink = 1.3
    sorted = False
    while not sorted:
        gap = int(gap/shrink)
        if gap < 1:
            gap = 1
            sorted = True
        i = 0
        while i+gap < len(lst):
            if lst[i] > lst[i+gap]:
                lst[i], lst[i+gap] = lst[i+gap], lst[i]
                sorted = False
            i += 1
    return lst",0.9353,-7.628565631327499
71,2,"

def comb_sort(arr):
    gap = len(arr)
    shrink = 1.3
    sorted = False
    
    while not sorted:
        gap = int(gap / shrink)
        if gap <= 1:
            gap = 1
            sorted = True
        
        i = 0
        while i + gap < len(arr):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap] = arr[i + gap], arr[i]
                sorted = False
            i += 1
    
    return arr",0.9281,-8.5864327485565
71,3,"

def solve(arr):
    gap = len(arr)
    shrink = 1.3
    swapped = True
    
    while gap > 1 or swapped:
        gap = int(gap / shrink)
        swapped = False
        
        for i in range(len(arr) - gap):
            if arr[i] > arr[i + gap]:
                arr[i], arr[i + gap] = arr[i + gap], arr[i]
                swapped = True
                
    return arr",0.9222,-7.695178269688001
71,4,"

def solve(lst):
    gap = len(lst)
    shrink = 1.3
    sorted = False

    while not sorted:
        gap = int(gap / shrink)
        if gap < 1:
            gap = 1
            sorted = True
        else:
            sorted = False

        i = 0
        while i + gap < len(lst):
            if lst[i] > lst[i + gap]:
                lst[i], lst[i + gap] = lst[i + gap], lst[i]
                sorted = False
            i += 1
    return lst",0.9182,-10.417772019771
71,5,"

def solve(lst):
    gap = len(lst)
    shrink = 1.3
    sorted = False
    
    while not sorted:
        gap = int(gap / shrink)
        if gap <= 1:
            gap = 1
            sorted = True
        
        i = 0
        while i + gap < len(lst):
            if lst[i] > lst[i + gap]:
                lst[i], lst[i + gap] = lst[i + gap], lst[i]
                sorted = False
            i += 1
    return lst",0.9433,-6.655735895513999
72,1,"

def solve(n):
    for i in range(1, int(n**0.5)+1):
        if (n - i**2)**0.5 == int((n - i**2)**0.5):
            return True
    return False",0.8843,-6.640060969619401
72,2,"

def solve(num):
    for i in range(1, int(num/2)+1):
        j = num - i*i
        if j > 0 and j == int(j**0.5)**2:
            return True
    return False",0.7919,-12.365743052764
72,3,"

def solve(n):
    for i in range(1, n):
        for j in range(i+1, n):
            if j*j - i*i == n:
                return True
    return False",0.8669,-6.140400057446001
72,4,"

def solve(n):
    for i in range(1,n):
        if (i*i - (n-i)*(n+i)) == 0:
            return True
    return False",0.7101,-13.008458424856
72,5,"

def solve(n):
    for i in range(1, int(n**0.5) + 1):
        if n - i**2 == (n - i**2)**0.5:
            return True
    return False",0.8544,-7.8694099928447
73,1,"

def solve(string):
    delimiters = ""[,;.:]""
    split_string = re.split(delimiters, string)
    return split_string",0.7001,-10.341048575562
73,2,"

def solve(string):
    return re.split('[,;._-]', string)",0.5827,-9.18224723825
73,3,"

def solve(string):
    import re
    delimiters = ""[,;.: -_]""
    return re.split(delimiters, string)",0.5636,-16.629584305988
73,4,"

import re

def solve(string):
    delimiters = '[,.;:?!]'
    return re.split(delimiters, string)",0.663,-11.097928685896
73,5,"

def solve(string):
    return re.split('[,.;:|]', string)",0.6088,-8.43526344625
74,1,"

def solve(sequence, patterns):
    pattern_index = 0
    for num in sequence:
        if num == patterns[pattern_index]:
            pattern_index += 1
            if pattern_index == len(patterns):
                return True
        else:
            continue
    return False",0.8434,-9.880838496999996
74,2,"

def solve(seq, patterns):
    for i in range(len(seq)-1):
        if (seq[i+1] - seq[i]) not in patterns:
            return False
    return True",0.7846,-9.702234321699
74,3,"

def solve(string, patterns):
    for i in range(len(patterns)):
        if patterns[i] in string:
            string = string.replace(patterns[i], '', 1)
        else:
            return False
    return True",0.8327,-8.602625815161
74,4,"
def solve(patterns, word):
    if len(patterns) == 0:
        return False
    curr_pattern = patterns[0]
    curr_word = ''
    for letter in word:
        if letter.isdigit():
            curr_word += letter
        else:
            if curr_pattern == 'D' and not curr_word.isdigit():
                return False
            elif curr_pattern == 'A' and curr_word.isdigit():
                return False
            curr_word = ''
            curr_pattern = patterns[patterns.index(curr_pattern)+1]
    if curr_pattern == 'D' and not curr_word.isdigit():
        return False
    elif curr_pattern == 'A' and curr_word.isdigit():
        return False
    return True",0.7805,-36.43301486719039
74,5,"

def solve(array, patterns):
    for i in range(len(array)-1):
        if array[i] not in patterns or array[i+1] not in patterns:
            return False
        elif patterns.index(array[i]) != patterns.index(array[i+1]) - 1:
            return False
    return True",0.7934,-15.04422120856
75,1,"

def solve(lst, k):
    result = []
    for tup in lst:
        flag = True
        for num in tup:
            if num % k != 0:
                flag = False
                break
        if flag:
            result.append(tup)
    return result",0.9352,-3.8887559595076007
75,2,"

def solve(lst, k):
    result = []
    for tup in lst:
        for num in tup:
            if num % k != 0:
                break
        else:
            result.append(tup)
    return result",0.8652,-6.807388050776
75,3,"

def solve(tuples, k):
    result = []
    for tup in tuples:
        divisible = True
        for element in tup:
            if element % k != 0:
                divisible = False
                break
        if divisible:
            result.append(tup)
    return result",0.911,-5.498091033554899
75,4,"

def solve(lst, k):
    res = []
    for tup in lst:
        flag = True
        for num in tup:
            if num % k != 0:
                flag = False
                break
        if flag:
            res.append(tup)
    return res",0.9297,-4.230361903809802
75,5,"

def solve(lst, k):
    return [tup for tup in lst if all(elem % k == 0 for elem in tup)]",0.8537,-4.587754376451
76,1,"

def solve(length, width):
    count = 0
    for i in range(1, min(length, width) + 1):
        count += (length - i + 1) * (width - i + 1)
    return count",0.9474,-2.8612264945993
76,2,"

def solve(length, width):
    count = 0
    for i in range(1, min(length, width) + 1):
        count += (length - i + 1) * (width - i + 1)
    return count",0.9474,-2.8612264945993
76,3,"

def solve(length, width):
    return (length * width) + (length - 1) * (width - 1)",0.8094,-5.920080063516999
76,4,"

def solve(length, width):
    count = 0
    for i in range(1, min(length, width) + 1):
        count += (length - i + 1) * (width - i + 1)
    return count",0.9474,-2.8612264945993
76,5,"

def solve(length, width):
    count = 0
    for i in range(1, min(length, width) + 1):
        count += (length - i + 1) * (width - i + 1)

    return count",0.8746,-7.1022707288533
77,1,"

def solve(num):
    even_sum = 0
    odd_sum = 0
    for digit in str(num):
        if int(digit) % 2 == 0:
            even_sum += int(digit)
        else:
            odd_sum += int(digit)
    return even_sum - odd_sum",0.9648,-2.3284251184922
77,2,"
def solve(num):
    even_sum = 0
    odd_sum = 0
    for digit in str(num):
        if int(digit) % 2 == 0:
            even_sum += int(digit)
        else:
            odd_sum += int(digit)
    return even_sum - odd_sum",0.914,-5.847727725998904
77,3,"

def solve(number):
    even_sum = 0
    odd_sum = 0
    for digit in str(number):
        if int(digit) % 2 == 0:
            even_sum += int(digit)
        else:
            odd_sum += int(digit)
    return even_sum - odd_sum",0.9527,-3.1523945164344003
77,4,"

def solve(n):
    even_sum = 0
    odd_sum = 0
    while n != 0:
        digit = n % 10
        if digit % 2 == 0:
            even_sum += digit
        else:
            odd_sum += digit
        n = n // 10
    return even_sum - odd_sum",0.9255,-5.730456343397302
77,5,"

def solve(n):
    even_sum = 0
    odd_sum = 0
    for digit in str(n):
        if int(digit) % 2 == 0:
            even_sum += int(digit)
        else:
            odd_sum += int(digit)
    return even_sum - odd_sum",0.9563,-2.9028969840924006
78,1,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        if bin(i).count('1') % 2 != 0:
            count += 1
    return count",0.9472,-2.6023063030955003
78,2,"

def solve(n):
    count = 0
    for i in range(n+1):
        if bin(i).count('1') % 2 != 0:
            count += 1
    return count",0.9234,-3.5851536586797
78,3,"

def solve(num):
    count = 0
    for i in range(1,num+1):
        binary = bin(i)[2:]
        num_set_bits = binary.count('1')
        if num_set_bits % 2 == 1:
            count += 1
    return count",0.8044,-13.277955523848998
78,4,"
def solve(n):
    count = 0
    for i in range(1, n+1):
        binary = bin(i)[2:]
        if binary.count('1') % 2 != 0:
            count += 1
    return count",0.8649,-7.838939790689
78,5,"

def solve(n):
    count = 0
    for num in range(n+1):
        if bin(num).count('1') % 2 != 0:
            count += 1
    return count",0.8659,-6.479297075041
79,1,"

def solve(word):
    if len(word) % 2 == 0:
        return False
    else:
        return True",0.9568,-1.1931516503159998
79,2,"

def solve(word):
    if len(word) % 2 == 1:
        return ""Odd""
    else:
        return ""Not odd""",0.8254,-5.949049887645999
79,3,"

def solve(word):
    if len(word) % 2 == 0:
        return False
    else:
        return True",0.9568,-1.1931516503159998
79,4,"

def solve(word):
    return len(word) % 2 == 1",0.7879,-3.813209935726
79,5,"

def solve(word):
    if len(word) % 2 == 0:
        return False
    else:
        return True",0.9568,-1.1931516503159998
80,1,"

def solve(n):
    return (n * (n + 1) * (n + 2)) // 6 ",0.846,-4.515457146938
80,2,"



def solve(n):
    return (n * (n + 1) * (n + 2)) // 6",0.7304,-8.168709527546996
80,3,"

def solve(n):
    return (n * (n + 1) * (n + 2)) // 6",0.952,-1.280308046938
80,4,"

def solve(n):
    return (n * (n + 1) * (n + 2)) // 6",0.952,-1.280308046938
80,5,"

def solve(n):
    return (n * (n + 1) * (n + 2)) // 6",0.952,-1.280308046938
81,1,"

def solve(tup1, tup2):
    return tuple(zip(tup1, tup2))",0.92,-1.7509808714648
81,2,"

def solve(tup1, tup2):
    zipped = list(zip(tup1, tup2))
    return zipped",0.8575,-4.1496590751899
81,3,"

def solve(tup1, tup2):
  return tuple(zip(tup1, tup2))",0.8112,-4.395064882307801
81,4,"

def solve(t1, t2):
    return tuple(zip(t1, t2))",0.8351,-3.4237026304446996
81,5,"

def solve(tuple1, tuple2):
    return tuple(zip(tuple1, tuple2))",0.8521,-3.0405233086722
82,1,"

def solve(radius):
    pi = 3.14159
    volume = (4/3) * pi * (radius**3)
    return volume",0.9013,-3.4277093527219997
82,2,"

def solve(radius):
    volume = (4/3) * pi * (radius**3)
    return volume",0.7449,-7.069463183818599
82,3,"

def solve(radius):
    volume = (4/3) * 3.14159265359 * (radius ** 3)
    return volume",0.8175,-6.2469797341376
82,4,"

def solve(radius):
    volume = (4/3) * 3.14159265359 * (radius ** 3)
    return volume",0.8175,-6.2469797341376
82,5,"

def solve(radius):
    pi = 3.141592653589793
    volume = (4/3) * pi * (radius**3)
    return volume",0.8962,-3.946939461543499
83,1,"

def solve(string):
    result = """"
    for char in string:
        result += char
    return result",0.8475,-3.804812430936
83,2,"

def solve(string):
    total = 0
    for char in string:
        total += ord(char)
    return chr(total)",0.9399,-1.736517057269
83,3,"

def solve(string):
    total = 0
    for char in string:
        total += ord(char)
    return chr(total)",0.9399,-1.736517057269
83,4,"

def solve(string):
    sum = 0
    for i in string:
        sum += ord(i)
    return chr(sum)",0.8265,-5.333863252096
83,5,"

def solve(s):
    total = 0
    for char in s:
        total += ord(char)
    return chr(total)",0.9014,-2.90506158882
84,1,"

def solve(n):
    if n == 1 or n == 2:
        return 1
    else:
        a = 1
        b = 1
        for i in range(3, n+1):
            c = a + b
            a = b
            b = c
        return b",0.9175,-5.938583292710499
84,2,"

def solve(n):
    if n == 0:
        return 0
    if n == 1 or n == 2:
        return 1
    else:
        return solve(n-1) + solve(solve(n-1))",0.8691,-7.296949846638998
84,3,"

def solve(n):
    if n == 1 or n == 2:
        return 1
    else:
        return solve(solve(n-1)) + solve(n-solve(n-1))",0.945,-2.4342737992249996
84,4,"

def solve(n):
    if n == 1 or n == 2:
        return 1
    else:
        seq = [0, 1, 1]
        for i in range(3, n+1):
            seq.append(seq[seq[i-1]] + seq[i - seq[i-1]])
    return seq[n]

# Test case
print(solve(10)) # Output: 6",0.7834,-21.47858535751
84,5,"

def solve(n):
    if n == 1 or n == 2:
        return 1
    else:
        return solve(solve(n-1)) + solve(n-solve(n-1))",0.945,-2.4342737992249996
85,1,"

import math

def solve(radius):
    area = 4 * math.pi * (radius**2)
    return area",0.7957,-5.71247763609
85,2,"

import math

def solve(radius):
    surface_area = 4 * math.pi * radius**2
    return surface_area",0.8698,-3.627517567414
85,3,"

import math

def solve(radius):
    surface_area = 4 * math.pi * radius**2
    return surface_area",0.8698,-3.627517567414
85,4,"

def solve(radius):
    return 4 * 3.14 * radius**2",0.7617,-4.9005459545039995
85,5,"

def solve(radius):
    return 4 * math.pi * (radius**2)",0.7729,-4.63768169817
86,1,"

def solve(n):
    return n * (2 * n - 1)",0.8743,-2.283107875846
86,2,"

def solve(n):
    return (3*n**2 - 3*n + 1)",0.852,-3.20244463136
86,3,"

def solve(n):
    return n * (2 * n - 1)",0.8743,-2.283107875846
86,4,"

def solve(n):
    return n*(2*n-1)",0.8301,-2.6062628985400003
86,5,"

def solve(n):
    return n * (2*n - 1) * (2*n - 2) // 3 + 1",0.8207,-5.929201329320001
87,1,"

def solve(dict1, dict2, dict3):
    return {**dict1, **dict2, **dict3}",0.9723,-0.7581874018000002
87,2,"

def solve(dict1, dict2, dict3):
    return {**dict1, **dict2, **dict3}",0.9723,-0.7581874018000002
87,3,"

def solve(dict1, dict2, dict3):
    return {**dict1, **dict2, **dict3}",0.9723,-0.7581874018000002
87,4,"

def solve(d1, d2, d3):
    return {**d1, **d2, **d3}",0.9311,-1.926272881556
87,5,"

def solve(dict1, dict2, dict3):
    return {**dict1, **dict2, **dict3}",0.9723,-0.7581874018000002
88,1,"

def solve(lst):
    freq = {}
    for elem in lst:
        if elem in freq:
            freq[elem] += 1
        else:
            freq[elem] = 1
    return freq",0.9581,-1.9251601672255
88,2,"

def solve(lst):
    freq = {}
    for elem in lst:
        if elem in freq:
            freq[elem] += 1
        else:
            freq[elem] = 1
    return freq",0.9581,-1.9251601672255
88,3,"

def solve(lst):
    freq = {}
    for elem in lst:
        if elem in freq:
            freq[elem] += 1
        else:
            freq[elem] = 1
    return freq",0.9581,-1.9251601672255
88,4,"

def solve(lst):
    freq = {}
    for ele in lst:
        if ele in freq:
            freq[ele] += 1
        else:
            freq[ele] = 1
    return freq",0.935,-3.0239672212886997
88,5,"

def solve(lst):
    freq = {}
    for i in lst:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq",0.9437,-2.4930088501753005
89,1,"

def solve(n):
    return n-1",0.7615,-2.72488796514
89,2,"

def solve(n):
    if n == 0:
        return None
    else:
        return n - 1",0.8212,-4.924781731554
89,3,"

def solve(n):
    closest = n - 1
    while closest >= 0:
        if closest < n:
            return closest
        closest -= 1
    return None",0.8343,-7.063591252695
89,4,"

def solve(n):
    if n == 0:
        return -1
    else:
        return n - 1",0.8424,-4.459356158236
89,5,"

def solve(n):
  if n == 0:
    return None
  else:
    return n-1",0.7139,-8.087143924550002
90,1,"

def solve(sentence):
    longest_word = """"
    words = sentence.split()
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return len(longest_word)",0.896,-5.050021549015099
90,2,"

def solve(sentence):
    words = sentence.split()
    longest = 0
    for word in words:
        if len(word) > longest:
            longest = len(word)
    return longest",0.902,-4.123688988384
90,3,"

def solve(words):
    longest = """"
    for word in words:
        if len(word) > len(longest):
            longest = word
    return len(longest)",0.9054,-3.5777291810617013
90,4,"

def solve(word_list):
    longest_word = """"
    for word in word_list:
        if len(word) > len(longest_word):
            longest_word = word
    return len(longest_word)",0.8939,-4.710929450543398
90,5,"

def solve(words):
    longest_word = """"
    for word in words:
        if len(word) > len(longest_word):
            longest_word = word
    return len(longest_word)",0.9323,-2.8034539895360995
91,1,"

def solve(substring, string_list):
    for string in string_list:
        if substring in string:
            return True
    return False",0.9765,-0.6883033820450002
91,2,"

def solve(substring, string_list):
    for string in string_list:
        if substring in string:
            return True
    return False",0.9765,-0.6883033820450002
91,3,"

def solve(substring, string_list):
    for string in string_list:
        if substring in string:
            return True
    return False",0.9765,-0.6883033820450002
91,4,"

def solve(substring, string_list):
    for string in string_list:
        if substring in string:
            return True
    return False",0.9765,-0.6883033820450002
91,5,"

def solve(substring, list_of_strings):
    for string in list_of_strings:
        if substring in string:
            return True
    return False",0.917,-2.6846102621703993
92,1,"

def solve(n):
    num_str = str(n)
    if len(num_str) < 3:
        return False
    for i in range(1, len(num_str)-1):
        if num_str[i-1] == num_str[i+1]:
            return False
    return True",0.8708,-8.575931715423499
92,2,"

def solve(number):
    string = str(number)
    if len(string) < 3:
        return False
    for i in range(len(string)-2):
        if string[i] == string[i+1] or string[i+1] == string[i+2] or string[i] == string[i+2]:
            return False
    return True",0.8463,-12.347786743325
92,3,"

def solve(n):
    s = str(n)
    if len(s) < 3:
        return False
    for i in range(1, len(s) - 1):
        if s[i - 1] == s[i + 1]:
            return False
    return True",0.8617,-9.082138521903005
92,4,"

def solve(n):
    n = str(n)
    prev = n[0]
    for i in range(1, len(n)):
        if i % 2 == 0 and n[i] != prev:
            return False
        elif i % 2 == 1 and n[i] == prev:
            return False
        prev = n[i]
    return True",0.8387,-13.721730454516
92,5,"

def solve(num):
    str_num = str(num)
    if len(str_num) < 3:
        return False
    for i in range(len(str_num)-2):
        if str_num[i] == str_num[i+1] or str_num[i+1] == str_num[i+2]:
            return False
        elif (int(str_num[i]) < int(str_num[i+1]) and int(str_num[i+1]) < int(str_num[i+2])) or (int(str_num[i]) > int(str_num[i+1]) and int(str_num[i+1]) > int(str_num[i+2])):
            return False
    return True",0.9057,-13.671089319499997
93,1,"
def solve(a, b):
    return a ** b",0.7547,-3.376751027178
93,2,"

def solve(a, b):
    return a ** b",0.9257,-0.92626392432
93,3,"

def solve(a, b):
    return a ** b",0.9257,-0.92626392432
93,4,"

def solve(a, b):
    return a**b",0.8285,-2.25771719883
93,5,"

def solve(a, b):
    return a ** b",0.9257,-0.92626392432
94,1,"

def solve(tuples):
    min_index = 0
    for i in range(1, len(tuples)):
        if tuples[i][1] < tuples[min_index][1]:
            min_index = i
    return tuples[min_index]",0.9123,-4.682860180472998
94,2,"

def solve(tuples):
    min_val = tuples[0][0]
    min_index = 0
    for i in range(len(tuples)):
        if tuples[i][0] < min_val:
            min_val = tuples[i][0]
            min_index = i
    return tuples[min_index]",0.9289,-4.717179785173099
94,3,"

def solve(tuples):
    min_index = 0
    min_value = tuples[0][0]
    for i in range(len(tuples)):
        if tuples[i][0] < min_value:
            min_value = tuples[i][0]
            min_index = i
    return tuples[min_index]",0.9329,-4.445273335990501
94,4,"

def solve(tuples):
    min_val = tuples[0][1]
    min_idx = 0
    for i in range(1, len(tuples)):
        if tuples[i][1] < min_val:
            min_val = tuples[i][1]
            min_idx = i
    return tuples[min_idx]",0.9136,-6.055306962984999
94,5,"

def solve(tuples):
    min_val = tuples[0][0]
    min_idx = 0
    for i in range(len(tuples)):
        if tuples[i][0] < min_val:
            min_val = tuples[i][0]
            min_idx = i
    return tuples[min_idx]",0.9177,-5.496518940208298
95,1,"

def solve(lst):
    min_len = len(lst[0])
    for sublist in lst:
        if len(sublist) < min_len:
            min_len = len(sublist)
    return min_len",0.9321,-2.9515360414733007
95,2,"

def solve(lst):
    min_len = len(lst)
    for sublist in lst:
        if len(sublist) < min_len:
            min_len = len(sublist)
    return min_len",0.8952,-4.427857661783799
95,3,"

def solve(lst):
    min_length = len(lst[0])
    for sublist in lst:
        if len(sublist) < min_length:
            min_length = len(sublist)
    return min_length",0.9353,-2.8115365682972
95,4,"

def solve(lst):
    min_len = float('inf')
    for sublist in lst:
        if len(sublist) < min_len:
            min_len = len(sublist)
    return min_len",0.911,-3.821345726896599
95,5,"

def solve(lst):
    min_len = float('inf')
    for sublst in lst:
        if len(sublst) < min_len:
            min_len = len(sublst)
    return min_len",0.9137,-3.7895090554856017
96,1,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        if n % i == 0:
            count += 1
    return count",0.9708,-1.2169440717047004
96,2,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        if n%i == 0:
            count += 1
    return count",0.9219,-3.2540892838937
96,3,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        if n % i == 0:
            count += 1
    return count",0.9708,-1.2169440717047004
96,4,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        if n % i == 0:
            count += 1
    return count",0.9708,-1.2169440717047004
96,5,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        if n % i == 0:
            count += 1
    return count",0.9708,-1.2169440717047004
97,1,"

def solve(lists):
    freq = {}
    for lst in lists:
        for item in lst:
            if item in freq:
                freq[item] += 1
            else:
                freq[item] = 1
    return freq",0.9252,-3.887405605819
97,2,"

def solve(lists):
    freq = {}
    for sublist in lists:
        for item in sublist:
            if item in freq:
                freq[item] += 1
            else:
                freq[item] = 1
    return freq",0.892,-5.713930783972099
97,3,"

def solve(list_of_lists):
    frequency_count = {}
    for lst in list_of_lists:
        for element in lst:
            if element in frequency_count:
                frequency_count[element] += 1
            else:
                frequency_count[element] = 1
    return frequency_count",0.8958,-6.384600953922398
97,4,"

def solve(lists):
    freq = {}
    for lst in lists:
        for item in lst:
            if item in freq:
                freq[item] += 1
            else:
                freq[item] = 1
    return freq",0.9252,-3.887405605819
97,5,"

def solve(list_of_lists):
    freq_count = {}
    for l in list_of_lists:
        for item in l:
            freq_count[item] = freq_count.get(item, 0) + 1
    return freq_count",0.8183,-9.628018938181
98,1,"

def solve(lst):
    product = 1
    for num in lst:
        product *= num
    return product / len(lst)",0.9353,-1.9393563957415
98,2,"

def solve(lst):
    result = 1
    for num in lst:
        result *= num
    result /= len(lst)
    return result",0.8958,-3.4112542760476994
98,3,"

def solve(nums):
    result = 1
    for num in nums:
        result *= num
    result /= len(nums)
    return result",0.8592,-4.7051734856756005
98,4,"

def solve(lst):
    product = 1
    for num in lst:
        product *= num
    return product / len(lst)",0.9353,-1.9393563957415
98,5,"

def solve(lst):
    result = 1
    for num in lst:
        result *= num
    return result / len(lst)",0.9156,-2.5565937192696992
99,1,"

def solve(decimal):
    binary = bin(decimal)
    return binary[2:]",0.7981,-3.83359885957
99,2,"

def solve(decimal):
    binary = """"
    while decimal > 0:
        binary = str(decimal % 2) + binary
        decimal = decimal // 2
    return binary",0.9391,-2.4510607444823
99,3,"

def solve(decimal):
    binary = """"
    while decimal > 0:
        binary = str(decimal % 2) + binary
        decimal = decimal // 2
    return binary",0.9391,-2.4510607444823
99,4,"

def solve(num):
    binary = """"
    while num > 0:
        binary = str(num % 2) + binary
        num = num // 2
    return binary",0.9107,-3.649916849011
99,5,"

def solve(decimal):
    binary = """"
    while decimal > 0:
        remainder = decimal % 2
        binary = str(remainder) + binary
        decimal = decimal // 2
    return binary",0.9162,-3.9399959227973
100,1,"

def solve(num):
    num += 1
    while True:
        if str(num) == str(num)[::-1]:
            return num
        else:
            num += 1",0.9122,-3.584683534562
100,2,"

def solve(num):
    num += 1
    while str(num) != str(num)[::-1]:
        num += 1
    return num",0.9404,-1.9664415080879991
100,3,"

def solve(num):
    num += 1
    while str(num) != str(num)[::-1]:
        num += 1
    return num",0.9404,-1.9664415080879991
100,4,"

def solve(number):
    number = str(number)
    length = len(number)
    mid = length // 2
    left = number[:mid]
    right = number[mid + length % 2:]

    if left[::-1] > right:
        return int(left + right[::-1])
    elif length % 2 == 0:
        return int(left + str(int(right) + 1) + left[::-1])
    else:
        middle = number[mid]
        if middle != '9':
            return int(left + str(int(middle) + 1) + left[::-1])
        else:
            return int(left + '0' + left[::-1])",0.8032,-30.679091308806505
100,5,"

def solve(num):
    num = num + 1
    while True:
        if str(num) == str(num)[::-1]:
            return num
        else:
            num = num + 1",0.8783,-5.582189747190501
101,1,"

def solve(arr, k):
    return arr[k-1]",0.9292,-1.0276655837380002
101,2,"

def solve(arr, k):
    arr.sort()
    return arr[k-1]",0.9182,-1.53651200585
101,3,"

def solve(arr, k):
    return arr[k-1]",0.9292,-1.0276655837380002
101,4,"

def solve(arr, k):
    return arr[k-1]",0.9292,-1.0276655837380002
101,5,"

def solve(arr, k):
    return arr[k-1]",0.9292,-1.0276655837380002
102,1,"

def solve(snake_case_string):
    split_string = snake_case_string.split('_')
    camel_case_string = split_string[0]
    for i in range(1, len(split_string)):
        camel_case_string += split_string[i].capitalize()
    return camel_case_string",0.8661,-8.0475129302889
102,2,"

def solve(snake_case_str):
    words = snake_case_str.split('_')
    camel_case_str = words[0]
    for word in words[1:]:
        camel_case_str += word.capitalize()
    return camel_case_str",0.8965,-5.137539760654999
102,3,"

def solve(snake_case):
    words = snake_case.split('_')
    camel_case = words[0]
    for word in words[1:]:
        camel_case += word.capitalize()
    return camel_case",0.9012,-4.370516766117801
102,4,"

def solve(snake_case_string):
    words = snake_case_string.split('_')
    camel_case_string = words[0]
    for word in words[1:]:
        camel_case_string += word.capitalize()
    return camel_case_string",0.9143,-4.212637753160402
102,5,"

def solve(s):
    words = s.split('_')
    camel_case = words[0]
    for word in words[1:]:
        camel_case += word.capitalize()
    return camel_case",0.8957,-4.296842385782499
103,1,"

def solve(n, m):
    if m > n:
        return 0
    if n == 0 and m == 0:
        return 1
    if n == 0 or m == 0:
        return 0
    return (n - m + 1) * solve(n - 1, m - 1) + (m + 1) * solve(n - 1, m)",0.8991,-9.577105637425005
103,2,"

def solve(n, m):
    if n == 0:
        return 1
    elif m == 0:
        return 0
    else:
        return (m + 1) * solve(n - 1, m) + (n - m) * solve(n - 1, m - 1)",0.9199,-5.764196795761001
103,3,"

def solve(n,m):
    if m == 0 or n == m:
        return 1
    elif m > n:
        return 0
    else:
        return (n-m+1)*solve(n-1, m-1) + (m+1)*solve(n-1, m)",0.829,-12.375122184586992
103,4,"

def solve(n, m):
    if n == 0:
        return 1
    if m == 0:
        return 0
    return (n - m) * solve(n - 1, m - 1) + (m + 1) * solve(n - 1, m)",0.9098,-6.237369700574002
103,5,"

def solve(n,m):
    if n == 0 or m == 0:
        return 1
    else:
        return (m+1)*solve(n-1,m) - (n-1)*solve(n-1,m-1)",0.8162,-10.765645083155002
104,1,"

def solve(lst):
    for sublist in lst:
        sublist.sort(key = lambda x: x.lower())
    return lst",0.8031,-5.482838391336003
104,2,"

def solve(lists):
    for sublist in lists:
        sublist.sort(key=lambda x: x.lower())
    return lists",0.8945,-2.7885481489229997
104,3,"

def solve(lists):
    for sublist in lists:
        sublist.sort(key=lambda x: x.lower())
    return lists",0.8945,-2.7885481489229997
104,4,"

def solve(lists):
    for sublist in lists:
        sublist.sort(key = lambda x: x.lower())
    return lists",0.8374,-4.613895461743001
104,5,"

def solve(list_of_lists):
    for sublist in list_of_lists:
        sublist.sort(key=lambda x: x.lower())
    return list_of_lists",0.9096,-2.8437552140365
105,1,"

def solve(lst):
    count = 0
    for i in lst:
        if i == True:
            count += 1
    return count",0.9302,-2.315731456604999
105,2,"

def solve(list):
    count = 0
    for value in list:
        if value == True:
            count += 1
    return count",0.7998,-7.148060842562002
105,3,"

def solve(lst):
    count = 0
    for i in lst:
        if i == True:
            count += 1
    return count",0.9302,-2.315731456604999
105,4,"

def solve(lst):
    count = 0
    for item in lst:
        if item == True:
            count += 1
    return count",0.9412,-1.9403292051034997
105,5,"

def solve(lst):
    count = 0
    for i in lst:
        if i is True:
            count += 1
    return count",0.8758,-4.2435095274157995
106,1,"

def solve(tuples, lst):
    new_tuples = []
    for tup in tuples:
        new_tuples.append(tup + tuple(lst))
    return new_tuples",0.8758,-4.375772316740999
106,2,"

def solve(list, tuples):
    for t in tuples:
        t += list
    return tuples",0.7105,-7.177360661840001
106,3,"

def solve(tuples, lst):
    for tup in tuples:
        tup = list(tup)
        tup.extend(lst)
        tup = tuple(tup)
        print(tup)
    return tuples",0.8159,-8.3420269743005
106,4,"

def solve(tuples, lst):
    for i in range(len(tuples)):
        tuples[i] = tuples[i] + (lst[i],)
    
    return tuples",0.8127,-7.257144785762
106,5,"

def solve(tuples, lst):
    new_tuples = []
    for tup in tuples:
        new_tuples.append(tup + (lst,))
    return new_tuples",0.8616,-4.914192059285999
107,1,"

def solve(start, end):
    count = 0
    for i in range(start, end+1):
        num = hex(i)
        if num.startswith(""0x""):
            count += 1
    return count",0.8676,-6.675957160587001
107,2,"

def solve(start, end):
    count = 0
    for num in range(start, end+1):
        if all(c in ""0123456789ABCDEF"" for c in hex(num)[2:]):
            count += 1
    return count",0.901,-5.731166844546999
107,3,"

def solve(start, end):
    count = 0
    for i in range(start, end+1):
        if type(i) == str:
            if i[:2] == '0x' or i[:2] == '0X':
                count += 1
        elif type(i) == int:
            if i >= 16:
                count += 1
    return count",0.8653,-12.004889089181004
107,4,"

def solve(start, end):
    count = 0
    for i in range(start, end+1):
        hex_num = hex(i)
        if hex_num[0:2] == ""0x"":
            count += 1
    return count",0.8874,-6.453450673899599
107,5,"

def solve(start, end):
    count = 0
    for num in range(start, end+1):
        if num >= 0 and num <= 9:
            count += 1
        elif num >= 10 and num <= 15:
            count += 1
        else:
            while num > 0:
                remainder = num % 16
                if remainder >= 0 and remainder <= 9:
                    count += 1
                elif remainder >= 10 and remainder <= 15:
                    count += 1
                num = num // 16
    return count",0.9169,-10.844453173659998
108,1,"

import heapq

def solve(*inputs):
    heap = []
    for input in inputs:
        heapq.heappush(heap, input)
    
    while heap:
        yield heapq.heappop(heap)",0.8317,-7.557860632985699
108,2,"

from heapq import merge

def solve(*args):
    return merge(*args)",0.8842,-2.092282645178
108,3,"

import heapq

def solve(*inputs):
    heap = []
    for input in inputs:
        for element in input:
            heapq.heappush(heap, element)
    while heap:
        yield heapq.heappop(heap)",0.8587,-7.005694828352299
108,4,"

def solve(*inputs):
    # Create a heap queue
    heap = []

    # For each input, add the first element to the heap
    for input in inputs:
        if len(input) > 0:
            heapq.heappush(heap, input[0])

    # While the heap is not empty
    while len(heap) > 0:
        # Pop the smallest element from the heap
        smallest = heapq.heappop(heap)
        # Yield the smallest element
        yield smallest
        # Find which input the smallest element came from
        for input in inputs:
            if len(input) > 0 and input[0] == smallest:
                # Remove the smallest element from the input
                input.pop(0)
                # If the input is not empty, add the next element to the heap
                if len(input) > 0:
                    heapq.heappush(heap, input[0])",0.8396,-33.385516373468064
108,5,"

from heapq import merge

def solve(*iterables):
    return merge(*iterables)",0.8215,-3.736871101601
109,1,"

def solve(str):
    count = 0
    for i in range(len(str)):
        if str[i] == '1':
            count += 1
    if count % 2 != 0:
        return count // 2 + 1
    else:
        return count // 2",0.8609,-9.434712437552
109,2,"

def solve(binary_string):
    count = 0
    for i in range(len(binary_string)):
        if int(binary_string[i]) == 1:
            count += 1
    if count % 2 == 0:
        return 0
    else:
        return count // 2 + 1",0.8882,-7.707778434024001
109,3,"

def solve(s):
    count = 0
    for i in range(len(s)):
        if s[i] == '1':
            count += 1
    if count % 2 == 0:
        return 0
    else:
        return count",0.9225,-4.434115667305999
109,4,"

def solve(s):
    count = 0
    for i in range(len(s)):
        if int(s[i], 2) % 2 != 0:
            count += 1
    return count",0.899,-4.685592983174999
109,5,"

def solve(binary_string):
    count = 0
    for i in range(len(binary_string)):
        if binary_string[i] == ""1"":
            count += 1
    return count % 2",0.8444,-7.273458454665999
110,1,"

def solve(start_range, end_range, lst):
    lst.sort()
    missing_ranges = []
    if len(lst) == 0:
        missing_ranges.append((start_range, end_range))
        return missing_ranges
    if lst[0] > start_range:
        missing_ranges.append((start_range, lst[0] - 1))
    for i in range(len(lst) - 1):
        if lst[i] + 1 < lst[i+1]:
            missing_ranges.append((lst[i]+1, lst[i+1]-1))
    if lst[-1] < end_range:
        missing_ranges.append((lst[-1]+1, end_range))
    return missing_ranges",0.8521,-22.724960116810003
110,2,"

def solve(lst, start, end):
    missing_ranges = []

    # add the start range if it is missing
    if lst[0] != start:
        missing_ranges.append((start, lst[0]-1))

    # loop through the list to find missing ranges
    for i in range(len(lst)-1):
        # check if the next element is not consecutive
        if lst[i+1] != lst[i]+1:
            missing_ranges.append((lst[i]+1, lst[i+1]-1))

    # add the end range if it is missing
    if lst[-1] != end:
        missing_ranges.append((lst[-1]+1, end))

    return missing_ranges",0.8352,-26.291407884621
110,3,"

def solve(start_range, end_range, given_list):
    missing_ranges = []
    # check if the first element in the given list is within the start and end range
    if given_list[0] > start_range:
        missing_ranges.append([start_range, given_list[0]-1])
    # iterate through the given list
    for i in range(len(given_list)-1):
        # check if the next element is not within the start and end range
        if given_list[i+1] > end_range:
            # add the missing range to the list
            missing_ranges.append([given_list[i]+1, end_range])
            break
        # check if there is a gap between the current and next element
        if given_list[i+1] - given_list[i] > 1:
            # add the missing range to the list
            missing_ranges.append([given_list[i]+1, given_list[i+1]-1])
    # check if the last element in the given list is within the start and end range
    if given_list[-1] < end_range:
        missing_ranges.append([given_list[-1]+1, end_range])
    return missing_ranges",0.8787,-31.9463576299214
110,4,"

def solve(start_range, end_range, lst):
    missing_ranges = []
    
    # Check if the start_range is greater than the first element in the list
    if start_range < lst[0]:
        # Add the missing range from start_range to the first element in the list
        missing_ranges.append((start_range, lst[0]-1))
    
    # Loop through the list to find the missing ranges
    for i in range(len(lst)-1):
        # Check if the current element is less than the next element
        if lst[i] < lst[i+1]:
            # Check if the difference between the two elements is greater than 1
            if lst[i+1] - lst[i] > 1:
                # Add the missing range between the two elements
                missing_ranges.append((lst[i]+1, lst[i+1]-1))
    
    # Check if the end_range is less than the last element in the list
    if end_range > lst[-1]:
        # Add the missing range from the last element to end_range
        missing_ranges.append((lst[-1]+1, end_range))
    
    return missing_ranges",0.8604,-36.23855274700829
110,5,"

def solve(lst, start_range, end_range):
    missing_ranges = []
    if lst[0] > start_range:
        missing_ranges.append((start_range, lst[0] - 1))
    for i in range(1, len(lst)):
        if lst[i] > lst[i-1] + 1:
            missing_ranges.append((lst[i-1] + 1, lst[i] - 1))
    if lst[-1] < end_range:
        missing_ranges.append((lst[-1] + 1, end_range))
    return missing_ranges",0.9054,-11.8313751531418
111,1,"

def solve(lists):
    common = set(lists[0])
    for lst in lists[1:]:
        common = common.intersection(set(lst))
    return list(common)",0.8463,-6.009723205707001
111,2,"

def solve(lists):
    result = []
    for i in range(len(lists[0])):
        for j in range(len(lists)):
            if lists[0][i] not in lists[j]:
                break
        else:
            result.append(lists[0][i])
    return result",0.8498,-10.092665230144004
111,3,"

def solve(nested_lists):
    common_elements = set(nested_lists[0])
    for i in range(1, len(nested_lists)):
        common_elements = common_elements.intersection(set(nested_lists[i]))
    return list(common_elements)",0.8989,-5.328919929921
111,4,"

def solve(nested_lists):
    common_elements = set(nested_lists[0])
    for lst in nested_lists[1:]:
        common_elements.intersection_update(lst)
    return list(common_elements)",0.8861,-4.838071620653
111,5,"

def solve(lists):
    common = lists[0]
    for lst in lists[1:]:
        common = [elem for elem in common if elem in lst]
    return common",0.803,-8.337139572271
112,1,"

def solve(radius, height):
    return 2 * (3.14159 * radius ** 2 + 3.14159 * radius * height)",0.7656,-8.813422758074001
112,2,"

def solve(radius, height):
    perimeter = 2 * 3.14159 * radius + 2 * 3.14159 * radius * height
    return perimeter",0.9092,-3.520489701769999
112,3,"

def solve(radius, height):
    perimeter = 2 * 3.14 * radius + 2 * 3.14 * radius * height
    return perimeter",0.9488,-1.838698931335
112,4,"

def solve(radius, height):
    return 2 * 3.14 * radius + 2 * 3.14 * radius * height",0.8991,-3.1916096827419995
112,5,"

def solve(radius, height):
    perimeter = 2 * (3.14 * radius + height)
    return perimeter",0.8601,-3.768699144573
113,1,"

def solve(s):
    try:
        int(s)
        return True
    except ValueError:
        return False",0.9411,-1.3950680599109992
113,2,"

def solve(s):
    try:
        int(s)
        return True
    except ValueError:
        return False",0.9411,-1.3950680599109992
113,3,"

def solve(s):
    try:
        int(s)
        return True
    except ValueError:
        return False",0.9411,-1.3950680599109992
113,4,"

def solve(s):
    try:
        int(s)
        return True
    except ValueError:
        return False",0.9411,-1.3950680599109992
113,5,"

def solve(string):
    try:
        int(string)
        return True
    except ValueError:
        return False",0.9442,-1.3201356041780004
114,1,"

def solve(tuple_list):
    freq_dict = {}
    for tuple in tuple_list:
        if tuple in freq_dict:
            freq_dict[tuple] += 1
        else:
            freq_dict[tuple] = 1
    return freq_dict",0.9425,-3.0782465221310007
114,2,"

def solve(tuple_list):
    freq_dict = {}
    for t in tuple_list:
        if t in freq_dict:
            freq_dict[t] += 1
        else:
            freq_dict[t] = 1
    return freq_dict",0.9379,-3.207753280327001
114,3,"

def solve(tuples):
    freq_dict = {}
    for t in tuples:
        if t in freq_dict:
            freq_dict[t] += 1
        else:
            freq_dict[t] = 1
    return freq_dict",0.9056,-4.859739500869001
114,4,"

def solve(tuple_list):
    freq_dict = {}
    for tup in tuple_list:
        if tup in freq_dict:
            freq_dict[tup] += 1
        else:
            freq_dict[tup] = 1
    return freq_dict",0.9562,-2.330216881014001
114,5,"

def solve(tuple_list):
    freq_dict = {}
    for t in tuple_list:
        freq_dict[t] = freq_dict.get(t, 0) + 1
    return freq_dict",0.8703,-5.55834760375
115,1,"

def solve(lst):
    for dic in lst:
        if bool(dic):
            return False
    return True",0.8445,-3.886098270859
115,2,"

def solve(list_of_dicts):
    for dictionary in list_of_dicts:
        if dictionary:
            return False
    return True",0.8724,-3.548583736431001
115,3,"

def solve(l):
    for d in l:
        if bool(d):
            return False
    return True",0.7384,-6.9743450328889995
115,4,"

def solve(lst):
    for d in lst:
        if len(d) > 0:
            return False
    return True",0.8586,-4.117427451236001
115,5,"

def solve(lst):
    for d in lst:
        if d:
            return False
    return True",0.8875,-2.6263955696939996
116,1,"

def solve(tuple):
    result = 0
    for i in range(len(tuple)):
        result = result * 10 + tuple[i]
    return result",0.8744,-4.430319384389
116,2,"

def solve(tup):
    result = 0
    for num in tup:
        result = result*10 + num
    return result",0.8739,-4.043468260564
116,3,"

def solve(tuple):
    result = 0
    for i in range(len(tuple)):
        result = result*10 + tuple[i]
    return result",0.8395,-5.600231670299
116,4,"

def solve(tup):
    result = 0
    for num in tup:
        result = result * 10 + num
    return result",0.9131,-2.818062751457001
116,5,"
def solve(tup):
    result = 0
    for num in tup:
        result = result * 10 + num
    return result",0.8258,-5.933389809988
117,1,"

def solve(lst):
    return [float(x) if isinstance(x, (int, float, str)) else x for x in lst]",0.8254,-5.563866765890001
117,2,"

def solve(lst):
    for i in range(len(lst)):
        try:
            lst[i] = float(lst[i])
        except:
            pass
    return lst",0.9468,-1.859181375302
117,3,"

def solve(lst):
    for i in range(len(lst)):
        try:
            lst[i] = float(lst[i])
        except:
            pass
    return lst",0.9468,-1.859181375302
117,4,"

def solve(lst):
    for i in range(len(lst)):
        try:
            lst[i] = float(lst[i])
        except:
            continue
    return lst",0.9442,-1.9535169534379997
117,5,"

def solve(lst):
    result = []
    for i in lst:
        try:
            result.append(float(i))
        except:
            result.append(i)
    return result",0.8731,-4.747930376808002
118,1,"
```
def solve(string):
    return list(string)
    
# Example input
print(solve(""Hello World""))
# Output: ['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']",0.75,-16.969950051626004
118,2,"

def solve(string):
    lst = []
    for char in string:
        lst.append(char)
    return lst",0.8607,-3.449075505977
118,3,"

def solve(string):
    return list(string)",0.9022,-1.02956076601
118,4,"

def solve(string):
    return list(string)",0.9022,-1.02956076601
118,5,"

def solve(string):
    return list(string)",0.9022,-1.02956076601
119,1,"

def solve(arr):
    i = 0
    while i < len(arr):
        if i == len(arr) - 1:
            return arr[i]
        if arr[i] != arr[i+1]:
            return arr[i]
        i += 2",0.8955,-6.067702203723997
119,2,"

def solve(arr):
    n = len(arr)
    if n == 1:
        return arr[0]
    left = 0
    right = n - 1
    while left <= right:
        mid = (left + right) // 2
        if mid == 0 and arr[mid] != arr[mid + 1]:
            return arr[mid]
        elif mid == n - 1 and arr[mid] != arr[mid - 1]:
            return arr[mid]
        elif arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:
            return arr[mid]
        elif mid % 2 == 0:
            if arr[mid] == arr[mid + 1]:
                left = mid + 2
            else:
                right = mid - 2
        else:
            if arr[mid] == arr[mid - 1]:
                left = mid + 1
            else:
                right = mid - 1",0.9331,-14.122061934447013
119,3,"

def solve(arr):
    for i in range(len(arr)):
        if i == 0 and arr[i] != arr[i+1]:
            return arr[i]
        elif i == len(arr) - 1 and arr[i] != arr[i-1]:
            return arr[i]
        elif arr[i] != arr[i-1] and arr[i] != arr[i+1]:
            return arr[i]",0.9453,-4.777424011580496
119,4,"

def solve(arr):
    for i in range(len(arr)):
        if i == 0 and arr[i+1] != arr[i]:
            return arr[i]
        elif i == len(arr)-1 and arr[i] != arr[i-1]:
            return arr[i]
        elif arr[i] != arr[i-1] and arr[i] != arr[i+1]:
            return arr[i]",0.905,-8.283327951353003
119,5,"

def solve(arr):
    n = len(arr)
    if n == 1:
        return arr[0]
    for i in range(0,n-1,2):
        if arr[i] != arr[i+1]:
            return arr[i]
    return arr[n-1]",0.8619,-8.917683491313001
120,1,"

def solve(lst):
    max_product = 0
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            product = lst[i][0] * lst[j][0]
            if product > max_product:
                max_product = product
    return max_product",0.9607,-2.5246354671875
120,2,"

def solve(lst):
    max_prod = 0
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            prod = lst[i][0] * lst[j][0]
            if prod > max_prod:
                max_prod = prod
    return max_prod",0.9425,-3.728657849109
120,3,"

def solve(lst):
    max_product = 0
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            product = lst[i][0] * lst[j][0] + lst[i][1] * lst[j][1]
            if product > max_product:
                max_product = product
    return max_product",0.9404,-4.612131744483501
120,4,"

def solve(lst):
    max_product = 0
    
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            product = lst[i][0] * lst[j][0]
            if product > max_product:
                max_product = product
                
    return max_product",0.8985,-6.743319213255
120,5,"

def solve(lst):
    max_product = float('-inf')
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            product = lst[i][0] * lst[j][0]
            if product > max_product:
                max_product = product
    return max_product",0.9502,-3.267934906215001
121,1,"

def solve(arr, target):
    for i in range(len(arr)-2):
        for j in range(i+1, len(arr)-1):
            for k in range(j+1, len(arr)):
                if arr[i] + arr[j] + arr[k] == target:
                    return [arr[i], arr[j], arr[k]]
    return ""No triplet found with given sum.""",0.9045,-8.132343626166998
121,2,"

def solve(arr):
    n = len(arr)
    # Sort the array in ascending order
    arr.sort()
    # Loop through the array from index 0 to n-2
    for i in range(n-2):
        # Initialize two pointers, one at i+1 and the other at n-1
        left = i+1
        right = n-1
        # Loop while left pointer is less than or equal to right pointer
        while left < right:
            # Calculate the sum of the triplet
            triplet_sum = arr[i] + arr[left] + arr[right]
            # If the sum is 0, then we have found the triplet
            if triplet_sum == 0:
                return [arr[i], arr[left], arr[right]]
            # If sum is less than 0, move the left pointer to the right
            elif triplet_sum < 0:
                left += 1
            # If sum is greater than 0, move the right pointer to the left
            else:
                right -= 1
    # If no triplet is found, return an empty list
    return []",0.8471,-39.31601015381751
121,3,"

def solve(arr, target):
    arr.sort()
    for i in range(len(arr)-2):
        left = i + 1
        right = len(arr) - 1
        
        while left < right:
            current_sum = arr[i] + arr[left] + arr[right]
            if current_sum == target:
                return (arr[i], arr[left], arr[right])
            elif current_sum < target:
                left += 1
            else:
                right -= 1
    return None",0.8881,-12.338567906478296
121,4,"

def solve(arr):
    # sort the array in ascending order
    arr.sort()
    # loop through the array
    for i in range(len(arr)-2):
        # initialize two pointers, one at i+1 and the other at the end of the array
        left = i+1
        right = len(arr)-1
        # loop while the two pointers do not overlap
        while left < right:
            # calculate the sum of the current triplet
            triplet_sum = arr[i] + arr[left] + arr[right]
            # if the sum is equal to the given value, return the triplet
            if triplet_sum == sum:
                return [arr[i], arr[left], arr[right]]
            # if the sum is less than the given value, move the left pointer to the right
            elif triplet_sum < sum:
                left += 1
            # if the sum is greater than the given value, move the right pointer to the left
            else:
                right -= 1
    # if no triplet is found, return an empty list
    return []",0.9032,-23.0125888265146
121,5,"

def solve(arr):
    n = len(arr)
    for i in range(n-2):
        for j in range(i+1, n-1):
            for k in range(j+1, n):
                if arr[i] + arr[j] + arr[k] == 0:
                    return [arr[i], arr[j], arr[k]]
    return None",0.9368,-4.965002106440698
122,1,"

def solve(n):
    smart_numbers = [1]
    index = 0
    while len(smart_numbers) < n:
        new_number = smart_numbers[index] * 2 + 1
        if new_number not in smart_numbers:
            smart_numbers.append(new_number)
        new_number = smart_numbers[index] * 3 + 1
        if new_number not in smart_numbers:
            smart_numbers.append(new_number)
        index += 1
    return smart_numbers[n-1]",0.8871,-12.4559257610869
122,2,"

def solve(n):
    smart_nums = [1]
    i = 2
    while len(smart_nums) < n:
        if i % 3 == 0 and i % 5 == 0:
            smart_nums.append(i)
        elif i % 3 == 0:
            if i % 5 not in smart_nums:
                smart_nums.append(i)
        elif i % 5 == 0:
            if i % 3 not in smart_nums:
                smart_nums.append(i)
        i += 1
    return smart_nums[-1]",0.8753,-15.8448274180205
122,3,"

def solve(n):
    i = 1
    count = 1
    while count < n:
        i += 1
        if i % 2 == 0 or i % 3 == 0 or i % 5 == 0:
            count += 1
    return i",0.9014,-6.645519975679999
122,4,"

def solve(n):

    smart_numbers = [1]
    current_number = 2
    
    while len(smart_numbers) < n:
        if current_number % 2 == 0:
            if current_number // 2 in smart_numbers:
                smart_numbers.append(current_number)
        else:
            if current_number // 3 in smart_numbers or current_number // 5 in smart_numbers:
                smart_numbers.append(current_number)
        current_number += 1
        
    return smart_numbers[-1]",0.836,-18.266039653887997
122,5,"

def solve(n):
    smart_nums = [1]
    i = 1
    while len(smart_nums) < n:
        if i % 2 == 0 or i % 3 == 0 or i % 5 == 0:
            smart_nums.append(i)
        i += 1
    return smart_nums[-1]",0.9129,-6.652138520627
123,1,"

def solve(n):
    def sum_divisors(x):
        sum = 0
        for i in range(1, x):
            if x % i == 0:
                sum += i
        return sum

    amicable_numbers = []
    for i in range(1, n+1):
        sum1 = sum_divisors(i)
        if sum1 != i and sum_divisors(sum1) == i:
            if i not in amicable_numbers:
                amicable_numbers.append(i)
            if sum1 not in amicable_numbers:
                amicable_numbers.append(sum1)

    return sum(amicable_numbers)",0.8858,-15.888655025053804
123,2,"

def solve(n):
    def d(x):
        sum = 0
        for i in range(1, x):
            if x % i == 0:
                sum += i
        return sum
    
    amicables = []
    for i in range(1, n+1):
        s1 = d(i)
        s2 = d(s1)
        if s2 == i and i != s1:
            amicables.append(i)
    
    return sum(amicables)",0.8316,-19.177217649365012
123,3,"

def solve(num):
    def divisors(n):
        divisors = []
        for i in range(1, n):
            if n % i == 0:
                divisors.append(i)
        return divisors
    
    amicable_sum = 0
    
    for i in range(1, num+1):
        sum1 = sum(divisors(i))
        sum2 = sum(divisors(sum1))
        
        if i == sum2 and i != sum1:
            amicable_sum += i
            
    return amicable_sum",0.8538,-17.392599500495002
123,4,"

def solve(n):
    amicable_sum = 0
    for num in range(1, n+1):
        div_sum = 0
        for i in range(1, num):
            if num % i == 0:
                div_sum += i
        if div_sum != num:
            for j in range(1, div_sum):
                if div_sum % j == 0:
                    if j == num:
                        amicable_sum += num
                        amicable_sum += div_sum
    return amicable_sum",0.8811,-14.050757710341998
123,5,"

def solve(n):
    def sum_divisors(num):
        sum = 0
        for i in range(1, num):
            if num % i == 0:
                sum += i
        return sum
    
    amicable_numbers = []
    
    for i in range(1, n+1):
        sum1 = sum_divisors(i)
        sum2 = sum_divisors(sum1)
        
        if sum2 == i and i != sum1:
            amicable_numbers.append(i)
            amicable_numbers.append(sum1)
    
    return sum(amicable_numbers)",0.8568,-18.704544215106505
124,1,"

def solve(z):
    import cmath
    angle = cmath.phase(z)
    return angle",0.856,-3.2647495126183994
124,2,"

def solve(z):
    import cmath
    angle = cmath.phase(z)
    return angle",0.856,-3.2647495126183994
124,3,"

def solve(z):
    import cmath
    return cmath.phase(z)",0.8341,-3.0839243798938005
124,4,"

def solve(z):
    import math
    angle = math.atan2(z.imag, z.real)
    return math.degrees(angle)",0.7813,-6.9111710838531
124,5,"

def solve(c):
    return cmath.phase(c)",0.7133,-4.0534500874
125,1,"

def solve(binary_string):
    max_diff = 0
    for i in range(len(binary_string)):
        count_zero = 0
        count_one = 0
        for j in range(i, len(binary_string)):
            if binary_string[j] == '0':
                count_zero += 1
            else:
                count_one += 1
            max_diff = max(max_diff, abs(count_zero - count_one))
    return max_diff",0.886,-11.254936823322405
125,2,"

def solve(s):
    max_diff = 0
    curr_diff = 0
    count_0 = 0
    count_1 = 0
    for i in range(len(s)):
        if s[i] == '0':
            count_0 += 1
        else:
            count_1 += 1
        curr_diff = count_0 - count_1
        if curr_diff > max_diff:
            max_diff = curr_diff
        if curr_diff < 0:
            count_0 = 0
            count_1 = 0
            curr_diff = 0
    return max_diff",0.9368,-8.677171798219401
125,3,"

def solve(string):
    max_diff = 0
    count_zero = 0
    count_one = 0
    for i in range(len(string)):
        if string[i] == '0':
            count_zero += 1
        else:
            count_one += 1
        diff = count_one - count_zero
        if diff > max_diff:
            max_diff = diff
        if diff < 0:
            count_zero = 0
            count_one = 0
    return max_diff",0.9083,-10.295365310661996
125,4,"

def solve(s):
    max_diff = 0
    for i in range(len(s)):
        count_0 = 0
        count_1 = 0
        for j in range(i, len(s)):
            if s[j] == '0':
                count_0 += 1
            else:
                count_1 += 1
            diff = count_0 - count_1
            if diff > max_diff:
                max_diff = diff
    return max_diff",0.9474,-5.515284483534302
125,5,"

def solve(binary_string):
    max_diff = 0
    for i in range(len(binary_string)):
        count_0 = 0
        count_1 = 0
        for j in range(i, len(binary_string)):
            if binary_string[j] == '0':
                count_0 += 1
            else:
                count_1 += 1
            if count_1 - count_0 > max_diff:
                max_diff = count_1 - count_0
    return max_diff",0.9272,-8.090303274805
126,1,"

def solve(num1, num2):
    divisors = []
    for i in range(1, min(num1, num2) + 1):
        if num1 % i == 0 and num2 % i == 0:
            divisors.append(i)
    return sum(divisors)",0.9502,-3.220912142762199
126,2,"

def solve(num1, num2):
    divisors = []
    for i in range(1, min(num1, num2) + 1):
        if num1 % i == 0 and num2 % i == 0:
            divisors.append(i)
    return sum(divisors)",0.9502,-3.220912142762199
126,3,"

def solve(num1, num2):
    divisors1 = [i for i in range(1, num1+1) if num1%i == 0]
    divisors2 = [i for i in range(1, num2+1) if num2%i == 0]
    common_divisors = set(divisors1) & set(divisors2)
    return sum(common_divisors)",0.9269,-6.527710679049497
126,4,"

def solve(num1, num2):
    divisors1 = []
    divisors2 = []
    common_divisors = []
    
    for i in range(1, num1+1):
        if num1 % i == 0:
            divisors1.append(i)
    
    for i in range(1, num2+1):
        if num2 % i == 0:
            divisors2.append(i)
    
    for divisor in divisors1:
        if divisor in divisors2:
            common_divisors.append(divisor)
    
    return sum(common_divisors)",0.939,-7.684272311815299
126,5,"

def solve(num1, num2):
    common_divisors = []
    for i in range(1, min(num1, num2)+1):
        if num1 % i == 0 and num2 % i == 0:
            common_divisors.append(i)
    return sum(common_divisors)",0.9596,-2.640440714595099
127,1,"

def solve(x, y):
    if y == 0:
        return 0
    elif y > 0:
        return x + solve(x, y-1)
    else:
        return -solve(x, -y)",0.9096,-4.644971401413999
127,2,"

def solve(x, y):
    result = 0
    if x == 0 or y == 0:
        return 0
    elif x < 0 and y < 0:
        x = abs(x)
        y = abs(y)
    elif x < 0 or y < 0:
        x = abs(x)
        y = abs(y)
        result = -1
    
    for _ in range(y):
        result += x
    
    return result",0.8579,-15.176547206811003
127,3,"

def solve(x, y):
    result = 0
    if y < 0:
        x = -x
        y = -y
    for i in range(y):
        result += x
    return result",0.8899,-5.484977164543999
127,4,"

def solve(x, y):
    result = 0
    if y < 0:
        x = -x
        y = -y
    while y > 0:
        if y % 2 == 1:
            result += x
        x = x << 1
        y = y >> 1
    return result",0.9094,-6.932314457432998
127,5,"

def solve(x, y):
    result = 0
    for i in range(abs(y)):
        result += abs(x)
    if x < 0 and y < 0:
        return result
    elif x < 0 or y < 0:
        return -result
    else:
        return result",0.9107,-6.176327214473001
128,1,"

def solve(words, n):
    shortlist = []
    for word in words:
        if len(word) > n:
            shortlist.append(word)
    return shortlist",0.9368,-2.3507889936593
128,2,"

def solve(words, n):
  shortlisted_words = []
  for word in words:
    if len(word) > n:
      shortlisted_words.append(word)
  return shortlisted_words",0.8754,-5.191633596601001
128,3,"
def solve(word_list, n):
    shortlisted_words = []
    for word in word_list:
        if len(word) > n:
            shortlisted_words.append(word)
    return shortlisted_words",0.8881,-4.8632895348086995
128,4,"

def solve(word_list, n):
    result = []
    for word in word_list:
        if len(word) > n:
            result.append(word)
    return result",0.9079,-3.3806356089123
128,5,"

def solve(words, n):
    return [word for word in words if len(word) > n]",0.9162,-1.925258725894
129,1,"

def solve(n):
    magic_square = [[0 for i in range(n)] for j in range(n)]

    i = n // 2
    j = n - 1

    num = 1

    while num <= (n * n):
        if i == -1 and j == n:
            j = n - 2
            i = 0
        else:
            if j == n:
                j = 0
            if i < 0:
                i = n - 1

        if magic_square[i][j]:
            j -= 1
            i += 1
            continue
        else:
            magic_square[i][j] = num
            num += 1

        j += 1
        i -= 1

    for i in range(n):
        for j in range(n):
            print(magic_square[i][j], end="" "")
        print()

solve(3)",0.9352,-13.121118509161992
129,2,"
def solve(n):
    magic_square = [[0 for i in range(n)] for j in range(n)]
    i = n//2
    j = n-1
    num = 1
    while(num <= n*n):
        if(i == -1 and j == n):
            j = n-2
            i = 0
        else:
            if(j == n):
                j = 0
            if(i < 0):
                i = n-1
        
        if(magic_square[i][j] != 0):
            j -= 1
            i += 1
            continue
        else:
            magic_square[i][j] = num
            num += 1
        i -= 1
        j += 1
    
    for i in range(n):
        for j in range(n):
            print(magic_square[i][j], end="" "")
        print()
    
solve(3)
solve(5)
solve(7)

#Output:
# 8 1 6
# 3 5 7
# 4 9 2

# 9 3 22 16 15
# 2 21 20 14 8
# 25 19 13 7 1
# 18 12 6 5 24
# 11 10 4 23 17

# 30 39 48 1 10 19 28
# 38 47 7 9 18 27 29
# 46 6 8 17 26 35 37
# 5 14 16 25 34 36 45
# 13 15 24 33 42 44 4
# 21 23 32 41 43 3 12
# 22 31 40 49 2 11 20",0.917,-34.82741360777025
129,3,"

def solve(n):
    magic_square = [[0 for i in range(n)] for j in range(n)]
    i = n//2
    j = n-1
    num = 1
    while num <= n**2:
        if i == -1 and j == n:
            j = n-2
            i = 0
        else:
            if j == n:
                j = 0
            if i < 0:
                i = n-1
        if magic_square[i][j] != 0:
            j -= 1
            i += 1
            continue
        else:
            magic_square[i][j] = num
            num += 1
        j += 1
        i -= 1
    return magic_square",0.9432,-9.704100883592796
129,4,"

def solve(n):
    # initialize empty matrix
    matrix = [[0 for i in range(n)] for j in range(n)]
    
    # set initial position
    i = 0
    j = n // 2
    
    # loop through numbers from 1 to n^2
    for num in range(1, n**2 + 1):
        # set current position to current number
        matrix[i][j] = num
        
        # move up and to the right
        i -= 1
        j += 1
        
        # handle edge cases
        if i < 0:
            i = n - 1
        if j == n:
            j = 0
            
        # check if next position is already filled
        if matrix[i][j] != 0:
            # move down one row
            i += 1
            # move left one column
            j -= 1
            
    # return the magic square
    return matrix",0.8205,-40.76452233911129
129,5,"

def solve(n):
    magic_square = [[0 for x in range(n)] for y in range(n)]
    i = n//2
    j = n-1

    num = 1
    while num <= (n*n):
        if i == -1 and j == n:
            j = n-2
            i = 0
        else:
            if j == n:
                j = 0
            if i < 0:
                i = n-1
        if magic_square[i][j]:
            j = j-2
            i = i+1
            continue
        else:
            magic_square[i][j] = num
            num = num+1
        j = j+1
        i = i-1
    for i in range(n):
        for j in range(n):
            print(magic_square[i][j], end="" "")
        print()
    return magic_square",0.9356,-13.0500052731559
130,1,"

def solve(lst):
    freq = {}
    for item in lst:
        if item in freq:
            freq[item] += 1
        else:
            freq[item] = 1
    max_freq = max(freq.values())
    for key, value in freq.items():
        if value == max_freq:
            return key",0.9409,-4.0837191320508
130,2,"

def solve(lst):
    freq_dict = {}
    for item in lst:
        if item in freq_dict:
            freq_dict[item] += 1
        else:
            freq_dict[item] = 1
    
    max_freq = 0
    max_item = None
    for key, value in freq_dict.items():
        if value > max_freq:
            max_freq = value
            max_item = key
    
    return max_item",0.9344,-6.109980991373399
130,3,"

def solve(lst):
    freq = {}
    for item in lst:
        if item in freq:
            freq[item] += 1
        else:
            freq[item] = 1
    max_freq = 0
    max_item = None
    for key, value in freq.items():
        if value > max_freq:
            max_freq = value
            max_item = key
    return max_item",0.9368,-5.546821343217898
130,4,"

def solve(lst):
    max_freq = 0
    max_item = None
    freq_dict = {}
    
    for item in lst:
        if item in freq_dict:
            freq_dict[item] += 1
        else:
            freq_dict[item] = 1
    
    for key, value in freq_dict.items():
        if value > max_freq:
            max_freq = value
            max_item = key
    
    return max_item",0.9176,-7.828878490974101
130,5,"

def solve(lst):
    counts = {}
    for item in lst:
        if item not in counts:
            counts[item] = 1
        else:
            counts[item] += 1
    
    max_count = 0
    max_item = None
    for item, count in counts.items():
        if count > max_count:
            max_count = count
            max_item = item
    
    return max_item",0.9009,-8.976395504479605
131,1,"

def solve(s):
    vowels = ['a', 'e', 'i', 'o', 'u']
    s = list(s)
    i = 0
    j = len(s) - 1
    while i < j:
        while s[i].lower() not in vowels and i < j:
            i += 1
        while s[j].lower() not in vowels and i < j:
            j -= 1
        s[i], s[j] = s[j], s[i]
        i += 1
        j -= 1
    return ''.join(s)",0.9394,-7.8081741536289
131,2,"

def solve(string):
    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
    string = list(string)
    i = 0
    j = len(string) - 1
    
    while i < j:
        if string[i] not in vowels:
            i += 1
        elif string[j] not in vowels:
            j -= 1
        else:
            string[i], string[j] = string[j], string[i]
            i += 1
            j -= 1
    
    return ''.join(string)",0.9336,-9.007146273579401
131,3,"

def solve(string):
    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
    string_list = list(string)
    left = 0
    right = len(string_list) - 1
    
    while left < right:
        if string_list[left] not in vowels:
            left += 1
        elif string_list[right] not in vowels:
            right -= 1
        else:
            string_list[left], string_list[right] = string_list[right], string_list[left]
            left += 1
            right -= 1
    
    return ''.join(string_list)",0.939,-8.815071690422199
131,4,"

def solve(s):
    vowels = 'aeiouAEIOU'
    v = [c for c in s if c in vowels]
    return ''.join([v.pop() if c in vowels else c for c in s])",0.7753,-12.21579780665
131,5,"

def solve(s):
    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
    s = list(s)
    i = 0
    j = len(s) - 1
    while i < j:
        if s[i] in vowels and s[j] in vowels:
            s[i], s[j] = s[j], s[i]
            i += 1
            j -= 1
        elif s[i] in vowels:
            j -= 1
        else:
            i += 1
    return ''.join(s)",0.9407,-8.246908592765296
132,1,"

def solve(tuple):
    string = ''
    for i in tuple:
        string += str(i)
    return string",0.7542,-6.770488258415002
132,2,"

def solve(tup):
    string = ''.join(str(i) for i in tup)
    return string",0.7947,-5.056105981088
132,3,"

def solve(tuple):
    string = ''.join(str(i) for i in tuple)
    return string",0.759,-5.7903112133970005
132,4,"

def solve(tup):
    result = """"
    for item in tup:
        result += str(item)
    return result",0.8066,-5.374408741088001
132,5,"

def solve(tup):
    res = ''
    for i in tup:
        res += str(i)
    return res",0.749,-7.225911117065
133,1,"

def solve(nums):
    return sum(filter(lambda x: x < 0, nums))",0.9314,-1.350443770801
133,2,"

def solve(numbers):
    return sum(filter(lambda x: x < 0, numbers))",0.9287,-1.405409158982
133,3,"

def solve(numbers):
    return sum(filter(lambda x: x < 0, numbers))",0.9287,-1.405409158982
133,4,"

def solve(nums):
    return sum(filter(lambda x: x < 0, nums))",0.9314,-1.350443770801
133,5,"

def solve(numbers):
    return sum(filter(lambda x: x < 0, numbers))",0.9287,-1.405409158982
134,1,"

def solve(arr, p):
    for i in range(p):
        arr[-1] = arr[-1] // 2
    if arr[-1] % 2 == 0:
        return ""even""
    else:
        return ""odd""",0.9151,-4.788117244469
134,2,"

def solve(arr, p):
    for i in range(p):
        arr[-1] += 1
    if arr[-1] % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.9327,-3.4121866959973004
134,3,"

def solve(arr, p):
    for i in range(p):
        last = arr[-1]
        if last % 2 == 0:
            arr.append(last // 2)
        else:
            arr.append(last * 3 + 1)

    if arr[-1] % 2 == 0:
        return ""even""
    else:
        return ""odd""",0.856,-12.281851439847005
134,4,"

def solve(arr, p):
    for i in range(p):
        arr[-1] = arr[-1] ** 2
    if arr[-1] % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.9157,-4.754958259369998
134,5,"

def solve(arr, p):
    for i in range(p):
        arr[-1] = arr[-1] * 2
    if arr[-1] % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.9294,-3.9561299515175
135,1,"

def solve(n):
    return n * (2 * n - 1)",0.9308,-1.21844037033
135,2,"

def solve(n):
    return n * (2*n - 1)",0.87,-2.228560266826
135,3,"

def solve(n):
    return n * (2 * n - 1)",0.9308,-1.21844037033
135,4,"

def solve(n):
    return n*(2*n-1)",0.9081,-1.35037422746
135,5,"

def solve(n):
    return n * (2*n - 1)",0.87,-2.228560266826
136,1,"

def solve(units):
    if units <= 50:
        bill = units * 0.50
    elif units <= 100:
        bill = 25 + (units - 50) * 0.75
    elif units <= 200:
        bill = 75 + (units - 100) * 1.20
    elif units <= 300:
        bill = 195 + (units - 200) * 1.50
    else:
        bill = 375 + (units - 300) * 1.80
    return bill",0.9145,-10.8149378914723
136,2,"

def solve(units):
    if units <= 0:
        return ""Invalid input. Units should be a positive integer.""
    elif units <= 50:
        return units * 2.60
    elif units <= 100:
        return 50 * 2.60 + (units - 50) * 3.25
    elif units <= 200:
        return 50 * 2.60 + 50 * 3.25 + (units - 100) * 5.26
    elif units <= 300:
        return 50 * 2.60 + 50 * 3.25 + 100 * 5.26 + (units - 200) * 8.45
    else:
        return 50 * 2.60 + 50 * 3.25 + 100 * 5.26 + 100 * 8.45 + (units - 300) * 11.50",0.8901,-23.27420267403171
136,3,"

def solve(units):
    if units <= 50:
        bill = units * 0.50
    elif units <= 150:
        bill = (50 * 0.50) + ((units - 50) * 0.75)
    elif units <= 250:
        bill = (50 * 0.50) + (100 * 0.75) + ((units - 150) * 1.20)
    else:
        bill = (50 * 0.50) + (100 * 0.75) + (100 * 1.20) + ((units - 250) * 1.50)
    
    return bill",0.9577,-6.143767396323302
136,4,"

def solve(units):
    if units <= 50:
        return units * 0.50
    elif units <= 150:
        return (units - 50) * 0.75 + 25
    elif units <= 250:
        return (units - 150) * 1.20 + 100
    else:
        return (units - 250) * 1.50 + 220",0.933,-6.0984476054530035
136,5,"

def solve(units):
    if units <= 50:
        bill = units * 0.50
    elif units <= 150:
        bill = 50 * 0.50 + (units - 50) * 0.75
    elif units <= 250:
        bill = 50 * 0.50 + 100 * 0.75 + (units - 150) * 1.20
    else:
        bill = 50 * 0.50 + 100 * 0.75 + 100 * 1.20 + (units - 250) * 1.50
    return bill",0.9656,-4.724694650124403
137,1,"

def solve(arr):
    count = 0
    for num in arr:
        if num == 0:
            count += 1
    return count / len(arr)",0.9509,-1.8630463545207
137,2,"

def solve(arr):
    count = 0
    for num in arr:
        if num == 0:
            count += 1
    return count/len(arr)",0.9509,-1.8626794607307
137,3,"

def solve(arr):
    count = 0
    for num in arr:
        if num == 0:
            count += 1
    return count/len(arr)",0.9509,-1.8626794607307
137,4,"

def solve(arr):
    count = 0
    for num in arr:
        if num == 0:
            count += 1
    return count / len(arr)",0.9509,-1.8630463545207
137,5,"

def solve(arr):
    count = 0
    for num in arr:
        if num == 0:
            count += 1
    return count/len(arr)",0.9509,-1.8626794607307
138,1,"

def solve(n):
    if n == 0:
        return False
    while n > 0:
        if n % 2 == 0:
            n = n // 2
        elif n == 1:
            return True
        else:
            return False
    return False",0.9147,-5.526916809224002
138,2,"

def solve(n):
    if n == 0:
        return False
    while n % 2 == 0:
        n = n // 2
    if n == 1:
        return True
    else:
        return False",0.9079,-4.9298225757889975
138,3,"

def solve(n):
    if n == 0:
        return False
    while n > 0:
        if n % 2 == 0:
            n = n // 2
        else:
            n -= 1
    return n == 0",0.86,-8.443554238774002
138,4,"

def solve(num):
    if num == 0:
        return False
    while num > 0:
        if num % 2 == 0:
            num = num // 2
        else:
            if num == 1:
                return True
            else:
                return False
    return False",0.9,-6.8516136536630015
138,5,"

def solve(n):
    if n < 1:
        return False
    while n % 2 == 0:
        n = n // 2
    if n == 1:
        return True
    else:
        return False",0.8503,-8.271179339358
139,1,"

def solve(radius):
    circumference = 2 * 3.14159 * radius
    return circumference",0.927,-1.666972329506
139,2,"

def solve(radius):
    return 2 * math.pi * radius",0.8173,-2.824967374179999
139,3,"

def solve(radius):
    circumference = 2 * 3.14159 * radius
    return circumference",0.927,-1.666972329506
139,4,"

def solve(radius):
    circumference = 2 * 3.14159 * radius
    return circumference",0.927,-1.666972329506
139,5,"

def solve(r):
    return 2 * 3.14159 * r",0.7774,-4.279850296724
140,1,"
def solve(tup):
    # create an empty list to store the singly occurring elements
    singles = []
    # loop through the elements in the tuple list
    for elem in tup:
        # check if the element occurs only once in the tuple list
        if tup.count(elem) == 1:
            # if so, append it to the singles list
            singles.append(elem)
    # return the singles list
    return singles",0.7993,-20.38892284993949
140,2,"

def solve(lst):
    count_dict = {}

    for tup in lst:
        for item in tup:
            if item in count_dict:
                count_dict[item] += 1
            else:
                count_dict[item] = 1

    result = []

    for key, value in count_dict.items():
        if value == 1:
            result.append(key)

    return result",0.8132,-16.335018025252
140,3,"

def solve(tuple_list):
    count_dict = {}
    for tup in tuple_list:
        for elem in tup:
            if elem in count_dict:
                count_dict[elem] += 1
            else:
                count_dict[elem] = 1
    
    single_elems = []
    for key, value in count_dict.items():
        if value == 1:
            single_elems.append(key)
    
    return single_elems",0.8941,-9.741234923031
140,4,"

def solve(tuples):
    singles = []
    for tup in tuples:
        if tuples.count(tup) == 1:
            singles.append(tup)
    return singles",0.8613,-5.376804102877
140,5,"

def solve(tuple_list):
    # create a dictionary to store the count of each element in the tuple list
    count_dict = {}
    # loop through the tuple list
    for tuple in tuple_list:
        # loop through each element in the tuple
        for element in tuple:
            # if the element is already in the dictionary, increase its count by 1
            if element in count_dict:
                count_dict[element] += 1
            # if the element is not in the dictionary, add it with a count of 1
            else:
                count_dict[element] = 1
    # create a list to store the elements that occur singly
    single_elements = []
    # loop through the dictionary
    for key, value in count_dict.items():
        # if the count of the element is 1, add it to the single_elements list
        if value == 1:
            single_elements.append(key)
    # return the single_elements list
    return single_elements",0.9155,-18.09463908985731
141,1,"

def solve(lst):

    for i in range(len(lst)-1,0,-1):
        max_idx = lst.index(max(lst[:i+1]))
        lst[:max_idx+1] = lst[:max_idx+1][::-1]
        lst[:i+1] = lst[:i+1][::-1]
        
    return lst",0.8636,-10.5587141834634
141,2,"

def solve(arr):
    n = len(arr)
    for i in range(n-1,0,-1):
        max_idx = arr.index(max(arr[:i+1]))
        if max_idx != i:
            arr[:max_idx+1] = arr[:max_idx+1][::-1]
            arr[:i+1] = arr[:i+1][::-1]
    return arr",0.9261,-6.3753972071710034
141,3,"

def solve(arr):
    n = len(arr)
    curr = n
    while curr > 1:
        mi = arr.index(max(arr[:curr]))
        arr[:mi+1] = arr[:mi+1][::-1]
        arr[:curr] = arr[:curr][::-1]
        curr -= 1
    return arr",0.8524,-11.495358030977696
141,4,"

def solve(lst):
    n = len(lst)
    for i in range(n-1, 0, -1):
        max_idx = 0
        for j in range(1, i+1):
            if lst[j] > lst[max_idx]:
                max_idx = j
        lst[:max_idx+1] = lst[:max_idx+1][::-1]
        lst[:i+1] = lst[:i+1][::-1]
    return lst",0.9528,-4.835623106355598
141,5,"

def solve(lst):
    n = len(lst)
    for i in range(n-1, 0, -1):
        max_idx = 0
        for j in range(1, i+1):
            if lst[j] > lst[max_idx]:
                max_idx = j
        flip(lst, max_idx)
        flip(lst, i)
    return lst

def flip(lst, idx):
    start = 0
    while start < idx:
        lst[start], lst[idx] = lst[idx], lst[start]
        start += 1
        idx -= 1",0.9119,-11.154126257919302
142,1,"

def solve(list1, list2, list3):
    count = 0
    for i in range(len(list1)):
        for j in range(len(list2)):
            if list1[i] == list2[j]:
                for k in range(len(list3)):
                    if list1[i] == list3[k]:
                        count += 1
    return count",0.9534,-3.6275208151293015
142,2,"

def solve(list1, list2, list3):
    count = 0
    for i in range(len(list1)):
        for j in range(len(list2)):
            for k in range(len(list3)):
                if list1[i] == list2[j] and list2[j] == list3[k]:
                    count += 1
    return count",0.9693,-2.3415040357413
142,3,"

def solve(list1, list2, list3):
    count = 0
    for i in range(len(list1)):
        for j in range(len(list2)):
            for k in range(len(list3)):
                if list1[i] == list2[j] == list3[k]:
                    count += 1
    return count",0.9658,-2.4391444454163
142,4,"

def solve(list1, list2, list3):
    count = 0
    for i in list1:
        for j in list2:
            if i == j:
                for k in list3:
                    if i == k:
                        count += 1
    return count",0.9307,-4.309999112837301
142,5,"

def solve(list1, list2, list3):
    count = 0
    for i in range(len(list1)):
        pair = (list1[i], list2[i], list3[i])
        if pair[0] == pair[1] and pair[1] == pair[2]:
            count += 1
    return count",0.9102,-6.8700139023723015
143,1,"

def solve(tuple):
    count = 0
    for element in tuple:
        if type(element) == list:
            count += 1
    return count",0.9056,-3.3703235081760003
143,2,"

def solve(tup):
    count = 0
    for item in tup:
        if type(item) == list:
            count += 1
    return count",0.9442,-2.007971254679
143,3,"

def solve(tup):
    count = 0
    for item in tup:
        if type(item) == list:
            count += 1
    return count",0.9442,-2.007971254679
143,4,"

def solve(t):
    count = 0
    for item in t:
        if isinstance(item, list):
            count += 1
    return count",0.8745,-4.423943105722
143,5,"

def solve(tuple):
    count = 0
    for item in tuple:
        if isinstance(item, list):
            count += 1
    return count",0.9062,-3.2507693731464995
144,1,"

def solve(arr):
    total = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            total += abs(arr[i] - arr[j])
    return total ",0.878,-5.985279699638999
144,2,"

def solve(arr):
    total = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            total += abs(arr[i] - arr[j])
    return total",0.9517,-2.229407899638999
144,3,"

def solve(arr):
    sum = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            sum += abs(arr[i] - arr[j])
    return sum",0.9646,-1.6229489821669998
144,4,"

def solve(arr):
    sum = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            sum += abs(arr[i] - arr[j])
    return sum",0.9646,-1.6229489821669998
144,5,"

def solve(arr):
    n = len(arr)
    sum = 0
    for i in range(n):
        for j in range(i+1, n):
            sum += abs(arr[i] - arr[j])
    return sum",0.9182,-4.1821943251225
145,1,"

def solve(arr):
    if len(arr) < 2:
        return None
    max_diff = arr[1] - arr[0]
    min_element = arr[0]
    for i in range(1, len(arr)):
        if arr[i] - min_element > max_diff:
            max_diff = arr[i] - min_element
        if arr[i] < min_element:
            min_element = arr[i]
    return max_diff",0.9246,-7.288811697309397
145,2,"

def solve(arr):
    max_diff = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if abs(arr[i]-arr[j]) > max_diff:
                max_diff = abs(arr[i]-arr[j])
    return max_diff",0.9366,-3.9308418245783
145,3,"

def solve(arr):
    max_diff = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            diff = abs(arr[i] - arr[j])
            if diff > max_diff:
                max_diff = diff
    return max_diff",0.9739,-1.5864528024133002
145,4,"

def solve(arr):
    max_diff = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[j] - arr[i] > max_diff:
                max_diff = arr[j] - arr[i]
    return max_diff",0.953,-2.8873115779483003
145,5,"

def solve(arr):
    max_diff = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            diff = abs(arr[i] - arr[j])
            if diff > max_diff:
                max_diff = diff
    return max_diff",0.9739,-1.5864528024133002
146,1,"

def solve(string):
    total = 0
    for char in string:
        total += ord(char)
    return total",0.9563,-1.161550155109
146,2,"

def solve(string):
    total = 0
    for char in string:
        total += ord(char)
    return total",0.9563,-1.161550155109
146,3,"

def solve(string):
    total = 0
    for char in string:
        total += ord(char)
    return total",0.9563,-1.161550155109
146,4,"

def solve(string):
    total = 0
    for char in string:
        total += ord(char)
    return total",0.9563,-1.161550155109
146,5,"

def solve(string):
    total = 0
    for char in string:
        total += ord(char)
    return total",0.9563,-1.161550155109
147,1,"

def solve(triangle):
    for i in range(len(triangle)-2, -1, -1):
        for j in range(len(triangle[i])):
            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])
    return triangle[0][0]",0.9693,-2.0613274989732995
147,2,"

def solve(triangle):
    for i in range(len(triangle)-2, -1, -1):
        for j in range(i+1):
            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])
    return triangle[0][0]",0.9613,-2.568081227924699
147,3,"

def solve(triangle):
    for i in range(len(triangle)-2, -1, -1):
        for j in range(len(triangle[i])):
            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])
    return triangle[0][0]",0.9693,-2.0613274989732995
147,4,"

def solve(triangle):
    for i in range(len(triangle)-2, -1, -1):
        for j in range(len(triangle[i])):
            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])
    return triangle[0][0]",0.9693,-2.0613274989732995
147,5,"

def solve(triangle):
    if len(triangle) == 1:
        return triangle[0][0]
    
    # Loop through the triangle from second to last row
    for i in range(len(triangle)-2, -1, -1):
        # Update each element in the current row with the maximum path sum
        for j in range(len(triangle[i])):
            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])
    
    # The maximum path sum will be in the first element of the first row
    return triangle[0][0]",0.8055,-28.112241437617772
148,1,"

def solve(num):
    digits = [int(d) for d in str(num)]
    digits.sort(reverse=True)
    first_part = []
    second_part = []
    for d in digits:
        if sum(first_part) < sum(second_part):
            first_part.append(d)
        else:
            second_part.append(d)
    return int("""".join([str(d) for d in first_part])), int("""".join([str(d) for d in second_part]))",0.8796,-12.315374127068102
148,2,"

def solve(n):
    digits = [int(d) for d in str(n)]
    digits.sort(reverse=True)
    first_part = int("""".join(str(d) for d in digits[::2]))
    second_part = int("""".join(str(d) for d in digits[1::2]))
    return first_part + second_part",0.8694,-9.798830689301
148,3,"

def solve(n):
    digits = [int(d) for d in str(n)]
    digits.sort(reverse=True)
    first_part = int("""".join(str(d) for d in digits[::2]))
    second_part = int("""".join(str(d) for d in digits[1::2]))
    return first_part + second_part",0.8694,-9.798830689301
148,4,"

def solve(num):
    num = str(num)
    digits = [int(d) for d in num]
    digits.sort()
    first_part = int("""".join([str(d) for d in digits[-2:]]))
    second_part = int("""".join([str(d) for d in digits[:-2]]))
    return first_part + second_part",0.7926,-17.428822595091003
148,5,"

def solve(num):
    num_str = str(num)
    mid = len(num_str) // 2
    left = int(num_str[:mid])
    right = int(num_str[mid:])
    return left + right",0.8403,-7.829056170487897
149,1,"

def solve(arr):
    longest = []
    for i in range(len(arr)):
        subseq = [arr[i]]
        for j in range(i+1, len(arr)):
            if abs(arr[j]-subseq[-1]) == 1:
                subseq.append(arr[j])
            else:
                break
        if len(subseq) > len(longest):
            longest = subseq
    return longest",0.9048,-8.506992644071195
149,2,"

def solve(arr):
    max_len = 0
    curr_len = 1

    for i in range(1, len(arr)):
        if abs(arr[i] - arr[i-1]) == 1:
            curr_len += 1
        else:
            max_len = max(max_len, curr_len)
            curr_len = 1

    max_len = max(max_len, curr_len)

    return max_len",0.8831,-11.063342499508003
149,3,"

def solve(arr):
    longest = []
    current = []
    prev = None
    
    for num in arr:
        if prev is None or abs(num - prev) == 1:
            current.append(num)
        else:
            if len(current) > len(longest):
                longest = current
            current = [num]
        prev = num
    
    if len(current) > len(longest):
        longest = current
    
    return longest",0.8591,-13.824064551573992
149,4,"

def solve(nums):
    l = len(nums)
    if l == 0:
        return 0
    dp = [1] * l
    for i in range(1, l):
        for j in range(i):
            if nums[i] == nums[j] + 1 or nums[i] == nums[j] - 1:
                dp[i] = max(dp[i], dp[j] + 1)

    return max(dp)",0.8161,-19.107870361485997
149,5,"

def solve(arr):
    dp = [1] * len(arr)
    for i in range(len(arr)):
        for j in range(i):
            if abs(arr[i] - arr[j]) == 1:
                dp[i] = max(dp[i], dp[j] + 1)
    return max(dp)",0.9211,-5.344025111555001
150,1,"

def solve(num):
    if num == 0:
        return True
    elif num % 2 == 0:
        return False
    else:
        return True",0.8265,-6.860767803413001
150,2,"

def solve(n):
    if n == 0:
        return True
    elif n == 1:
        return False
    else:
        i = 1
        while True:
            if n == i:
                return True
            elif n == -i:
                return True
            else:
                i += 1",0.7879,-16.450711355503
150,3,"

def solve(number):
    i = 1
    while True:
        if number == i:
            return True
        elif number < i:
            return False
        else:
            i *= 2",0.8691,-6.033004620153998
150,4,"

def solve(number):
    i = 1
    while True:
        if number == i:
            return True
        else:
            i += 1
    return False",0.7871,-8.85751446733
150,5,"
def solve(n):
    i = 1
    while True:
        if i == n:
            return True
        i += 1",0.7722,-7.754662195130001
151,1,"

def solve(a, b):
    for i in range(2, min(a, b) + 1):
        if a % i == 0 and b % i == 0:
            return False
    return True",0.9344,-3.1872919244694997
151,2,"

def solve(num1, num2):
    for i in range(2, min(num1, num2) + 1):
        if num1 % i == 0 and num2 % i == 0:
            return False
    return True",0.9551,-2.4368652532697004
151,3,"

def solve(num1, num2):
    if num1 == 0 or num2 == 0:
        return False
    while num1 != num2:
        if num1 > num2:
            num1 = num1 - num2
        else:
            num2 = num2 - num1
    if num1 == 1:
        return True
    else:
        return False",0.9333,-5.797729875809
151,4,"

def solve(number1, number2):
    # find the smaller number
    if number1 < number2:
        smaller = number1
    else:
        smaller = number2
    
    # loop through the numbers from 2 to smaller
    for i in range(2, smaller+1):
        # check if both numbers are divisible by i
        if number1 % i == 0 and number2 % i == 0:
            # if they are, return False (not co-prime)
            return False
    # if the loop finishes without returning False, return True (co-prime)
    return True",0.8087,-27.600931811672517
151,5,"

def solve(num1, num2):
    for i in range(2, min(num1, num2) + 1):
        if num1 % i == 0 and num2 % i == 0:
            return False
    return True",0.9551,-2.4368652532697004
152,1,"

def solve(arr):
    if len(arr) <= 1:
        return arr
    
    mid = len(arr) // 2
    left = arr[:mid]
    right = arr[mid:]
    
    left = solve(left)
    right = solve(right)
    
    return merge(left, right)
    
def merge(left, right):
    result = []
    i = 0
    j = 0
    
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    
    while i < len(left):
        result.append(left[i])
        i += 1
        
    while j < len(right):
        result.append(right[j])
        j += 1
        
    return result",0.9478,-9.384627566782598
152,2,"

def solve(arr):
    if len(arr) <= 1:
        return arr
    
    mid = len(arr) // 2
    left = arr[:mid]
    right = arr[mid:]
    
    left = solve(left)
    right = solve(right)
    
    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0
    
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
            
    result.extend(left[i:])
    result.extend(right[j:])
    
    return result",0.9348,-9.775618490069595
152,3,"

def merge_sort(array):
    if len(array) > 1:
        mid = len(array) // 2
        left = array[:mid]
        right = array[mid:]

        merge_sort(left)
        merge_sort(right)

        i = j = k = 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                array[k] = left[i]
                i += 1
            else:
                array[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            array[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            array[k] = right[j]
            j += 1
            k += 1

    return array

def solve(array):
    return merge_sort(array)",0.949,-9.680595238401494
152,4,"

def solve(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]

        solve(left)
        solve(right)

        i = j = k = 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                arr[k] = left[i]
                i += 1
            else:
                arr[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            arr[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            arr[k] = right[j]
            j += 1
            k += 1

    return arr ",0.9581,-7.370414378507599
152,5,"

def solve(arr):
    
    if len(arr) > 1:
        
        mid = len(arr) // 2
        
        left = arr[:mid]
        right = arr[mid:]
        
        solve(left)
        solve(right)
        
        i = j = k = 0
        
        while i < len(left) and j < len(right):
            
            if left[i] < right[j]:
                
                arr[k] = left[i]
                i += 1
                
            else:
                
                arr[k] = right[j]
                j += 1
                
            k += 1
            
        while i < len(left):
            
            arr[k] = left[i]
            i += 1
            k += 1
            
        while j < len(right):
            
            arr[k] = right[j]
            j += 1
            k += 1
            
    return arr",0.9353,-12.043259779910896
153,1,"

def solve(a, b, c):
    x = -b / (2 * a)
    y = (a * x**2) + (b * x) + c
    return (x, y)",0.9256,-3.5558045744589997
153,2,"

def solve(a, b, c):
    x = -b / (2 * a)
    y = a * x ** 2 + b * x + c
    return (x, y)",0.9293,-3.1530535926490018
153,3,"

def solve(a, b, c):
    x = -b / (2 * a)
    y = a * x ** 2 + b * x + c
    return (x, y)",0.9293,-3.1530535926490018
153,4,"

def solve(a, b, c):
    x = -b / (2 * a)
    y = a * (x ** 2) + b * x + c
    return (x, y)",0.9124,-4.124310910207001
153,5,"

def solve(a, b, c):
    x = -b / (2 * a)
    y = a * x ** 2 + b * x + c
    return (x, y)",0.9293,-3.1530535926490018
154,1,"

def solve(two_d_list, elements):
    result = []
    for row in two_d_list:
        for element in elements:
            result.append(row[element])
    return result",0.8463,-6.172515895227998
154,2,"

def solve(lst, indices):
    result = []
    for i in indices:
        for j in range(len(lst)):
            result.append(lst[j][i])
    return result",0.8735,-4.869875318364999
154,3,"

def solve(list, elements):
    result = []
    for i in range(len(list)):
        for j in range(len(list[i])):
            if list[i][j] in elements:
                result.append(list[i][j])
    return result",0.873,-6.6527513766710005
154,4,"

def solve(lst, indices):
    result = []
    for i in range(len(lst)):
        for j in range(len(lst[i])):
            if (i,j) in indices:
                result.append(lst[i][j])
    return result",0.905,-4.792513785238703
154,5,"

def solve(two_dim_list, indices):
    result = []
    for row in two_dim_list:
        for i in indices:
            result.append(row[i])
    return result",0.8333,-6.745384679992998
155,1,"

def solve(n):
    mask = 0b0101010101010101
    return n ^ mask",0.7702,-6.006166280759999
155,2,"

def solve(num):
    result = 0
    pos = 0
    while(num>0):
        if(num & 1):
            result ^= (1<<pos)
        num = num >>1
        pos += 2
    return result",0.6331,-24.68280185434
155,3,"

def solve(num):
  mask = 0b10101010101010101010101010101010 #create mask with all even bits set to 1
  return num ^ mask #use bitwise XOR to toggle all even bits",0.706,-16.713541164818
155,4,"

def solve(num):
    result = 0
    i = 0
    while num:
        bit = num & 1
        if bit == 0 and i % 2 == 1:
            bit = 1
        elif bit == 1 and i % 2 == 0:
            bit = 0
        result |= bit << i
        i += 1
        num >>= 1
    return result",0.8317,-17.141477490221998
155,5,"

def solve(n):
    mask = 0xAAAAAAAA
    return (n ^ mask)",0.7319,-6.241333414809999
156,1,"

def solve(tuple_str):
    tuple_int = tuple(map(int, tuple_str))
    return tuple_int",0.8902,-2.443267671238
156,2,"

def solve(tuple_str):
    tuple_int = tuple(int(val) for val in tuple_str)
    return tuple_int",0.8322,-4.409340222663
156,3,"

def solve(tuple_of_strings):
    tuple_of_integers = tuple(map(int, tuple_of_strings))
    return tuple_of_integers",0.873,-3.667712966531999
156,4,"

def solve(tup):
    return tuple(int(val) for val in tup)",0.7883,-4.043322029258
156,5,"

def solve(tuple_str):
    tuple_int = tuple(int(i) for i in tuple_str)
    return tuple_int",0.8703,-3.334641578234
157,1,"

def solve(lst):
    result = []
    count = 1
    for i in range(len(lst)):
        if i == len(lst)-1:
            result.append((lst[i], count))
            break
        if lst[i] == lst[i+1]:
            count += 1
        else:
            result.append((lst[i], count))
            count = 1
    return result",0.8984,-8.7869207355636
157,2,"

def solve(lst):
    result = []
    for i in range(len(lst)):
        if i == 0:
            result.append(lst[i])
            result.append(1)
        else:
            if lst[i] == lst[i-1]:
                result[-1] += 1
            else:
                result.append(lst[i])
                result.append(1)
    return result",0.923,-6.171668632663696
157,3,"

def solve(lst):
    result = []
    count = 1
    for i in range(len(lst)-1):
        if lst[i] == lst[i+1]:
            count += 1
        else:
            result.append((count, lst[i]))
            count = 1
    result.append((count, lst[-1]))
    return result",0.9345,-4.948886320784899
157,4,"

def solve(lst):
    result = []
    count = 1
    for i in range(len(lst)-1):
        if lst[i] == lst[i+1]:
            count += 1
        else:
            result.append((lst[i], count))
            count = 1
    result.append((lst[-1], count))
    return result",0.9375,-4.713067523581401
157,5,"

def solve(lst):
    result = []
    count = 1
    for i in range(len(lst)-1):
        if lst[i] == lst[i+1]:
            count += 1
        else:
            result.append((lst[i], count))
            count = 1
    result.append((lst[-1], count))
    return result",0.9375,-4.713067523581401
158,1,"

def solve(elements):
    n = len(elements)
    operations = 0
    target = sum(elements) // n
    for num in elements:
        operations += abs(num - target)
    return operations",0.6543,-18.237365570924993
158,2,"

def solve(k, nums):
    nums.sort()
    count = 0
    while nums[-1] != nums[0]:
        nums[-1] -= 1
        nums.sort()
        count += 1
        if count == k:
            return count
    return count",0.8054,-12.984092002313004
158,3,"

def solve(nums, k):
    min_val = min(nums)
    max_val = max(nums)
    count = 0
    while min_val != max_val:
        count += 1
        for i in range(len(nums)):
            if nums[i] == max_val:
                nums[i] = min_val
        max_val = max(nums)
    if count <= k:
        return count
    else:
        return -1",0.8243,-17.390469432449006
158,4,"

def solve(nums, k):
    target = min(nums)
    count = 0
    for num in nums:
        count += num - target
    if count % k == 0:
        return count // k
    else:
        return -1",0.8439,-9.162275990643002
158,5,"

def solve(arr, k):
    operations = 0
    while len(set(arr)) > 1:
        max_val = max(arr)
        min_val = min(arr)
        diff = max_val - min_val
        operations += diff
        arr[arr.index(max_val)] = min_val
    return operations * k",0.807,-14.366429795198602
159,1,"

def solve(month, day):
    if month == 1 or month == 2 or month == 12:
        if month == 12 and day >= 21:
            print(""Winter"")
        elif month == 1:
            print(""Winter"")
        elif month == 2 and day <= 19:
            print(""Winter"")
        else:
            print(""Spring"")
    elif month == 3 or month == 4 or month == 5:
        if month == 3 and day >= 20:
            print(""Spring"")
        elif month == 4:
            print(""Spring"")
        elif month == 5 and day <= 20:
            print(""Spring"")
        else:
            print(""Summer"")
    elif month == 6 or month == 7 or month == 8:
        if month == 6 and day >= 21:
            print(""Summer"")
        elif month == 7:
            print(""Summer"")
        elif month == 8 and day <= 22:
            print(""Summer"")
        else:
            print(""Fall"")
    elif month == 9 or month == 10 or month == 11:
        if month == 9 and day >= 23:
            print(""Fall"")
        elif month == 10:
            print(""Fall"")
        elif month == 11 and day <= 21:
            print(""Fall"")
        else:
            print(""Winter"")
    else:
        print(""Invalid month"")",0.9493,-15.596001246735993
159,2,"
def solve(month, day):
    if month == 1:
        if day >= 1 and day <= 31:
            print(""Winter"")
    elif month == 2:
        if day >= 1 and day <= 28:
            print(""Winter"")
    elif month == 3:
        if day >= 1 and day <= 20:
            print(""Winter"")
        elif day >= 21 and day <= 31:
            print(""Spring"")
    elif month == 4:
        if day >= 1 and day <= 30:
            print(""Spring"")
    elif month == 5:
        if day >= 1 and day <= 31:
            print(""Spring"")
    elif month == 6:
        if day >= 1 and day <= 20:
            print(""Spring"")
        elif day >= 21 and day <= 30:
            print(""Summer"")
    elif month == 7:
        if day >= 1 and day <= 31:
            print(""Summer"")
    elif month == 8:
        if day >= 1 and day <= 31:
            print(""Summer"")
    elif month == 9:
        if day >= 1 and day <= 20:
            print(""Summer"")
        elif day >= 21 and day <= 30:
            print(""Fall"")
    elif month == 10:
        if day >= 1 and day <= 31:
            print(""Fall"")
    elif month == 11:
        if day >= 1 and day <= 30:
            print(""Fall"")
    elif month == 12:
        if day >= 1 and day <= 20:
            print(""Fall"")
        elif day >= 21 and day <= 31:
            print(""Winter"")",0.9728,-10.011144995331
159,3,"

def solve(month, day):
    if month == ""January"" and day >= 1 and day <= 31:
        print(""Winter"")
    elif month == ""February"" and day >= 1 and day <= 28:
        print(""Winter"")
    elif month == ""March"" and day >= 1 and day <= 31:
        print(""Spring"")
    elif month == ""April"" and day >= 1 and day <= 30:
        print(""Spring"")
    elif month == ""May"" and day >= 1 and day <= 31:
        print(""Spring"")
    elif month == ""June"" and day >= 1 and day <= 30:
        print(""Summer"")
    elif month == ""July"" and day >= 1 and day <= 31:
        print(""Summer"")
    elif month == ""August"" and day >= 1 and day <= 31:
        print(""Summer"")
    elif month == ""September"" and day >= 1 and day <= 30:
        print(""Fall"")
    elif month == ""October"" and day >= 1 and day <= 31:
        print(""Fall"")
    elif month == ""November"" and day >= 1 and day <= 30:
        print(""Fall"")
    elif month == ""December"" and day >= 1 and day <= 31:
        print(""Winter"")
    else:
        print(""Invalid input"")",0.9718,-8.352327711076295
159,4,"

def solve(month, day):
    if month == 1 or month == 2 or month == 12:
        if day >= 21:
            return ""Winter""
        else:
            return ""Fall""
    elif month == 3:
        if day >= 20:
            return ""Spring""
        else:
            return ""Winter""
    elif month == 4 or month == 5:
        return ""Spring""
    elif month == 6:
        if day >= 21:
            return ""Summer""
        else:
            return ""Spring""
    elif month == 7 or month == 8:
        return ""Summer""
    elif month == 9:
        if day >= 22:
            return ""Fall""
        else:
            return ""Summer""
    elif month == 10 or month == 11:
        return ""Fall""
    else:
        return ""Invalid Month""",0.9246,-14.500456074233004
159,5,"

def solve(month, day):

  if (month == 12 and day >= 21) or (month == 1 and day <= 20):
    print(""Winter"")
  elif (month == 3 and day >= 21) or (month == 4 and day <= 20):
    print(""Spring"")
  elif (month == 6 and day >= 21) or (month == 7 and day <= 22):
    print(""Summer"")
  elif (month == 9 and day >= 23) or (month == 10 and day <= 22):
    print(""Fall"")
  else:
    print(""Winter"")",0.9041,-13.606787301145
160,1,"

def solve(a, b, n):
    if a == 0 and b == 0:
        return None
    elif a == 0:
        return (0, n/b)
    elif b == 0:
        return (n/a, 0)
    else:
        x = n // a
        y = (n - a*x) / b
        if y.is_integer():
            return (x, int(y))
        else:
            return None",0.8761,-12.966082709402006
160,2,"

def solve(a, b, n):
    if a == 0 and b == 0:
        return None
    elif a == 0:
        return (0, n/b)
    elif b == 0:
        return (n/a, 0)
    else:
        gcd = gcd(a, b)
        if n % gcd != 0:
            return None
        else:
            x = n/a
            y = (n - a*x)/b
            return (x, y)
            
def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)",0.8481,-22.578699991174993
160,3,"

def solve(a, b, n):
    x = 0
    y = 0
    while n % a != 0:
        n -= b
        y += 1
    x = n // a
    return x, y",0.8764,-6.995182209998999
160,4,"

def solve(a, b, n):
    x = n // a
    y = (n - a * x) // b
    return x, y",0.8683,-4.799672573535001
160,5,"

def solve(a, b, n):
    gcd = math.gcd(a, b)
    if n % gcd != 0:
        return None
    
    x0, y0 = extended_euclidean(a, b)
    x = x0 * (n // gcd)
    y = y0 * (n // gcd)
    return (x, y)
    
def extended_euclidean(a, b):
    if b == 0:
        return (1, 0)
    else:
        x, y = extended_euclidean(b, a % b)
        return (y, x - (a // b) * y)",0.8835,-16.596262679108296
161,1,"

def solve(list1, list2):
    for element in list2:
        if element in list1:
            list1.remove(element)
    return list1",0.9422,-1.9660950684804008
161,2,"

def solve(list1, list2):
    for item in list2:
        if item in list1:
            list1.remove(item)
    return list1",0.9215,-2.6967948535054007
161,3,"

def solve(list1, list2):
    for element in list2:
        if element in list1:
            list1.remove(element)
    return list1",0.9422,-1.9660950684804008
161,4,"

def solve(list1, list2):
    for element in list2:
        if element in list1:
            list1.remove(element)
    return list1",0.9422,-1.9660950684804008
161,5,"

def solve(list1, list2):
    for element in list2:
        if element in list1:
            list1.remove(element)
    return list1",0.9422,-1.9660950684804008
162,1,"

def solve(n):
    sum = 0
    while n >= 0:
        sum += n
        n -= 2
    return sum",0.9186,-2.7186715468369993
162,2,"

def solve(n):
    total = 0
    while n > 0:
        total += n
        n -= 2
    return total",0.9313,-2.276642311388999
162,3,"

def solve(n):
    if n <= 0:
        return 0
    else:
        return n + solve(n-2)",0.8861,-3.5060413237080006
162,4,"

def solve(n):
    if n < 0:
        return 0
    else:
        return n + solve(n-2)",0.8321,-5.330776066765998
162,5,"

def solve(n):
  total = 0
  while n > 0:
    total += n
    n -= 2
  return total",0.8236,-6.210564426383998
163,1,"

def solve(n, s):
    return (n * s**2) / (4 * math.tan(math.pi / n))",0.9009,-2.9223825417929996
163,2,"

def solve(n, s):
    area = (n * s**2) / (4 * math.tan(math.pi / n))
    return area",0.9328,-2.225220103553
163,3,"

def solve(n, s):
    return (n * s ** 2) / (4 * tan(pi / n))",0.8182,-5.217333272369999
163,4,"
def solve(n, s):
    return (n * s**2) / (4 * math.tan(math.pi / n))",0.8081,-5.965003577550998
163,5,"

def solve(n, s):
    area = (n * s ** 2) / (4 * math.tan(math.pi / n))
    return area",0.9129,-3.006712351502999
164,1,"

def solve(n):
    divisors = []
    for i in range(1, n+1):
        if n % i == 0:
            divisors.append(i)
    sum_divisors = sum(divisors)
    if sum_divisors == n:
        return True
    else:
        return False",0.916,-5.612677052511999
164,2,"

def solve(n):
    sum_div = 0
    for i in range(1, n):
        if n % i == 0:
            sum_div += i
    if sum_div == n:
        return True
    else:
        return False",0.8759,-7.1564088425209995
164,3,"

def solve(n):
    sum_divisors = 0
    for i in range(1, n+1):
        if n % i == 0:
            sum_divisors += i
    return sum_divisors == n",0.9249,-3.748998973651001
164,4,"

def solve(n):
    divisors = [i for i in range(1, n) if n % i == 0]
    if sum(divisors) == n:
        return True
    else:
        return False",0.8545,-7.3894833647594975
164,5,"

def solve(num):
    sum_divisors = 0
    for i in range(1, num+1):
        if num % i == 0:
            sum_divisors += i
    if sum_divisors == num:
        return True
    else:
        return False",0.9271,-4.46431904625
165,1,"

def solve(string):
    count = 0
    for i in range(len(string)):
        if string[i].lower() == chr(ord(""a"") + i) or string[i].upper() == chr(ord(""A"") + i):
            count += 1
    return count",0.8966,-6.437945087366002
165,2,"

def solve(string):
    count = 0
    for i in range(len(string)):
        if string[i].lower() == chr(ord('a') + i) or string[i].upper() == chr(ord('A') + i):
            count += 1
    return count",0.9437,-3.4191553173809996
165,3,"

def solve(string):
    count = 0
    for i in range(len(string)):
        if string[i].lower() == chr(97+i) or string[i].upper() == chr(65+i):
            count += 1
    return count",0.9336,-3.6417360482579992
165,4,"

def solve(str):
    count = 0
    for i in range(len(str)):
        if ord(str[i].lower()) - 97 == i:
            count += 1
    return count",0.8287,-7.892064852772
165,5,"

def solve(string):
    count = 0
    for index, char in enumerate(string):
        if char.lower() == chr(97 + index) or char.upper() == chr(97 + index):
            count += 1
    return count",0.8898,-6.069300096439998
166,1,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if (arr[i] ^ arr[j]) % 2 == 0:
                count += 1
    return count",0.98,-1.150435777948
166,2,"

def solve(nums):
    count = 0
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if (nums[i] ^ nums[j]) % 2 == 0:
                count += 1
    return count",0.9568,-2.5183602439089996
166,3,"

def solve(nums):
    count = 0
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            if (nums[i] ^ nums[j]) % 2 == 0:
                count += 1
    return count",0.9568,-2.5183602439089996
166,4,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if (arr[i] ^ arr[j]) % 2 == 0:
                count += 1
    return count",0.98,-1.150435777948
166,5,"

def solve(arr):
    count = 0
    for i in range(len(arr)-1):
        for j in range(i+1, len(arr)):
            if (arr[i] ^ arr[j]) % 2 == 0:
                count += 1
    return count",0.9218,-4.802634122802499
167,1,"

def solve(n):
    power = 1
    while power < n:
        power *= 2
    return power",0.9398,-1.6136127219030003
167,2,"

def solve(n):
    power = 1
    while power < n:
        power *= 2
    return power",0.9398,-1.6136127219030003
167,3,"

def solve(n):
    power = 0
    while 2**power < n:
        power += 1
    return 2**power",0.93,-2.320664031432001
167,4,"

def solve(n):
    power = 1
    while power < n:
        power *= 2
    return power",0.9398,-1.6136127219030003
167,5,"

def solve(n):
    power = 1
    while power < n:
        power *= 2
    return power",0.9398,-1.6136127219030003
168,1,"

def solve(arr, num):
    count = 0
    for i in arr:
        if i == num:
            count += 1
    return count",0.9718,-0.9733304385823004
168,2,"

def solve(arr, num):
    count = 0
    for i in arr:
        if i == num:
            count += 1
    return count
 ",0.7936,-8.3216560385823
168,3,"

def solve(arr, num):
    count = 0
    for i in arr:
        if i == num:
            count += 1
    return count",0.9718,-0.9733304385823004
168,4,"

def solve(arr, num):
    count = 0
    for i in arr:
        if i == num:
            count += 1
    return count",0.9718,-0.9733304385823004
168,5,"

def solve(arr, num):
    freq = 0
    for i in arr:
        if i == num:
            freq += 1
    return freq",0.9225,-2.744403278183
169,1,"

def solve(n):
    a = 1
    b = 2
    if n == 1:
        return a
    elif n == 2:
        return b
    else:
        for i in range(3, n + 1):
            c = 2 * b + a
            a = b
            b = c
        return b",0.877,-10.237443452541404
169,2,"

def solve(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return 2*solve(n-1) + solve(n-2)",0.9503,-2.4487519559569995
169,3,"

def solve(n):
    if n == 1 or n == 2:
        return n
    else:
        a = 1
        b = 2
        for i in range(3, n+1):
            c = 2*b + a
            a = b
            b = c
        return b",0.8785,-9.0642148148483
169,4,"

def solve(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return 2*solve(n-1) + solve(n-2)",0.9503,-2.4487519559569995
169,5,"

def solve(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        pell = [0, 1]
        for i in range(2, n+1):
            pell.append(2*pell[i-1] + pell[i-2])
        return pell[n]",0.9448,-4.488003020430001
170,1,"

def solve(numbers, start, end):
    sum = 0
    for i in range(start, end+1):
        sum += numbers[i]
    return sum",0.8978,-3.775195814302999
170,2,"

def solve(lst, start, end):
    total = 0
    for i in range(start, end+1):
        total += lst[i]
    return total",0.9263,-2.6783824611049996
170,3,"

def solve(lst, start, end):
    sum = 0
    for i in range(start, end+1):
        sum += lst[i]
    return sum",0.9464,-1.928109063389
170,4,"

def solve(lst, start, end):
    total = 0
    for i in range(start, end+1):
        total += lst[i]
    return total",0.9263,-2.6783824611049996
170,5,"

def solve(lst, start, end):
    sum = 0
    for i in range(start, end+1):
        sum += lst[i]
    return sum",0.9464,-1.928109063389
171,1,"

def solve(side):
    return side * 5",0.851,-1.774638435317
171,2,"

def solve(side):
    return side * 5",0.851,-1.774638435317
171,3,"

def solve(side):
    perimeter = 5 * side
    return perimeter",0.8559,-2.4898115301
171,4,"

def solve(side_length):
    return side_length * 5",0.8165,-2.634989280412
171,5,"

def solve(side):
    return side * 5",0.851,-1.774638435317
172,1,"

def solve(string):
    count = 0
    for i in range(len(string)-2):
        if string[i:i+3] == 'std':
            count += 1
    return count",0.9565,-1.869045792629
172,2,"

def solve(string):
    count = 0
    for i in range(len(string)-2):
        if string[i:i+3] == 'std':
            count += 1
    return count",0.9565,-1.869045792629
172,3,"

def solve(string):
    count = 0
    for i in range(len(string)-2):
        if string[i] == 's' and string[i+1] == 't' and string[i+2] == 'd':
            count += 1
    return count",0.9675,-1.9482411366900003
172,4,"

def solve(string):
    count = 0
    for i in range(len(string)-2):
        if string[i:i+3] == 'std':
            count += 1
    return count",0.9565,-1.869045792629
172,5,"

def solve(string):
    count = 0
    for i in range(len(string)-2):
        if string[i:i+3] == 'std':
            count += 1
    return count",0.9565,-1.869045792629
173,1,"

def solve(string):
    result = """"
    for char in string:
        if char.isalnum():
            result += char
    return result",0.9251,-2.2569118108468
173,2,"

def solve(string):
    new_string = """"
    for char in string:
        if char.isalnum():
            new_string += char
    return new_string",0.9481,-1.705884877464
173,3,"

def solve(string):
    new_string = """"
    for char in string:
        if char.isalnum():
            new_string += char
    return new_string",0.9481,-1.705884877464
173,4,"

def solve(string):
    new_string = """"
    for char in string:
        if char.isalnum():
            new_string += char
    return new_string",0.9481,-1.705884877464
173,5,"

def solve(string):
    alphanumeric = """"
    for char in string:
        if char.isalnum():
            alphanumeric += char
    return alphanumeric",0.9197,-2.4275309695655003
174,1,"

def solve(sequence):
    result = {}
    for key, value in sequence:
        if key in result:
            result[key].append(value)
        else:
            result[key] = [value]
    return result",0.9127,-4.0189384642284995
174,2,"

def solve(seq):
    result = {}
    for key, value in seq:
        if key in result:
            result[key].append(value)
        else:
            result[key] = [value]
    return result",0.9381,-2.8123454274378
174,3,"

def solve(seq):
    result = {}
    for key, value in seq:
        if key in result:
            result[key].append(value)
        else:
            result[key] = [value]
    return result",0.9381,-2.8123454274378
174,4,"

def solve(key_value_pairs):
    result = {}
    for key, value in key_value_pairs:
        if key in result:
            result[key].append(value)
        else:
            result[key] = [value]
    return result",0.904,-4.843038668431
174,5,"

def solve(pairs):
    result = {}
    for key, value in pairs:
        if key in result:
            result[key].append(value)
        else:
            result[key] = [value]
    return result",0.9124,-4.127861078483301
175,1,"

def solve(string):
    stack = []
    for char in string:
        if char == ""("":
            stack.append(char)
        elif char == "")"":
            if len(stack) == 0:
                return False
            else:
                stack.pop()
    if len(stack) == 0:
        return True
    else:
        return False",0.9503,-3.6193189485822983
175,2,"

def solve(s):
    stack = []
    for char in s:
        if char == '(':
            stack.append(char)
        elif char == ')':
            if len(stack) == 0:
                return False
            else:
                stack.pop()
    if len(stack) == 0:
        return True
    else:
        return False",0.9518,-3.5047139459377994
175,3,"

def solve(s):
    stack = []
    for char in s:
        if char == '(':
            stack.append('(')
        elif char == ')':
            if len(stack) == 0:
                return False
            else:
                stack.pop()
    if len(stack) == 0:
        return True
    else:
        return False",0.9205,-5.884962422913801
175,4,"

def solve(string):
    stack = []
    for char in string:
        if char == ""("":
            stack.append(char)
        elif char == "")"":
            if len(stack) == 0:
                return False
            else:
                stack.pop()
    return len(stack) == 0",0.916,-5.263496177769298
175,5,"

def solve(s):
    stack = []
    for c in s:
        if c == '(':
            stack.append(c)
        elif c == ')':
            if len(stack) == 0:
                return False
            else:
                stack.pop()
    if len(stack) == 0:
        return True
    else:
        return False",0.9369,-4.6290153308811
176,1,"

def solve(side1, side2, side3):
    perimeter = side1 + side2 + side3
    return perimeter",0.9744,-0.6988712395965
176,2,"

def solve(side1, side2, side3):
    perimeter = side1 + side2 + side3
    return perimeter",0.9744,-0.6988712395965
176,3,"

def solve(side1, side2, side3):
    perimeter = side1 + side2 + side3
    return perimeter",0.9744,-0.6988712395965
176,4,"

def solve(a,b,c):
    perimeter = a+b+c
    return perimeter",0.7375,-5.175590255038
176,5,"

def solve(side1, side2, side3):
    perimeter = side1 + side2 + side3
    return perimeter",0.9744,-0.6988712395965
177,1,"

def solve(l, r):
    for x in range(l, r+1):
        for y in range(x+1, r+1):
            lcm = (x*y)//gcd(x,y)
            if lcm >= l and lcm <= r:
                return x, y",0.8384,-10.050004040116995
177,2,"

def solve(start, end):
    for i in range(start, end+1):
        for j in range(i+1, end+1):
            if i*j % lcm(i,j) == 0:
                return i, j
    return ""No such numbers exist in the given range.""",0.7789,-15.494782701759998
177,3,"

def solve(start, end):
    for i in range(start, end+1):
        for j in range(i+1, end+1):
            if i % j == 0 or j % i == 0:
                return i, j
    return None",0.8571,-8.638364334474002
177,4,"

def solve(start, end):
    for i in range(start, end+1):
        for j in range(i+1, end+1):
            if i*j % max(i,j) == 0:
                return i, j
    return None",0.7669,-14.066682112912002
177,5,"

def solve(start, end):
    for i in range(start, end + 1):
        for j in range(i + 1, end + 1):
            lcm = (i * j) // gcd(i, j)
            if lcm >= start and lcm <= end:
                return i, j
    return ""No distinct numbers found within the given range.""",0.8539,-12.0042568449545
178,1,"

def solve(search_str, string):
    if search_str in string:
        return True
    else:
        return False",0.8361,-4.4742053389360015
178,2,"

def solve(string, literals):
    for literal in literals:
        if literal in string:
            print(""{} found in string"".format(literal))
        else:
            print(""{} not found in string"".format(literal))

# Example
string = ""This is a string""
literals = [""This"", ""is"", ""not"", ""a"", ""string""]
solve(string, literals)

# Output:
# This found in string
# is found in string
# not not found in string
# a found in string
# string found in string",0.8051,-24.28678784103329
178,3,"

def solve(string, search_strings):
    result = []
    for s in search_strings:
        if s in string:
            result.append(s)
    return result",0.8619,-4.903169597448
178,4,"

def solve(str, search_list):
    result = []
    for search_str in search_list:
        if search_str in str:
            result.append(search_str)
    return result",0.7863,-8.654592118432006
178,5,"

def solve(string, literals):
    for literal in literals:
        if literal in string:
            return True
    return False",0.8938,-2.9204845303200004
179,1,"

def solve(n):
    num_list = list(str(n))
    while sum(num_list) < n:
        num_list.append(sum(num_list[-3:]))
    if sum(num_list) == n:
        return True
    else:
        return False",0.8141,-10.697020954479
179,2,"

def solve(n):
    digits = [int(i) for i in str(n)]
    # initialize sequence with digits of n
    sequence = digits.copy()
    # calculate sum of sequence
    sequence_sum = sum(sequence)
    # check if sum of sequence is equal to n
    if sequence_sum == n:
        return True
    # loop until sequence_sum is greater than n
    while sequence_sum < n:
        # add the last k digits of sequence to itself
        sequence.append(sum(sequence[-len(digits):]))
        # update sequence_sum
        sequence_sum = sum(sequence)
        # check if sum of sequence is equal to n
        if sequence_sum == n:
            return True
    # if loop terminates without returning, n is not a Keith number
    return False",0.0,-10046.726236353094
179,3,"

def solve(num):
    digits = [int(x) for x in str(num)]
    n = len(digits)
    sum = 0
    i = 0
    while sum < num:
        sum = 0
        for j in range(n):
            sum += digits[i+j]
        digits.append(sum)
        i += 1
    if sum == num:
        return True
    else:
        return False",0.8657,-12.833222915157
179,4,"

def solve(num):
    num_str = str(num)
    num_list = []
    for digit in num_str:
        num_list.append(int(digit))
    n = len(num_list)
    sum_list = [sum(num_list[:i]) for i in range(1, n+1)]
    while sum_list[-1] < num:
        next_num = sum(sum_list[-n:])
        sum_list.append(next_num)
    if sum_list[-1] == num:
        return True
    else:
        return False",0.8171,-21.814841564764
179,5,"

def solve(num):
    digits = [int(i) for i in str(num)]
    seq = [0] * len(digits)
    while sum(seq) < num:
        seq.append(sum(seq[-len(digits):]))
    return sum(seq[-len(digits):]) == num",0.8008,-12.661729542755998
180,1,"

from math import radians, sin, cos, atan2, sqrt

def solve(lat1, lon1, lat2, lon2):
    R = 6373.0
    lat1 = radians(lat1)
    lon1 = radians(lon1)
    lat2 = radians(lat2)
    lon2 = radians(lon2)
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    distance = R * c
    return distance",0.9498,-7.616293363451299
180,2,"

from math import sin, cos, sqrt, atan2, radians

def solve(lat1, lon1, lat2, lon2):
    R = 6373.0
    lat1 = radians(lat1)
    lon1 = radians(lon1)
    lat2 = radians(lat2)
    lon2 = radians(lon2)

    dlon = lon2 - lon1
    dlat = lat2 - lat1

    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))

    distance = R * c

    return distance",0.9541,-6.9498928847132975
180,3,"

import math

def solve(lat1, lon1, lat2, lon2):
    R = 6371 # radius of the Earth in kilometers
    dLat = math.radians(lat2 - lat1)
    dLon = math.radians(lon2 - lon1)
    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dLon/2) * math.sin(dLon/2)
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
    d = R * c
    return d",0.932,-9.50731725209804
180,4,"

def solve(lat1, lon1, lat2, lon2):
    from math import sin, cos, sqrt, atan2, radians
    
    # approximate radius of earth in km
    R = 6373.0
    
    # convert degrees to radians
    lat1 = radians(lat1)
    lon1 = radians(lon1)
    lat2 = radians(lat2)
    lon2 = radians(lon2)
    
    # calculate the differences between the latitudes and longitudes
    dlat = lat2 - lat1
    dlon = lon2 - lon1
    
    # calculate the distance between the two points using the Haversine formula
    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    distance = R * c
    
    return distance",0.9236,-15.488229733317995
180,5,"

import math

def solve(lat1, lon1, lat2, lon2):
    R = 6371 # radius of Earth in kilometers
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    a = math.sin(dlat / 2) * math.sin(dlat / 2) + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon / 2) * math.sin(dlon / 2)
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    d = R * c
    return d",0.9183,-11.84951085706044
181,1,"

def solve(strs):
    if not strs:
        return """"
    shortest = min(strs, key=len)
    for i, letter in enumerate(shortest):
        for other in strs:
            if other[i] != letter:
                return shortest[:i]
    return shortest",0.8717,-7.823415404996999
181,2,"

def solve(strings):
    if not strings:
        return """"
    min_str = min(strings, key=len)
    for i, ch in enumerate(min_str):
        for str in strings:
            if str[i] != ch:
                return min_str[:i]
    return min_str",0.8281,-10.937252193335995
181,3,"

def solve(strs):
    if not strs:
        return """"
    shortest = min(strs, key=len)
    for i, ch in enumerate(shortest):
        for other in strs:
            if other[i] != ch:
                return shortest[:i]
    return shortest",0.9279,-4.266459600727999
181,4,"

def solve(strings):
    prefix = ''
    if len(strings) == 0:
        return prefix
    shortest = min(strings, key=len)
    for i in range(len(shortest)):
        char = strings[0][i]
        for string in strings[1:]:
            if string[i] != char:
                return prefix
        prefix += char
    return prefix",0.8583,-11.769055908152502
181,5,"
def solve(strs):
    if not strs:
        return """"
    prefix = strs[0]
    for i in range(1, len(strs)):
        while strs[i].find(prefix) != 0:
            prefix = prefix[:-1]
    return prefix",0.854,-8.6816934482395
182,1,"

def solve(string):
    upper = re.findall(""[A-Z]"", string)
    lower = re.findall(""[a-z]"", string)
    special = re.findall(""[^A-Za-z0-9]"", string)
    numeric = re.findall(""[0-9]"", string)
    return upper, lower, special, numeric",0.9046,-6.4158343852214985
182,2,"

import re

def solve(string):
    uppercase = re.findall(r'[A-Z]', string)
    lowercase = re.findall(r'[a-z]', string)
    special_char = re.findall(r'[^A-Za-z0-9]', string)
    numeric = re.findall(r'[0-9]', string)
    return uppercase, lowercase, special_char, numeric",0.9054,-7.251435058252401
182,3,"

import re

def solve(text):
    uppercase = re.findall(r""[A-Z]"", text)
    lowercase = re.findall(r""[a-z]"", text)
    special = re.findall(r""[\W]"", text)
    numeric = re.findall(r""\d"", text)
    
    return uppercase, lowercase, special, numeric",0.8079,-13.867037051381198
182,4,"

import re

def solve(input_str):
    uppercase = re.findall(r""[A-Z]"", input_str)
    lowercase = re.findall(r""[a-z]"", input_str)
    special_char = re.findall(r""[^A-Za-z0-9]"", input_str)
    numeric = re.findall(r""\d"", input_str)

    return uppercase, lowercase, special_char, numeric",0.853,-12.079622655774502
182,5,"

def solve(string):
    uppercase = re.findall(r'[A-Z]', string)
    lowercase = re.findall(r'[a-z]', string)
    special = re.findall(r'[^A-Za-z0-9]', string)
    numeric = re.findall(r'\d', string)
    return uppercase, lowercase, special, numeric",0.8918,-7.559994583017402
183,1,"

def solve(arr, k):
    distinct_pairs = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if abs(arr[i]-arr[j]) == k:
                distinct_pairs += 1
    return distinct_pairs",0.8545,-8.961416872863001
183,2,"

def solve(arr, k):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if abs(arr[i] - arr[j]) == k:
                count += 1
    return count",0.9688,-1.7412295714145
183,3,"

def solve(arr, k):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if abs(arr[i]-arr[j]) == k:
                count += 1
    return count",0.9582,-2.3058641273024993
183,4,"

def solve(arr, k):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if abs(arr[i]-arr[j]) == k:
                count += 1
    return count",0.9582,-2.3058641273024993
183,5,"

def solve(arr, k):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if abs(arr[i] - arr[j]) == k:
                count += 1
    return count",0.9688,-1.7412295714145
184,1,"

def solve(lst, num):
    result = []
    for i in lst:
        if i > num:
            result.append(i)
    return result",0.9288,-2.2907941588327
184,2,"

def solve(lst, num):
    return [i for i in lst if i > num]",0.8532,-3.174193214279
184,3,"

def solve(lst, num):
    result = []
    for i in lst:
        if i > num:
            result.append(i)
    return result",0.9288,-2.2907941588327
184,4,"

def solve(lst, num):
    result = []
    for item in lst:
        if item > num:
            result.append(item)
    return result",0.885,-3.7886050500918
184,5,"

def solve(lst, num):
    return [x for x in lst if x > num]",0.9075,-1.9408369037219997
185,1,"

def solve(a, b, c):
    if a == 0:
        return None
    else:
        focus = (b / (2*a), (4*a*c - b**2) / (4*a))
        return focus",0.7923,-11.638749907698006
185,2,"

def solve(a, b, c):
    x = -b/(2*a)
    y = c - (b**2)/(4*a)
    return (x,y)",0.8419,-6.3692136078170005
185,3,"

def solve(a, b, c):
    focus_x = -b / (2 * a)
    focus_y = (4 * a * c - b ** 2) / (4 * a)
    return (focus_x, focus_y)",0.9173,-4.489936889774
185,4,"

def solve(a,b,c):
    focus = (b**2 - 4*a*c)/(4*a)
    return focus",0.8103,-5.467631673849998
185,5,"

def solve(a, b, c):
    x = -b / (2 * a)
    y = c - (b ** 2) / (4 * a)
    return (x, y)",0.8895,-5.151543614413999
186,1,"

import re

def solve(literals, string):
    pattern = '|'.join(literals)
    matches = re.findall(pattern, string)
    return matches",0.8751,-4.269861215995001
186,2,"

import re

def solve(string):
    regex = r""literal1|literal2|literal3""
    matches = re.findall(regex, string)
    return matches",0.8415,-5.866213245639999
186,3,"

import re

def solve(string):
    pattern = r'hello|world|python'
    matches = re.findall(pattern, string)
    return matches",0.7928,-7.197182208699999
186,4,"

import re

def solve(text):
    pattern = re.compile(r'literals|string|regex')
    matches = pattern.findall(text)
    return matches",0.7066,-10.41960456779
186,5,"

import re

def solve(string):
    regex = r""literal1|literal2|literal3"" # replace with desired literals 
    matches = re.findall(regex, string)
    return matches",0.7126,-13.554483532485
187,1,"

def solve(seq1, seq2):
    m = len(seq1)
    n = len(seq2)
    dp = [[0]*(n+1) for _ in range(m+1)]
    for i in range(1, m+1):
        for j in range(1, n+1):
            if seq1[i-1] == seq2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    lcs = []
    i = m
    j = n
    while i > 0 and j > 0:
        if seq1[i-1] == seq2[j-1]:
            lcs.append(seq1[i-1])
            i -= 1
            j -= 1
        elif dp[i-1][j] > dp[i][j-1]:
            i -= 1
        else:
            j -= 1
    return """".join(lcs[::-1])",0.9573,-10.041833998077
187,2,"

def solve(seq1, seq2):
    m = len(seq1)
    n = len(seq2)

    # create a 2D array to store the lengths of longest common subsequence
    table = [[0] * (n+1) for i in range(m+1)]

    # fill the table with appropriate values
    for i in range(m+1):
        for j in range(n+1):
            if i == 0 or j == 0:
                table[i][j] = 0
            elif seq1[i-1] == seq2[j-1]:
                table[i][j] = table[i-1][j-1] + 1
            else:
                table[i][j] = max(table[i-1][j], table[i][j-1])

    # the longest common subsequence length will be at table[m][n]
    lcs_length = table[m][n]

    # create an empty string to store the longest common subsequence
    lcs = """"

    # start from the bottom right corner of the table
    i = m
    j = n

    # loop until i or j becomes 0
    while i > 0 and j > 0:
        # if the characters at the current position are equal, add it to the lcs string
        if seq1[i-1] == seq2[j-1]:
            lcs = seq1[i-1] + lcs
            i -= 1
            j -= 1
        # if the characters are not equal, move to the direction of the maximum value in the table
        elif table[i-1][j] > table[i][j-1]:
            i -= 1
        else:
            j -= 1

    return lcs",0.8589,-57.50085362305297
187,3,"

def solve(sequence1, sequence2):
    m = len(sequence1)
    n = len(sequence2)
    dp = [[0 for i in range(n+1)] for j in range(m+1)]
    for i in range(1,m+1):
        for j in range(1,n+1):
            if sequence1[i-1] == sequence2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    lcs = """"
    i = m
    j = n
    while i > 0 and j > 0:
        if sequence1[i-1] == sequence2[j-1]:
            lcs = sequence1[i-1] + lcs
            i -= 1
            j -= 1
        elif dp[i-1][j] > dp[i][j-1]:
            i -= 1
        else:
            j -= 1
    return lcs",0.9482,-12.236404436790792
187,4,"

def solve(seq1, seq2):
    m = len(seq1)
    n = len(seq2)
    dp = [[0 for i in range(n+1)] for j in range(m+1)]
    for i in range(m+1):
        for j in range(n+1):
            if i == 0 or j == 0:
                dp[i][j] = 0
            elif seq1[i-1] == seq2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    lcs = []
    i = m
    j = n
    while i > 0 and j > 0:
        if seq1[i-1] == seq2[j-1]:
            lcs.append(seq1[i-1])
            i -= 1
            j -= 1
        elif dp[i-1][j] > dp[i][j-1]:
            i -= 1
        else:
            j -= 1
    lcs.reverse()
    return """".join(lcs)",0.9607,-10.104182472385494
187,5,"

def solve(seq1, seq2):

    # initialize matrix with zeros
    matrix = [[0] * (len(seq2) + 1) for _ in range(len(seq1) + 1)]

    # fill in matrix with longest common subsequence
    for i in range(1, len(seq1) + 1):
        for j in range(1, len(seq2) + 1):
            if seq1[i-1] == seq2[j-1]:
                matrix[i][j] = matrix[i-1][j-1] + 1
            else:
                matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1])

    # backtrack to find the common subsequence
    subsequence = []
    i = len(seq1)
    j = len(seq2)
    while i > 0 and j > 0:
        if seq1[i-1] == seq2[j-1]:
            subsequence.append(seq1[i-1])
            i -= 1
            j -= 1
        elif matrix[i-1][j] > matrix[i][j-1]:
            i -= 1
        else:
            j -= 1
    
    # reverse the subsequence to get the correct order
    subsequence.reverse()

    return subsequence",0.8887,-32.80449592583336
188,1,"
def solve(n):
    i = 2
    while (i * i <= n):
        if (n % i == 0):
            j = n // i
            if (j % 2 == 0):
                return True
        i += 1
    return False",0.7879,-14.540718123626002
188,2,"

def solve(n):
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            if (n // i)**0.5 == int((n // i)**0.5):
                return True
    return False",0.8974,-6.384381016114101
188,3,"

def solve(n):
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            if i**2 == n:
                return True
    return False",0.8249,-8.855292474361999
188,4,"

def solve(num):
    for i in range(1, int(num**0.5) + 1):
        if num % i == 0:
            if (num//i) ** 0.5 == int((num//i)**0.5):
                return True
    return False",0.813,-13.0451361359787
188,5,"

def solve(n):
    if n < 0:
        return False
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            if (n / i)**0.5 == int((n / i)**0.5):
                return True
    return False",0.8531,-11.43532366735
189,1,"

def solve(nums):
    nums.sort()
    missing = 1
    for num in nums:
        if num == missing:
            missing += 1
        elif num > missing:
            return missing
    return missing",0.9072,-4.4792883582649985
189,2,"

def solve(nums):
    nums.sort()
    missing = 1
    for num in nums:
        if num > 0:
            if num == missing:
                missing += 1
            elif num > missing:
                return missing
    return missing",0.8946,-5.902632246581
189,3,"

def solve(nums):
    nums = sorted(nums)
    if not nums:
        return 1
    if nums[-1] < 0:
        return 1
    for i in range(1, nums[-1]+2):
        if i not in nums:
            return i",0.8109,-12.576286454050006
189,4,"

def solve(nums):
    nums.sort()
    missing = 1
    for num in nums:
        if num == missing:
            missing += 1
    return missing",0.9027,-3.686951722598
189,5,"

def solve(nums):
    nums.sort()
    smallest = 1
    for num in nums:
        if num == smallest:
            smallest += 1
    return smallest",0.8531,-5.717899212808998
190,1,"

def solve(a):
    return (a-1)**2",0.5954,-6.7400827010999995
190,2,"

def solve(x1, y1, x2, y2):
    count = 0
    for x in range(x1+1, x2):
        for y in range(y1+1, y2):
            if x.is_integer() and y.is_integer():
                count += 1
    return count",0.9607,-2.6883750248967995
190,3,"

def solve(side_length):
    count = 0
    for x in range(side_length):
        for y in range(side_length):
            if x % 1 == 0 and y % 1 == 0:
                count += 1
    return count",0.9037,-5.5664966533485005
190,4,"

def solve(x1, y1, x2, y2):
    count = 0
    for i in range(x1+1, x2):
        for j in range(y1+1, y2):
            if i.is_integer() and j.is_integer():
                count += 1
    return count",0.9512,-3.349332817233599
190,5,"

def solve(x1, y1, x2, y2):
    count = 0
    for x in range(x1+1, x2):
        for y in range(y1+1, y2):
            count += 1
    return count",0.9249,-4.3724064042538
191,1,"

def solve(month_name):
    thirty_days = ['April', 'June', 'September', 'November']
    if month_name in thirty_days:
        return True
    else:
        return False",0.9258,-3.0833490021150007
191,2,"

def solve(month):
    thirty_days_months = ['April', 'June', 'September', 'November']
    if month in thirty_days_months:
        return True
    else:
        return False",0.9005,-4.192269880273999
191,3,"

def solve(month):
    thirty_days = [""April"", ""June"", ""September"", ""November""]
    if month in thirty_days:
        return True
    else:
        return False",0.9415,-2.2908922129710008
191,4,"

def solve(month):
    thirty_days = [""April"", ""June"", ""September"", ""November""]
    if month in thirty_days:
        return True
    elif month == ""February"":
        return False
    else:
        return False",0.8776,-6.395536488135
191,5,"

def solve(month):
    thirty_days = [""April"", ""June"", ""September"", ""November""]
    if month in thirty_days:
        return True
    else:
        return False",0.9415,-2.2908922129710008
192,1,"

def solve(string):
    has_letter = False
    has_number = False
    for char in string:
        if char.isalpha():
            has_letter = True
        elif char.isdigit():
            has_number = True
    return has_letter and has_number",0.9391,-3.331929978595301
192,2,"

def solve(string):
    return any(char.isalpha() for char in string) and any(char.isdigit() for char in string)",0.7837,-6.5800979540953
192,3,"

def solve(string):
    has_letter = False
    has_number = False
    
    for char in string:
        if char.isalpha():
            has_letter = True
        elif char.isdigit():
            has_number = True
    
    if has_letter and has_number:
        return True
    else:
        return False",0.9533,-3.0604440150609995
192,4,"

def solve(string):
    has_letter = False
    has_number = False
    for char in string:
        if char.isalpha():
            has_letter = True
        elif char.isdigit():
            has_number = True
    if has_letter and has_number:
        return True
    else:
        return False",0.9634,-2.3830493800203003
192,5,"

def solve(string):
    has_letter = False
    has_number = False
    for char in string:
        if char.isalpha():
            has_letter = True
        elif char.isdigit():
            has_number = True
    if has_letter and has_number:
        return True
    else:
        return False",0.9634,-2.3830493800203003
193,1,"

def solve(tuple):
    return tuple(set(tuple))",0.7746,-2.8096218723099997
193,2,"

def solve(tup):
    unique_tup = ()
    for i in tup:
        if i not in unique_tup:
            unique_tup += (i,)
    return unique_tup",0.8244,-7.724366808349998
193,3,"

def solve(tup):
  return tuple(set(tup))",0.6922,-4.783375114438001
193,4,"

def solve(tuple_input):
    return tuple(set(tuple_input))",0.7244,-4.192004568593001
193,5,"

def solve(my_tuple):
    unique_tuple = tuple(set(my_tuple))
    return unique_tuple",0.7064,-6.604200348198002
194,1,"

def solve(octal):
    decimal = 0
    power = 0
    while(octal != 0):
        decimal += (octal % 10) * (8 ** power)
        power += 1
        octal //= 10
    return decimal",0.9307,-4.1674462963953
194,2,"

def solve(octal_num):
    decimal_num = 0
    power = 0
    while(octal_num != 0):
        decimal_num = decimal_num + (octal_num % 10) * pow(8,power)
        power += 1
        octal_num = int(octal_num/10)
    return decimal_num",0.8805,-9.288397175822
194,3,"

def solve(octal_num):
    decimal_num = 0
    power = 0
    while(octal_num != 0):
        decimal_num = decimal_num + (octal_num % 10) * (8 ** power)
        octal_num = octal_num // 10
        power += 1
    return decimal_num",0.8925,-8.191153309680999
194,4,"

def solve(octal): 
    decimal = 0 
    power = 0 
    while(octal != 0): 
        decimal = decimal + (octal % 10) * pow(8, power) 
        power += 1 
        octal = int(octal / 10) 
    return decimal",0.8739,-9.302629819931996
194,5,"

def solve(octal):
    decimal = 0
    power = 0
    while octal != 0:
        decimal += (octal % 10) * (8 ** power)
        octal //= 10
        power += 1
    return decimal",0.9068,-5.675707403983
195,1,"

def solve(arr, target):
    left = 0
    right = len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            if mid == 0 or arr[mid-1] < target:
                return mid
            else:
                right = mid - 1
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
                
    return -1",0.8884,-13.014176860928002
195,2,"

def solve(arr, target):
    low = 0
    high = len(arr) - 1
    
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return -1",0.9358,-5.577334402778998
195,3,"

def solve(arr, target):
    low = 0
    high = len(arr) - 1 
    
    while low <= high:
        mid = (low + high) // 2 
        if arr[mid] < target:
            low = mid + 1 
        elif arr[mid] > target:
            high = mid - 1
        else:
            if mid == 0 or arr[mid-1] != target:
                return mid
            else:
                high = mid - 1 
    return -1",0.8434,-18.736427082752005
195,4,"

def solve(arr, target):
    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2
        if arr[mid] < target:
            left = mid + 1
        elif arr[mid] > target:
            right = mid - 1
        else:
            while arr[mid] == target:
                mid -= 1
            return mid + 1
    return -1",0.9059,-9.982652901055
195,5,"

def solve(arr, target):
    start = 0
    end = len(arr) - 1
    while start <= end:
        mid = (start + end) // 2
        if arr[mid] < target:
            start = mid + 1
        elif arr[mid] > target:
            end = mid - 1
        else:
            while mid > 0 and arr[mid - 1] == target:
                mid -= 1
            return mid
    return -1",0.9264,-8.098262842120702
196,1,"

def solve(tuples, k):
    result = []
    for tup in tuples:
        if len(tup) != k:
            result.append(tup)
    return result",0.8916,-4.130347328036
196,2,"

def solve(tuples, k):
    new_tuples = []
    for tup in tuples:
        if len(tup) != k:
            new_tuples.append(tup)
    return new_tuples",0.9114,-3.618390327743001
196,3,"

def solve(lst, k):
    new_lst = []
    for tup in lst:
        if len(tup) != k:
            new_lst.append(tup)
    return new_lst",0.9057,-3.7636068904025
196,4,"

def solve(tuples, k):
  result = []
  for tup in tuples:
    if len(tup) != k:
      result.append(tup)
  return result",0.8369,-6.408774903644998
196,5,"

def solve(lst, k):
    return [tup for tup in lst if len(tup) != k]",0.8928,-2.722258154888999
197,1,"

def solve(base, exp):
    result = ()
    for i in base:
        for j in exp:
            result += (i**j,)
    return result",0.8149,-6.958568633493998
197,2,"

def solve(tup1, tup2):
    result = tuple(a ** b for a, b in zip(tup1, tup2))
    return result",0.7807,-8.171576370255996
197,3,"

def solve(base, exponent):
    result = ()
    for b in base:
        for e in exponent:
            result += (b**e,)
    return result",0.8558,-5.294908719521
197,4,"

def solve(t1, t2):
    result = ()
    for num1 in t1:
        for num2 in t2:
            result = result + (num1 ** num2,)
    return result",0.8429,-7.5173895467779
197,5,"

def solve(tup1, tup2):
    result = ()
    for i in range(len(tup1)):
        result += (tup1[i] ** tup2[i],)
    return result",0.9263,-3.2140412586529985
198,1,"

def solve(a, b):
    if a <= 0 or b <= 0:
        return ""Invalid input""
    
    # Find the semi-major and semi-minor axes of the ellipse
    semi_major = max(a, b)
    semi_minor = min(a, b)
    
    # Find the coordinates of the vertices of the largest inscribed triangle
    x1 = semi_major * (-1/3)
    y1 = semi_minor * (2/3)
    
    x2 = semi_major * (1/3)
    y2 = semi_minor * (-2/3)
    
    x3 = semi_major * (2/3)
    y3 = 0
    
    # Calculate the length of the sides of the triangle
    side1 = ((x2 - x1)**2 + (y2 - y1)**2)**0.5
    side2 = ((x3 - x2)**2 + (y3 - y2)**2)**0.5
    side3 = ((x3 - x1)**2 + (y3 - y1)**2)**0.5
    
    # Find the maximum side length and return it as the largest triangle
    largest_triangle = max(side1, side2, side3)
    return largest_triangle",0.8263,-50.938056930998705
198,2,"

import math

def solve(a, b):
    c = math.sqrt(a**2 - b**2)
    if b == 0:
        return None
    else:
        return 2 * a * b / c",0.6634,-19.29001101045
198,3,"

from math import pi, sqrt

def solve(a, b):
    area = (pi * a * b) / 4
    side = sqrt((a * a * b * b) / (a * a + b * b))
    height = (2 * area) / side
    width = (2 * area) / height
    return (height, width)",0.723,-25.944428505802996
198,4,"

def solve(a, b):
    c = (a**2 - b**2)**(1/2)
    l = (a + b + c)/2
    h = (2*(a*b*l)**(1/2))/(a+b)
    area = (a*b)/2
    max_area = area*(h/l)
    return max_area",0.6775,-29.59201764372
198,5,"

def solve(a, b):
    area = 0
    x1 = 0
    y1 = 0
    x2 = a/2
    y2 = b/2
    x3 = a
    y3 = 0
    while x2 >= 0:
        while y3 <= b:
            if (x1-x3)*(y2-y3) - (y1-y3)*(x2-x3) > 0:
                temp_area = 0.5 * abs((x1-x3)*(y2-y3) - (y1-y3)*(x2-x3))
                if temp_area > area:
                    area = temp_area
                    points = [[x1,y1],[x2,y2],[x3,y3]]
            y3 += 1
        x2 -= 1
        y3 = 0
    return points",0.802,-41.699336336164
199,1,"

def solve(n):
    power = 0
    while 2**power <= n:
        power += 1
    return 2**(power-1)",0.9329,-2.431571559814
199,2,"

def solve(num):
    power = 0
    while 2**power <= num:
        power += 1
    return 2**(power-1)",0.9291,-2.5746637208670005
199,3,"

def solve(n):
    power = 0
    while 2**power <= n:
        power += 1
    return 2**(power-1)",0.9329,-2.431571559814
199,4,"

def solve(num):
    power = 0
    while 2**power <= num:
        power += 1
    return 2**(power-1)",0.9291,-2.5746637208670005
199,5,"

def solve(num):
    power = 0
    while 2**power <= num:
        power += 1
    return 2**(power-1)",0.9291,-2.5746637208670005
200,1,"

def solve(lst):
    max_val = max(lst)
    max_indices = []
    for i in range(len(lst)):
        if lst[i] == max_val:
            max_indices.append(i)
    return max_indices",0.931,-3.147914300211
200,2,"

def solve(lst):
    max_val = max(lst)
    return [i for i, x in enumerate(lst) if x == max_val]",0.848,-4.944876967807
200,3,"

def solve(lst):
    max_value = max(lst)
    max_indices = []
    for i in range(len(lst)):
        if lst[i] == max_value:
            max_indices.append(i)
    return max_indices",0.912,-4.051271105541002
200,4,"

def solve(lst):
    max_val = max(lst)
    max_indexes = []
    for i in range(len(lst)):
        if lst[i] == max_val:
            max_indexes.append(i)
    return max_indexes",0.9171,-3.808556293311298
200,5,"

def solve(lst):
    max_val = max(lst)
    indices = [i for i, val in enumerate(lst) if val == max_val]
    return indices",0.8601,-5.124650685046
201,1,"

def solve(lst):
    return all(elem == lst[0] for elem in lst) ",0.7394,-6.0388753551718
201,2,"

def solve(lst):
    if len(lst) == 0:
        return False
    else:
        first = lst[0]
        for i in lst:
            if i != first:
                return False
        return True",0.8552,-7.352106066187404
201,3,"

def solve(lst):
    if len(lst) <= 1:
        return True
    else:
        first = lst[0]
        for ele in lst:
            if ele != first:
                return False
        return True",0.7981,-10.598841212279
201,4,"

def solve(lst):
    return all(x == lst[0] for x in lst)",0.8537,-3.0058311298511
201,5,"

def solve(lst):
    return all(x == lst[0] for x in lst)",0.8537,-3.0058311298511
202,1,"

def solve(string):
    new_string = """"
    for i in range(len(string)):
        if i % 2 != 0:
            new_string += string[i]
    return new_string",0.9314,-2.769514574575
202,2,"

def solve(string):
    new_string = """"
    for i in range(len(string)):
        if i % 2 == 0:
            new_string += string[i]
    return new_string",0.9135,-3.5280009531460004
202,3,"

def solve(s):
    return s[::2]",0.717,-3.9914900821
202,4,"

def solve(string):
    return ''.join([char for index, char in enumerate(string) if index % 2 == 0])",0.7806,-6.934788310227498
202,5,"

def solve(string):
    return string[::2]",0.7739,-3.0750652196200003
203,1,"

def solve(x, y):
    # convert integers to binary strings
    x_bin = bin(x)[2:]
    y_bin = bin(y)[2:]
    
    # make sure both strings have the same length
    if len(x_bin) < len(y_bin):
        x_bin = '0' * (len(y_bin) - len(x_bin)) + x_bin
    elif len(y_bin) < len(x_bin):
        y_bin = '0' * (len(x_bin) - len(y_bin)) + y_bin
    
    # calculate hamming distance
    distance = 0
    for i in range(len(x_bin)):
        if x_bin[i] != y_bin[i]:
            distance += 1
    
    return distance",0.9127,-13.97316503293304
203,2,"

def solve(num1, num2):
    # convert the two numbers to binary strings
    bin1 = bin(num1)[2:]
    bin2 = bin(num2)[2:]
    
    # pad the shorter string with zeros to make them equal in length
    if len(bin1) < len(bin2):
        bin1 = '0' * (len(bin2) - len(bin1)) + bin1
    elif len(bin2) < len(bin1):
        bin2 = '0' * (len(bin1) - len(bin2)) + bin2
    
    # initialize the hamming distance to 0
    hamming_dist = 0
    
    # loop through the binary strings and count the number of different bits
    for i in range(len(bin1)):
        if bin1[i] != bin2[i]:
            hamming_dist += 1
    
    # return the hamming distance
    return hamming_dist",0.8846,-24.029042275766507
203,3,"

def solve(x, y):
    hamming_dist = 0
    while x > 0 or y > 0:
        if (x % 2) != (y % 2):
            hamming_dist += 1
        x = x // 2
        y = y // 2
    return hamming_dist",0.8984,-7.6064368546778045
203,4,"

def solve(x, y):
    dist = 0
    while x > 0 or y > 0:
        if x % 2 != y % 2:
            dist += 1
        x = x // 2
        y = y // 2
    return dist",0.9192,-5.225905844328498
203,5,"

def solve(x, y):
    hamming_distance = 0
    while x > 0 or y > 0:
        if x % 2 != y % 2:
            hamming_distance += 1
        x //= 2
        y //= 2
    return hamming_distance",0.9298,-4.6598421306566
204,1,"

def solve(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count",0.9621,-1.3144704079596
204,2,"

def solve(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count",0.9621,-1.3144704079596
204,3,"

def solve(string, char):
    count = 0
    for i in string:
        if i == char:
            count += 1
    return count",0.9278,-2.5467170579342997
204,4,"

def solve(string, char):
    count = 0
    for i in string:
        if i == char:
            count += 1
    return count",0.9278,-2.5467170579342997
204,5,"

def solve(string, character):
    count = 0
    for char in string:
        if char == character:
            count += 1
    return count",0.9425,-2.013724091503
205,1,"

def solve(tuple_list):
    inversions = []
    for tuple in tuple_list:
        inversions.append(tuple[::-1])
    return inversions",0.8389,-5.270903879361001
205,2,"

def solve(tuple_list):
    inversions = []
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            if tuple_list[i][0] > tuple_list[j][0]:
                inversions.append((tuple_list[i][1], tuple_list[j][1]))
    return inversions",0.9251,-5.371118956173603
205,3,"

def solve(tuple_list):
    inversions = []
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            if tuple_list[i][1] > tuple_list[j][1]:
                inversions.append((tuple_list[i], tuple_list[j]))
    return inversions",0.9132,-5.902336862427003
205,4,"

def solve(tuple_list):
    inversions = 0
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            if tuple_list[i][0] > tuple_list[j][0] and tuple_list[i][1] < tuple_list[j][1]:
                inversions += 1
            elif tuple_list[i][0] < tuple_list[j][0] and tuple_list[i][1] > tuple_list[j][1]:
                inversions += 1
    return inversions",0.9501,-5.682632463024102
205,5,"

def solve(tuple_list):
    inversions = []
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            if tuple_list[i][0] > tuple_list[j][0] or tuple_list[i][1] > tuple_list[j][1]:
                inversions.append((tuple_list[i], tuple_list[j]))
    return inversions",0.9243,-6.220968487780599
206,1,"

def solve(tuples):
    result = []
    for i in range(len(tuples)):
        if i != len(tuples)-1:
            result.append(tuples[i] + tuples[i+1])
    return result",0.8509,-7.264716890704
206,2,"

def solve(tuples):
    result = []
    for i in range(len(tuples)-1):
        result.append(tuples[i][1] + tuples[i+1][0])
    return result",0.8345,-7.417080838519
206,3,"

def solve(tuples):
    result = []
    for i in range(len(tuples)):
        if i == len(tuples) - 1:
            break
        else:
            result.append(tuples[i] + tuples[i+1])
    return tuple(result)
",0.8145,-11.285859592772
206,4,"

def solve(tuples):
    result = []
    for i in range(len(tuples)):
        for j in range(len(tuples[i])-1):
            result.append(tuples[i][j] + tuples[i][j+1])
    return result",0.9126,-4.663833048422499
206,5,"

def solve(tuples):
    result = []
    for i in range(len(tuples)):
        if i == len(tuples) - 1:
            break
        temp = tuples[i] + tuples[i+1]
        result.append(temp)
    return result",0.8452,-9.07959410666
207,1,"

def solve(s):
    # Initialize a dictionary to store the count of each character in the string
    char_count = {}
    # Initialize a dictionary to store the longest repeating subsequences
    longest_subseq = {}
    # Loop through each character in the string
    for char in s:
        # If the character is not present in the dictionary, add it with a count of 1
        if char not in char_count:
            char_count[char] = 1
        # If the character is present in the dictionary, increment its count by 1
        else:
            char_count[char] += 1
        # Loop through all the characters in the dictionary
        for key in char_count:
            # If the character count is greater than 1 and the character is not present in the longest_subseq dictionary
            if char_count[key] > 1 and key not in longest_subseq:
                # Add the character to the longest_subseq dictionary with a count of 1
                longest_subseq[key] = 1
            # If the character count is greater than 1 and the character is present in the longest_subseq dictionary
            elif char_count[key] > 1 and key in longest_subseq:
                # Increment the count of the character by 1
                longest_subseq[key] += 1
    # Return the maximum count from the longest_subseq dictionary
    return max(longest_subseq.values())",0.8702,-41.58271646057697
207,2,"

def solve(s):
    n = len(s)
    dp = [[0 for i in range(n+1)] for j in range(n+1)]
    
    for i in range(1, n+1):
        for j in range(1, n+1):
            if s[i-1] == s[j-1] and i != j:
                dp[i][j] = 1 + dp[i-1][j-1]
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    
    return dp[n][n]",0.9523,-6.2135136805280045
207,3,"

def solve(s):
    n = len(s)
    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            if s[i - 1] == s[j - 1] and i != j:
                dp[i][j] = 1 + dp[i - 1][j - 1]
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    return dp[n][n]",0.9631,-5.071134286788002
207,4,"

def solve(s):
    n = len(s)
    dp = [[0 for i in range(n+1)] for j in range(n+1)]
    for i in range(1, n+1):
        for j in range(1, n+1):
            if s[i-1] == s[j-1] and i != j:
                dp[i][j] = 1 + dp[i-1][j-1]
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    return dp[n][n]",0.9589,-5.248663029246498
207,5,"

def solve(s):
    n = len(s)
    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]
    
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            if s[i - 1] == s[j - 1] and i != j:
                dp[i][j] = 1 + dp[i - 1][j - 1]
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])
    
    return dp[n][n]",0.9436,-7.952835226608499
208,1,"

import re

def solve(decimal):
    pattern = r""^-?\d+(\.\d{1,2})?$""
    if re.match(pattern, str(decimal)):
        return True
    else:
        return False",0.8364,-8.038197339623304
208,2,"

def solve(decimal):
    regex = ""^\d+(\.\d{1,2})?$""
    if re.match(regex, decimal):
        return True
    else:
        return False",0.8606,-5.853503276535702
208,3,"

def solve(decimal):
    import re
    pattern = r'^\d+(\.\d{1,2})?$'
    if re.match(pattern, decimal):
        return True
    else:
        return False",0.8633,-6.465549582159501
208,4,"

def solve(decimal):
    pattern = r""^\d+(\.\d{1,2})?$""
    if re.match(pattern, decimal):
        return True
    else:
        return False",0.8871,-4.792824624752
208,5,"

def solve(decimal):
    pattern = r""^-?\d+(\.\d{1,2})?$""
    return bool(re.match(pattern, decimal))",0.7906,-7.518585926632
209,1,"

def solve(heap, new_item):
    heap[0] = heap[-1] #replace the smallest element with the last element in the heap
    heap.pop() #remove the last element
    i = 0
    while True:
        smallest = i
        left = 2*i + 1
        right = 2*i + 2
        if left < len(heap) and heap[left] < heap[smallest]:
            smallest = left
        if right < len(heap) and heap[right] < heap[smallest]:
            smallest = right
        if smallest != i:
            heap[i], heap[smallest] = heap[smallest], heap[i]
            i = smallest
        else:
            break
    heap.append(new_item) #append the new item to the end of the heap
    i = len(heap) - 1
    while True:
        parent = (i-1)//2
        if parent >= 0 and heap[i] < heap[parent]:
            heap[parent], heap[i] = heap[i], heap[parent]
            i = parent
        else:
            break
    return heap",0.8968,-26.01982144958351
209,2,"

def solve(heap, new_item):
    heap[0] = heap[-1]
    heap.pop()
    i = 0
    while True:
        smallest = i
        left_child = 2 * i + 1
        right_child = 2 * i + 2
        if left_child < len(heap) and heap[left_child] < heap[smallest]:
            smallest = left_child
        if right_child < len(heap) and heap[right_child] < heap[smallest]:
            smallest = right_child
        if smallest != i:
            heap[i], heap[smallest] = heap[smallest], heap[i]
            i = smallest
        else:
            break
    heap.append(new_item)
    i = len(heap) - 1
    while i > 0:
        parent = (i - 1) // 2
        if heap[i] < heap[parent]:
            heap[i], heap[parent] = heap[parent], heap[i]
            i = parent
        else:
            break
    return heap",0.9569,-9.6519097550713
209,3,"

def solve(heap, new_item):
    heap[0] = heap[-1]
    heap.pop()
    heapify(heap)
    heap.append(new_item)
    heapify(heap)",0.8642,-5.547486434391
209,4,"

def solve(heap, new_item):
    heap[0] = heap[-1]
    heap.pop()
    i = 0
    while True:
        left = 2 * i + 1
        right = 2 * i + 2
        smallest = i
        if left < len(heap) and heap[left] < heap[i]:
            smallest = left
        if right < len(heap) and heap[right] < heap[smallest]:
            smallest = right
        if smallest == i:
            break
        heap[i], heap[smallest] = heap[smallest], heap[i]
        i = smallest
    heap.append(new_item)
    while True:
        parent = (i - 1) // 2
        if parent < 0 or heap[parent] <= heap[i]:
            break
        heap[i], heap[parent] = heap[parent], heap[i]
        i = parent
    return heap",0.916,-17.114303641413
209,5,"

def solve(heap, new_item):
    heap.remove(min(heap))
    heap.append(new_item)
    return heap",0.8787,-2.9751230439760006
210,1,"

def solve(string):
    import re
    pattern = r'^[a-z0-9]+$'
    if re.match(pattern, string):
        return True
    else:
        return False",0.8731,-5.4292179020713
210,2,"

import re

def solve(string):
    pattern = r""^[a-z0-9]+$""
    if re.match(pattern, string):
        return True
    else:
        return False",0.9295,-2.850171714272999
210,3,"

import re

def solve(string):
    pattern = r""^[a-z0-9]+$""
    if re.match(pattern, string):
        return True
    else:
        return False",0.9295,-2.850171714272999
210,4,"

import re

def solve(string):
  pattern = ""^[a-z0-9]+$""
  if re.match(pattern, string):
    return True
  else:
    return False",0.8774,-4.971211943177298
210,5,"

import re

def solve(string):
    pattern = r""^[a-z0-9]+$""
    if re.match(pattern, string):
        return True
    else:
        return False",0.9295,-2.850171714272999
211,1,"

def solve(n):
    count = 0
    for num in range(1, n+1):
        if (num & 1 == 1) and (num & (1 << (n-1)) != 0):
            count += 1
    return count",0.8886,-6.966528432563001
211,2,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        if (i & (1 << 0)) and (i & (1 << n)):
            count += 1
    return count",0.9418,-3.116948755623001
211,3,"

def solve(n):
    count = 0
    for i in range(n):
        if bin(i)[2:].count(""1"") == 2:
            count += 1
    return count",0.8222,-8.224687223372001
211,4,"

def solve(n):
    count = 0
    
    for i in range(1, n+1):
        if (i & (1 << 0)) and (i & (1 << n)):
            count += 1
    
    return count",0.8664,-7.458552113328
211,5,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        if ((i & (1 << 0)) != 0) and ((i & (1 << n)) != 0):
            count += 1
    return count",0.8969,-6.526086898296997
212,1,"

def solve(n):
    total = 0
    for i in range(1, n+1):
        total += i**4
    return total",0.8996,-3.490114495314001
212,2,"

def solve(n):
    return sum(i**4 for i in range(1, n+1))",0.8443,-3.722651664814
212,3,"

def solve(n):
    return sum([i**4 for i in range(1, n+1)])",0.8493,-3.758144985669999
212,4,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**4
    return sum",0.9698,-1.011439118958
212,5,"

def solve(n):
    return sum([i**4 for i in range(1,n+1)])",0.8311,-4.070367122823
213,1,"

def solve(tuple1, tuple2):
  return tuple1 + tuple2",0.768,-4.2227372802611995
213,2,"

def solve(t1, t2):
    return t1 + t2",0.769,-4.202979084274599
213,3,"

def solve(tup1, tup2):
    new_tup = tup1 + tup2
    return new_tup",0.8318,-4.786898196037001
213,4,"

def solve(tuple1, tuple2):
    return tuple1 + tuple2",0.892,-1.8285703238112008
213,5,"

def solve(str_tuple1, str_tuple2):
    return str_tuple1 + str_tuple2",0.8481,-3.2954367689079995
214,1,"

def solve(radians):
    degrees = radians * (180 / math.pi)
    return degrees",0.9021,-2.060517784817
214,2,"

def solve(radians):
    degrees = radians * (180/3.141592653589793)
    return degrees",0.8494,-4.079513244953
214,3,"

def solve(radians):
    degrees = radians * (180 / math.pi)
    return degrees",0.9021,-2.060517784817
214,4,"

def solve(radians):
    degrees = radians * (180/3.14159265359)
    return degrees",0.8206,-4.745211219983001
214,5,"

def solve(radians):
    degrees = radians * (180 / math.pi)
    return degrees",0.9021,-2.060517784817
215,1,"

def solve(encoded_list):
    decoded_list = []
    for i in range(0, len(encoded_list), 2):
        decoded_list.extend([encoded_list[i+1]] * encoded_list[i])
    return decoded_list",0.9483,-2.4425073171439995
215,2,"

def solve(encoded_list):
    decoded_list = []
    for i in range(len(encoded_list)):
        if i % 2 == 0:
            for j in range(encoded_list[i]):
                decoded_list.append(encoded_list[i+1])
    return decoded_list",0.9317,-3.749517414904
215,3,"

def solve(encoded_list):
    decoded_list = []
    for i in range(len(encoded_list)):
        if i % 2 == 0:
            decoded_list.extend([encoded_list[i+1]]*encoded_list[i])
    return decoded_list

# Example:
# encoded_list = [4, ""a"", 2, ""b"", 3, ""c"", 1, ""d""]
# decoded_list = solve(encoded_list)
# print(decoded_list)
# Output: [""a"", ""a"", ""a"", ""a"", ""b"", ""b"", ""c"", ""c"", ""c"", ""d""]",0.8471,-21.242348557164004
215,4,"

def solve(encoded_list):
  decoded_list = []
  for i in range(0, len(encoded_list), 2):
    decoded_list.extend(encoded_list[i] * [encoded_list[i+1]])
  return decoded_list",0.8465,-7.665502285613
215,5,"

def solve(encoded_list):
    decoded_list = []
    for i in range(len(encoded_list)):
        if i % 2 == 0:
            decoded_list.extend([encoded_list[i+1]] * encoded_list[i])
    return decoded_list",0.9383,-3.184767380514
216,1,"

def solve(nested_list1, nested_list2):
    for sublist in nested_list1:
        if sublist not in nested_list2:
            return False
    return True",0.9019,-3.7180776410413
216,2,"

def solve(list1, list2):
    for item in list1:
        if item not in list2:
            return False
    return True",0.9149,-2.757132810003
216,3,"

def solve(nested_list, subset):
    for item in subset:
        if item not in nested_list:
            return False
    return True",0.8651,-4.347326873983
216,4,"

def solve(list1, list2):
    for sub_list in list1:
        if sub_list not in list2:
            return False
    return True",0.8566,-5.108551633418998
216,5,"

def solve(list1, list2):
    for item in list1:
        if item not in list2:
            return False
    return True",0.9149,-2.757132810003
217,1,"

def solve(string):
    count = {}
    for char in string:
        if char in count:
            return char
        else:
            count[char] = 1
    return None",0.9143,-3.4963199777049994
217,2,"

def solve(string):
    seen = set()
    for char in string:
        if char in seen:
            return char
        seen.add(char)
    return None",0.9052,-3.3849495297676007
217,3,"

def solve(input_str):
    char_dict = {}
    for char in input_str:
        if char in char_dict:
            return char
        else:
            char_dict[char] = 1
    return ""No repeated character found.""",0.8345,-8.866218436689199
217,4,"

def solve(string):
    # create an empty set to keep track of characters seen
    seen = set()
    
    # loop through each character in the string
    for char in string:
        # check if the character has been seen before
        if char in seen:
            # if it has, return the character as the first repeated character
            return char
        else:
            # if not, add the character to the set
            seen.add(char)
    
    # if no repeated character is found, return None
    return None",0.8286,-21.052938180007008
217,5,"

def solve(string):
    char_count = {}
    for char in string:
        if char in char_count:
            return char
        else:
            char_count[char] = 1
    return ""No repeated characters in string.""",0.8271,-9.1132334460684
218,1,"

def solve(num1, num2):
    count = 0
    while(num1 != num2):
        if num1 > num2:
            num1 -= 1
        else:
            num2 -= 1
        count += 1
    return count",0.8823,-7.1348133265410025
218,2,"

def solve(num1, num2):
    count = 0
    while num1 != num2:
        if num1 > num2:
            num1 -= 1
        else:
            num1 *= 2
        count += 1
    return count",0.9085,-5.468980447264501
218,3,"

def solve(a, b):
    count = 0
    while a != b:
        if a > b:
            a /= 2
        else:
            b /= 2
        count += 1
    return count",0.8511,-7.900106254617999
218,4,"

def solve(a, b):
    count = 0
    while a != b:
        if a % 2 == 0 and a > b:
            a = a // 2
            count += 1
        elif a % 2 != 0 and a > b:
            a -= 1
            count += 1
        elif a < b:
            a += 1
            count += 1
    return count",0.9128,-8.572119569246997
218,5,"

def solve(a, b):
    count = 0
    while a != b:
        if a % 2 == 0 and a > b:
            a = a // 2
            count += 1
        elif a % 2 != 0 and a > b:
            a -= 1
            count += 1
        elif a < b:
            a += 1
            count += 1
    return count",0.9128,-8.572119569246997
219,1,"

def solve(tuple, k):
    sorted_tuple = sorted(tuple)
    max_elements = sorted_tuple[-k:]
    min_elements = sorted_tuple[:k]
    return max_elements, min_elements",0.8634,-5.727577224187501
219,2,"

def solve(tup, k):
    max_list = []
    min_list = []
    tup = list(tup)
    for i in range(k):
        max_list.append(max(tup))
        min_list.append(min(tup))
        tup.remove(max(tup))
        tup.remove(min(tup))
    return max_list, min_list",0.8498,-11.226401169838104
219,3,"

def solve(tuple, k):
  sorted_tuple = sorted(tuple)
  max_elements = sorted_tuple[-k:]
  min_elements = sorted_tuple[:k]
  return (max_elements, min_elements)",0.7967,-9.319785344723002
219,4,"

def solve(tup, k):
    max_list = []
    min_list = []
    for i in range(k):
        max_element = max(tup)
        min_element = min(tup)
        max_list.append(max_element)
        min_list.append(min_element)
        tup = list(tup)
        tup.remove(max_element)
        tup.remove(min_element)
        tup = tuple(tup)
    return max_list, min_list",0.9054,-8.740922966624707
219,5,"

def solve(tup, k):
    tup = sorted(tup)
    return tup[:k], tup[-k:]",0.8124,-5.193075588161001
220,1,"

def solve(string, n):
    count = 0
    new_string = ''
    for char in string:
        if char in [' ', ',', '.']:
            count += 1
            if count <= n:
                new_string += ':'
            else:
                new_string += char
        else:
            new_string += char
    return new_string",0.9046,-7.322561536823003
220,2,"

def solve(string, n):
    count = 0
    new_string = """"
    
    for char in string:
        if char == ' ' or char == ',' or char == '.':
            if count < n:
                new_string += ':'
                count += 1
            else:
                new_string += char
        else:
            new_string += char
    
    return new_string",0.8838,-9.879517219787507
220,3,"

def solve(string, n):
    count = 0
    new_string = """"
    for char in string:
        if char == "" "" or char == "","" or char == ""."":
            if count < n:
                new_string += "":""
                count += 1
            else:
                new_string += char
        else:
            new_string += char
    return new_string",0.9456,-4.418029784280999
220,4,"
def solve(string, n):
    count = 0
    result = ''
    for char in string:
        if char == ' ' or char == ',' or char == '.':
            if count < n:
                result += ':'
                count += 1
            else:
                result += char
        else:
            result += char
    return result",0.8914,-8.509822125787004
220,5,"

def solve(string, n):
    count = 0
    result = """"
    
    for char in string:
        if char == ' ' or char == ',' or char == '.':
            count += 1
            if count <= n:
                result += ':'
            else:
                result += char
        else:
            result += char
    
    return result",0.8561,-11.65137879494199
221,1,"

def solve(numbers):
    for num in numbers:
        if num % 2 == 0:
            return num",0.9745,-0.6204353170659999
221,2,"

def solve(numbers):
    for num in numbers:
        if num % 2 == 0:
            return num",0.9745,-0.6204353170659999
221,3,"

def solve(numbers):
    for num in numbers:
        if num % 2 == 0:
            return num",0.9745,-0.6204353170659999
221,4,"

def solve(numbers):
    for num in numbers:
        if num % 2 == 0:
            return num",0.9745,-0.6204353170659999
221,5,"

def solve(numbers):
    for num in numbers:
        if num % 2 == 0:
            return num",0.9745,-0.6204353170659999
222,1,"

def solve(tup):
    if len(tup) == 0:
        return True
    first_type = type(tup[0])
    for i in tup:
        if type(i) != first_type:
            return False
    return True",0.851,-8.3877653827275
222,2,"

def solve(tup):
    return all(isinstance(element, type(tup[0])) for element in tup)",0.7592,-6.337173312341
222,3,"

def solve(tup):
    data_type = type(tup[0])
    for i in tup:
        if type(i) != data_type:
            return False
    return True",0.9071,-3.70541745631
222,4,"

def solve(tup):
    if len(tup) == 0:
        return False
    else:
        first_type = type(tup[0])
        for x in tup:
            if type(x) != first_type:
                return False
        return True",0.7952,-12.602676545685798
222,5,"

def solve(tup):
    return all(type(elem) == type(tup[0]) for elem in tup)",0.8145,-4.923296434937999
223,1,"

def solve(arr):
    n = len(arr)
    mid = n // 2
    if arr[mid] == arr[mid - 1]:
        return arr[mid]
    elif arr[mid] == arr[mid + 1]:
        return arr[mid]
    else:
        return ""No majority element""",0.7737,-16.16385448191799
223,2,"

def solve(nums):
    if len(nums) == 0:
        return -1
    majority = nums[0]
    count = 1
    for i in range(1, len(nums)):
        if nums[i] == majority:
            count += 1
        else:
            count -= 1
        if count == 0:
            majority = nums[i]
            count = 1
    count = 0
    for num in nums:
        if num == majority:
            count += 1
    if count > len(nums) // 2:
        return majority
    else:
        return -1",0.9202,-10.899801413284996
223,3,"

def solve(arr):
    n = len(arr)
    if n == 0:
        return None
    
    majority = arr[n//2]
    count = 0
    for num in arr:
        if num == majority:
            count += 1
    
    if count > n//2:
        return majority
    else:
        return None",0.8722,-9.845444141500698
223,4,"

def solve(arr):
    n = len(arr)
    if n == 0:
        return -1
    curr = arr[0]
    count = 1
    for i in range(1, n):
        if arr[i] == curr:
            count += 1
        else:
            count -= 1
        if count == 0:
            curr = arr[i]
            count = 1
    count = 0
    for i in range(n):
        if arr[i] == curr:
            count += 1
    if count > n//2:
        return curr
    else:
        return -1",0.9086,-12.840274028263488
223,5,"

def solve(arr):
    n = len(arr)
    if n == 0:
        return -1
    elif n == 1:
        return arr[0]
    else:
        majority = n // 2
        count = 1
        for i in range(1,n):
            if arr[i] == arr[i-1]:
                count += 1
            else:
                count = 1
            if count > majority:
                return arr[i]
        return -1",0.8721,-14.099226463116002
224,1,"

def solve(n):
    count = 0
    while n > 0:
        count += n & 1
        n >>= 1
    return count",0.8961,-3.838064452969
224,2,"

def solve(n):
    count = 0
    while n > 0:
        if n & 1:
            count += 1
        n = n >> 1
    return count",0.8961,-4.6071669050765
224,3,"

def solve(num):
    count = 0
    while num > 0:
        if num % 2 == 1:
            count += 1
        num = num // 2
    return count",0.9415,-2.7147599743129995
224,4,"

def solve(n):
    count = 0
    while n != 0:
        if n & 1 == 1:
            count += 1
        n = n >> 1
    return count",0.8677,-6.384016596611
224,5,"

def solve(num):
    count = 0
    while num > 0:
        if num % 2 == 1:
            count += 1
        num = num // 2
    return count",0.9415,-2.7147599743129995
225,1,"

def solve(arr):
    left = 0
    right = len(arr) - 1
    
    while left < right:
        mid = (left + right) // 2
        if arr[mid] > arr[right]:
            left = mid + 1
        else:
            right = mid
    
    return arr[left]",0.9189,-5.839104897994
225,2,"

def solve(arr):
    low = 0
    high = len(arr) - 1
    while low < high:
        mid = (low + high) // 2
        if arr[mid] > arr[high]:
            low = mid + 1
        else:
            high = mid
    return arr[low]",0.9531,-3.4109869958759993
225,3,"

def solve(arr):
    if len(arr) == 0:
        return None
    low = 0
    high = len(arr) - 1
    while low < high:
        mid = (low + high) // 2
        if arr[mid] > arr[mid + 1]:
            return arr[mid + 1]
        elif arr[low] <= arr[mid]:
            low = mid + 1
        else:
            high = mid
    return arr[low]",0.868,-14.717234643979497
225,4,"

def solve(arr):
    l = 0
    r = len(arr) - 1
    while l < r:
        mid = (l + r) // 2
        if arr[mid] < arr[r]:
            r = mid
        else:
            l = mid + 1
    return arr[l]",0.908,-6.659487230840997
225,5,"

def solve(arr):
    low = 0
    high = len(arr) - 1
    if arr[low] < arr[high]:
        return arr[low]
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] > arr[mid+1]:
            return arr[mid+1]
        elif arr[mid] < arr[mid-1]:
            return arr[mid]
        elif arr[mid] < arr[high]:
            high = mid - 1
        else:
            low = mid + 1",0.9024,-12.119840915003
226,1,"

def solve(string):
    new_string = """"
    for i in range(len(string)):
        if i % 2 == 0:
            new_string += string[i]
    return new_string",0.9539,-1.8419353408470005
226,2,"

def solve(string):
    result = """"
    for i in range(len(string)):
        if i % 2 == 0:
            result += string[i]
    return result",0.939,-2.265820417850999
226,3,"

def solve(string):
    new_string = """"
    for i in range(len(string)):
        if i % 2 == 0:
            new_string += string[i]
    return new_string",0.9539,-1.8419353408470005
226,4,"

def solve(string):
    result = """"
    for i in range(len(string)):
        if i % 2 == 0:
            result += string[i]
    return result",0.939,-2.265820417850999
226,5,"

def solve(string):
    new_string = """"
    for i in range(len(string)):
        if i % 2 == 0:
            new_string += string[i]
    return new_string",0.9539,-1.8419353408470005
227,1,"

def solve(x, y, z):
    return min(x, y, z)",0.8209,-3.553339039232001
227,2,"

def solve(a, b, c):
    if a <= b and a <= c:
        return a
    elif b <= a and b <= c:
        return b
    else:
        return c",0.926,-3.3038596873119994
227,3,"

def solve(a, b, c):
    return min(a, b, c)",0.8808,-2.2841123948060003
227,4,"

def solve(num1, num2, num3):
    min_num = num1
    if num2 < min_num:
        min_num = num2
    if num3 < min_num:
        min_num = num3
    return min_num",0.9468,-2.8988012102669
227,5,"

def solve(a, b, c):
    min_num = a
    if b < min_num:
        min_num = b
    if c < min_num:
        min_num = c
    return min_num",0.9321,-3.1626070787280023
228,1,"

def solve(start, end):
    for i in range(start, end+1):
        if i & (i+1) != 0:
            return False
    return True",0.9382,-2.4250817141250005
228,2,"

def solve(start,end):
    for i in range(start,end+1):
        if i & (i+1) == 0:
            return False
    return True",0.8163,-7.305293655941499
228,3,"

def solve(start, end):
    for i in range(start, end+1):
        if i & (i+1) != 0:
            return False
    return True",0.9382,-2.4250817141250005
228,4,"

def solve(start, end):
    for i in range(start, end+1):
        if i & (i+1) == 0:
            return False
    return True",0.8941,-4.251698468041001
228,5,"

def solve(n, l, r):
    for i in range(l, r+1):
        if (n & (1 << i)) == (1 << i):
            return False
    return True",0.7916,-10.049637292829
229,1,"

def solve(arr):
    neg = []
    pos = []
    for num in arr:
        if num < 0:
            neg.append(num)
        else:
            pos.append(num)
    return neg + pos",0.9374,-2.842599877735999
229,2,"

def solve(arr):
    neg_arr = []
    pos_arr = []
    for elem in arr:
        if elem < 0:
            neg_arr.append(elem)
        else:
            pos_arr.append(elem)
    return neg_arr + pos_arr",0.8724,-6.826905372138999
229,3,"

def solve(arr):
    pos = []
    neg = []
    for num in arr:
        if num < 0:
            neg.append(num)
        else:
            pos.append(num)
    return neg + pos",0.9147,-3.9244406249129016
229,4,"

def solve(arr):
    neg = []
    pos = []
    for num in arr:
        if num < 0:
            neg.append(num)
        else:
            pos.append(num)
    return neg + pos",0.9374,-2.842599877735999
229,5,"

def solve(arr):
    i = 0
    j = len(arr) - 1
    while i < j:
        if arr[i] < 0:
            i += 1
        elif arr[j] >= 0:
            j -= 1
        else:
            arr[i], arr[j] = arr[j], arr[i]
            i += 1
            j -= 1
    return arr",0.9482,-4.734113727797
230,1,"

def solve(string, char):
    new_string = """"
    for i in string:
        if i == "" "":
            new_string += char
        else:
            new_string += i
    return new_string",0.9143,-3.943917896022499
230,2,"

def solve(string, char):
    return string.replace("" "", char)",0.8439,-2.545673902049
230,3,"

def solve(string, char):
    new_string = """"
    for i in string:
        if i == "" "":
            new_string += char
        else:
            new_string += i
    return new_string",0.9143,-3.943917896022499
230,4,"

def solve(string, character):
    new_string = """"
    for letter in string:
        if letter == "" "":
            new_string += character
        else:
            new_string += letter
    return new_string",0.9174,-3.7951748456051
230,5,"

def solve(string, char):
    return string.replace(' ', char)",0.7819,-3.690665692275
231,1,"

def solve(triangle):
    for row in range(len(triangle)-2, -1, -1):
        for col in range(len(triangle[row])):
            triangle[row][col] += max(triangle[row+1][col], triangle[row+1][col+1])
    return triangle[0][0]",0.9395,-4.118124933651999
231,2,"

def solve(triangle):
    for i in range(len(triangle) - 2, -1, -1):
        for j in range(len(triangle[i])):
            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])
    return triangle[0][0]",0.9435,-3.9526986029268008
231,3,"

def solve(triangle):
    for i in range(len(triangle)-2, -1, -1):
        for j in range(len(triangle[i])):
            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])
    return triangle[0][0]",0.9647,-2.3697033195785
231,4,"

def solve(triangle):
    for i in range(len(triangle)-2, -1, -1):
        for j in range(i+1):
            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])
    return triangle[0][0]",0.9636,-2.410115259280601
231,5,"

def solve(triangle):
    for i in range(len(triangle) - 2, -1, -1):
        for j in range(len(triangle[i])):
            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])
    return triangle[0][0]",0.9435,-3.9526986029268008
232,1,"

def solve(dataset, n):
    sorted_dataset = sorted(dataset, reverse=True)
    return sorted_dataset[:n]",0.9274,-1.8092664489109995
232,2,"

def solve(dataset, n):
    sorted_dataset = sorted(dataset, reverse=True)
    return sorted_dataset[:n]",0.9274,-1.8092664489109995
232,3,"

def solve(dataset, n):
    sorted_dataset = sorted(dataset, reverse=True)
    return sorted_dataset[:n]",0.9274,-1.8092664489109995
232,4,"

def solve(dataset, n):
    sorted_dataset = sorted(dataset, reverse=True)
    return sorted_dataset[:n]",0.9274,-1.8092664489109995
232,5,"

def solve(dataset, n):
    sorted_list = sorted(dataset, reverse=True)
    return sorted_list[:n]",0.8188,-4.79811693977
233,1,"
def solve(radius, height):
    lateral_area = 2 * radius * height * math.pi
    return lateral_area",0.7124,-8.478513977660004
233,2,"

def solve(radius, height):
    return 2 * 3.14 * radius * height",0.9155,-1.76495607645
233,3,"

def solve(radius, height):
    return 2 * 3.14 * radius * height",0.9155,-1.76495607645
233,4,"

def solve(radius, height):
    lateral_surface_area = 2 * 3.14 * radius * height
    return lateral_surface_area",0.9103,-2.72505327455
233,5,"

def solve(radius, height):
    lateral_surface_area = 2 * 3.14 * radius * height
    return lateral_surface_area",0.9103,-2.72505327455
234,1,"

def solve(side):
    volume = side ** 3
    return volume",0.8781,-2.0801234372699997
234,2,"

def solve(side):
    volume = side ** 3
    return volume",0.8781,-2.0801234372699997
234,3,"

def solve(length):
    return length ** 3",0.7023,-3.887712637987999
234,4,"

def solve(side):
    return side ** 3",0.854,-1.7366205442600002
234,5,"

def solve(side):
    volume = side ** 3
    return volume",0.8781,-2.0801234372699997
235,1,"

def solve(num):
    result = 0
    count = 0
    while(num):
        if(count % 2 == 0):
            result = result << 1
            result += 1
        else:
            result = result << 1
        num = num >> 1
        count += 1
    return result",0.8074,-15.621633989808998
235,2,"

def solve(num):
    mask = 0xAAAAAAAA
    return num | mask",0.8098,-3.79721202721
235,3,"

def solve(num):
    mask = 0b1010101010101010
    return num | mask",0.8458,-3.85307288066
235,4,"

def solve(num):
    result = 0
    for i in range(0, 32, 2):
        result = result | (1 << i)
    return result & num",0.845,-6.737679870125999
235,5,"

def solve(number):
    mask = 0b10101010101010101010101010101010
    return number | mask",0.7566,-7.8080149202
236,1,"

def solve(n):
    count = 0
    while n >= 3:
        count += (n-2) * (n-1) // 2
        n -= 1
    return count",0.7948,-10.334825940976
236,2,"

def solve(n):
    return (n*(n+1)*(2*n+1))//6",0.8749,-2.8066337270100004
236,3,"

def solve(n):
    count = 0
    while n >= 3:
        count += n//3
        n = n//3
    return count",0.8366,-6.24399747203
236,4,"

def solve(n):
    return (n*(n+1)*(n+2))//6",0.852,-3.20357603799
236,5,"

def solve(n):
    return (n * (n + 1) * (2 * n + 1)) // 6",0.8523,-4.476070454039999
237,1,"

def solve(tuples):
    occurences = {}
    for tup in tuples:
        if tup in occurences:
            occurences[tup] += 1
        else:
            occurences[tup] = 1
    
    result = []
    for key, value in occurences.items():
        if value > 1:
            result.append(key)
    
    return result",0.8965,-8.956371417439996
237,2,"

def solve(tuples):
    occurrences = {}
    for record in tuples:
        if record in occurrences:
            occurrences[record] += 1
        else:
            occurrences[record] = 1
    return occurrences",0.8476,-7.6072491985639985
237,3,"

def solve(tuples):
    counts = {}
    for tup in tuples:
        if tup in counts:
            counts[tup] += 1
        else:
            counts[tup] = 1
    
    occurrences = set()
    for key, value in counts.items():
        if value in occurrences:
            continue
        else:
            occurrences.add(value)
    
    result = {}
    for key, value in counts.items():
        if value in occurrences:
            result[key] = value
    
    return result",0.8494,-16.979908028277006
237,4,"

def solve(tuples):
    count = {}
    for tup in tuples:
        if tup in count:
            count[tup] += 1
        else:
            count[tup] = 1
    occurrences = []
    for key, value in count.items():
        if value > 1:
            occurrences.append(key)
    return occurrences",0.8959,-7.801155371543
237,5,"

def solve(tuples):
    occurrences = {}
    for t in tuples:
        if t in occurrences:
            occurrences[t] += 1
        else:
            occurrences[t] = 1
    return occurrences",0.8753,-5.858720377338001
238,1,"

def solve(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            if string[i:j] != """":
                count += 1
    return count",0.9684,-1.6030443068270002
238,2,"

def solve(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            if string[i:j] != '':
                count += 1
    return count",0.9593,-2.0789218408249996
238,3,"

def solve(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            if string[i:j] != '':
                count += 1
    return count",0.9593,-2.0789218408249996
238,4,"

def solve(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            if string[i:j] != """":
                count += 1
    return count",0.9684,-1.6030443068270002
238,5,"

def solve(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            if string[i:j] != '':
                count += 1
    return count",0.9593,-2.0789218408249996
239,1,"

def solve(n, m):
    if n == 1:
        return m
    else:
        count = 0
        for i in range(1, m+1):
            count += solve(n-1, i//2)
        return count",0.9181,-4.611860510923
239,2,"
def solve(n, m): 
    if n == 1: 
        return m 
    else: 
        return m * solve(n-1, m)",0.7032,-12.32488078725
239,3,"

def solve(n, m):
    if n == 1:
        return m
    else:
        count = 0
        for i in range(1, m+1):
            count += solve(n-1, i)
        return count",0.9307,-3.73305554457
239,4,"

def solve(n, m):
    if n == 1:
        return m
    else:
        count = 0
        for i in range(1, m+1):
            count += solve(n-1, i)
        return count",0.9307,-3.73305554457
239,5,"

def solve(n, m):
    if n == 0:
        return 1
    count = 0
    for i in range(1, m+1):
        count += solve(n-1, i//2)
    return count",0.9369,-3.3916083867170004
240,1,"
def solve(list1, list2):
    list1[-1] = list2
    return list1",0.8125,-4.776940284292697
240,2,"

def solve(list1, list2):
    list1[-1] = list2
    return list1",0.9072,-2.2392409180525
240,3,"

def solve(list1, list2):
    list1[-1] = list2
    return list1",0.9072,-2.2392409180525
240,4,"

def solve(list1, list2):
    list1[-1:] = list2
    return list1",0.8806,-2.9249080608014997
240,5,"

def solve(lst, new_lst):
    lst[-1] = new_lst
    return lst",0.8837,-2.4725710770445004
241,1,"

def solve(n):
    return [[['*' for _ in range(n)] for _ in range(n)] for _ in range(n)]",0.8648,-4.067148819611
241,2,"

def solve(n):
    arr = [['*' for i in range(n)] for j in range(n)]
    return [[arr for k in range(n)] for l in range(n)]",0.8349,-6.8580550602749994
241,3,"

def solve(n):
    array_3d = [[['*' for _ in range(n)] for _ in range(n)] for _ in range(n)]
    return array_3d",0.8256,-7.284707615975501
241,4,"

def solve():
    return [[['*' for _ in range(3)] for _ in range(3)] for _ in range(3)]",0.8523,-4.7949653000709995
241,5,"

def solve(n):
    arr = [[['*']*n]*n]*n
    return arr",0.7443,-6.20133491407
242,1,"

def solve(string):
    count = 0
    for char in string:
        count += 1
    return count",0.9578,-1.120741432456
242,2,"

def solve(input_string):
    return len(input_string)",0.7126,-4.0654721073974995
242,3,"

def solve(string):
    count = 0
    for char in string:
        count += 1
    return count",0.9578,-1.120741432456
242,4,"

def solve(string):
    return len(string)",0.8963,-1.0950066610999998
242,5,"

def solve(string):
    count = 0
    for char in string:
        count += 1
    return count",0.9578,-1.120741432456
243,1,"

def solve(lst):
    lst.sort(key=lambda x: lst.count(x[0]), reverse=True)
    return lst",0.8591,-3.6453928506779993
243,2,"

def solve(lst):
    counts = {}
    for tup in lst:
        if tup[0] in counts:
            counts[tup[0]] += 1
        else:
            counts[tup[0]] = 1
    sorted_lst = sorted(lst, key=lambda x: counts[x[0]], reverse=True)
    return sorted_lst",0.9223,-5.826025571024301
243,3,"

def solve(lst):
    counts = {}
    for tup in lst:
        if tup[0] in counts:
            counts[tup[0]] += 1
        else:
            counts[tup[0]] = 1
    
    sorted_lst = []
    for key, value in counts.items():
        sorted_lst.extend([tuple([key]*value)])
    
    return sorted_lst",0.8157,-16.091093310861
243,4,"

def solve(lst):
    return sorted(lst, key=lambda x: x[0])",0.8315,-3.3211408986259996
243,5,"

def solve(lst):
    counts = {}
    for tup in lst:
        if tup[0] not in counts:
            counts[tup[0]] = 1
        else:
            counts[tup[0]] += 1
    sorted_lst = []
    for key, value in sorted(counts.items(), key=lambda x: x[1], reverse=True):
        for tup in lst:
            if tup[0] == key:
                sorted_lst.append(tup)
    return sorted_lst",0.9293,-7.548903695790203
244,1,"

def solve(n):
    next_square = (int(n ** 0.5) + 1) ** 2
    return next_square",0.8406,-5.209197317425001
244,2,"

def solve(n):
    i = 1
    while i*i <= n:
        i += 1
    return i*i",0.8244,-5.405698069470001
244,3,"

def solve(num):
    i = num + 1
    while True:
        if int(i**0.5) == i**0.5:
            return i
        else:
            i += 1",0.8449,-7.582192249608
244,4,"

def solve(n):
    i = n + 1
    while True:
        if i ** 0.5 == int(i ** 0.5):
            return i
        else:
            i += 1",0.8447,-7.7647580528415
244,5,"

def solve(num):
    i = num + 1
    while True:
        if (i ** 0.5).is_integer():
            return i
        else:
            i += 1",0.8437,-7.136170769496501
245,1,"

def solve(arr):
    n = len(arr)
    inc = [0] * n
    dec = [0] * n

    # Find longest increasing subsequence
    inc[0] = arr[0]
    for i in range(1, n):
        inc[i] = arr[i]
        for j in range(i):
            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:
                inc[i] = inc[j] + arr[i]

    # Find longest decreasing subsequence
    dec[n-1] = arr[n-1]
    for i in range(n-2, -1, -1):
        dec[i] = arr[i]
        for j in range(i+1, n):
            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:
                dec[i] = dec[j] + arr[i]

    # Find maximum sum bi-tonic sub-sequence
    max_sum = inc[0] + dec[0] - arr[0]
    for i in range(1, n):
        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])

    return max_sum",0.9222,-20.657602014277092
245,2,"

def solve(arr):
    n = len(arr)
    inc = [arr[0]]
    dec = [arr[n-1]]

    for i in range(1, n):
        inc.append(max(inc[i-1], arr[i]))
        dec.append(max(dec[i-1], arr[n-i-1]))

    dec = dec[::-1]
    ans = 0

    for i in range(n):
        ans = max(ans, inc[i] + dec[i] - arr[i])

    return ans",0.8465,-17.668495260105008
245,3,"

def solve(arr):
    n = len(arr)
    inc = [i for i in arr]
    dec = [i for i in arr]
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:
                inc[i] = inc[j] + arr[i]
    for i in range(n-2, -1, -1):
        for j in range(n-1, i, -1):
            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:
                dec[i] = dec[j] + arr[i]
    max_sum = 0
    for i in range(n):
        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])
    return max_sum",0.9397,-11.204243162971004
245,4,"

def solve(arr):
    n = len(arr)
    # Initializing arrays for storing the maximum increasing and decreasing subsequence ending at each index
    inc = [arr[0]] * n
    dec = [arr[-1]] * n

    # Calculating the maximum increasing subsequence ending at each index
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j]:
                inc[i] = max(inc[i], inc[j] + arr[i])

    # Calculating the maximum decreasing subsequence ending at each index
    for i in range(n-2, -1, -1):
        for j in range(i+1, n):
            if arr[i] > arr[j]:
                dec[i] = max(dec[i], dec[j] + arr[i])

    # Combining the maximum increasing and decreasing subsequence at each index to find the maximum bitonic subsequence
    max_sum = 0
    for i in range(n):
        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])

    return max_sum",0.8743,-31.286672038346
245,5,"

def solve(arr):
    n = len(arr)
    inc = [arr[0]] * n
    dec = [arr[-1]] * n
    for i in range(1, n):
        inc[i] = max(inc[i-1], arr[i])
    for i in range(n-2, -1, -1):
        dec[i] = max(dec[i+1], arr[i])
    res = inc[0] + dec[0] - arr[0]
    for i in range(1, n):
        res = max(res, inc[i] + dec[i] - arr[i])
    return res",0.9276,-10.073633986885998
246,1,"

def solve(num):
    guess = num / 2
    while True:
        new_guess = (guess + (num / guess)) / 2
        if abs(new_guess - guess) < 0.0001:
            return new_guess
        guess = new_guess",0.8769,-7.617555029367998
246,2,"

def solve(n):
    guess = n/2
    while True:
        new_guess = (guess + n/guess)/2
        if abs(new_guess - guess) < 0.00001:
            return new_guess
        guess = new_guess",0.9013,-5.608734675540002
246,3,"

def solve(n):
    x = n
    y = 1
    while(x > y):
        x = (x + y) // 2
        y = n // x
    return x",0.8477,-7.268427875811999
246,4,"

def solve(n):
    guess = n/2
    while abs(guess * guess - n) > 0.0001:
        guess = (guess + n/guess) / 2
    return guess",0.8586,-6.858338541483999
246,5,"

def solve(n):
    x = n
    y = 1
    while x > y:
        x = (x + y) / 2
        y = n / x
    return x",0.9081,-4.243477023261
247,1,"

def solve(s):
    n = len(s)
    dp = [[0 for i in range(n)] for j in range(n)]
    
    for i in range(n):
        dp[i][i] = 1
    
    for l in range(2, n+1):
        for i in range(n-l+1):
            j = i+l-1
            if s[i] == s[j] and l == 2:
                dp[i][j] = 2
            elif s[i] == s[j]:
                dp[i][j] = dp[i+1][j-1] + 2
            else:
                dp[i][j] = max(dp[i+1][j], dp[i][j-1])
    
    return dp[0][n-1]",0.9601,-6.755114028514798
247,2,"

def solve(s):
    n = len(s)
    dp = [[0] * n for _ in range(n)]
    for i in range(n):
        dp[i][i] = 1
    for l in range(2, n + 1):
        for i in range(n - l + 1):
            j = i + l - 1
            if s[i] == s[j] and l == 2:
                dp[i][j] = 2
            elif s[i] == s[j]:
                dp[i][j] = dp[i + 1][j - 1] + 2
            else:
                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])
    i = 0
    j = n - 1
    res = ''
    while i < j:
        if s[i] == s[j]:
            res += s[i]
            i += 1
            j -= 1
        elif dp[i + 1][j] > dp[i][j - 1]:
            i += 1
        else:
            j -= 1
    if i == j:
        res += s[i]
    return res + res[::-1]",0.9445,-15.144682762509287
247,3,"

def solve(s):
    n = len(s)
    dp = [[0 for x in range(n)] for x in range(n)]
    for i in range(n):
        dp[i][i] = 1
    for cl in range(2, n+1):
        for i in range(n-cl+1):
            j = i+cl-1
            if s[i] == s[j] and cl == 2:
                dp[i][j] = 2
            elif s[i] == s[j]:
                dp[i][j] = dp[i+1][j-1] + 2
            else:
                dp[i][j] = max(dp[i][j-1], dp[i+1][j])
    return dp[0][n-1]",0.9636,-6.114012321920999
247,4,"
def solve(s):
    n = len(s)
    dp = [[0 for x in range(n)] for x in range(n)]

    for i in range(n):
        dp[i][i] = 1

    for l in range(2, n+1):
        for i in range(n-l+1):
            j = i+l-1
            if s[i] == s[j] and l == 2:
                dp[i][j] = 2
            elif s[i] == s[j]:
                dp[i][j] = dp[i+1][j-1] + 2
            else:
                dp[i][j] = max(dp[i+1][j], dp[i][j-1])

    return dp[0][n-1]",0.9421,-9.775032130742613
247,5,"

def solve(s):
    n = len(s)
    dp = [[0 for i in range(n)] for j in range(n)]
    for i in range(n):
        dp[i][i] = 1
    for sub_len in range(2, n + 1):
        for i in range(n - sub_len + 1):
            j = i + sub_len - 1
            if s[i] == s[j] and sub_len == 2:
                dp[i][j] = 2
            elif s[i] == s[j]:
                dp[i][j] = 2 + dp[i + 1][j - 1]
            else:
                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])
    return dp[0][n - 1]",0.9368,-11.556794014760497
248,1,"

def solve(n):
    sum = 0
    for i in range(1, n):
        sum += 1/i
    return sum",0.9606,-1.2463893198730005
248,2,"

def solve(n):
    sum = 0
    for i in range(1, n):
        sum += 1/i
    return sum",0.9606,-1.2463893198730005
248,3,"

def solve(n):
    sum = 0
    for i in range(1, n):
        sum += 1/i
    return sum",0.9606,-1.2463893198730005
248,4,"

def solve(n):
    sum = 0
    for i in range(1, n):
        sum += 1/i
    return sum",0.9606,-1.2463893198730005
248,5,"

def solve(n):
    sum = 0
    for i in range(1, n):
        sum += 1/i
    return sum",0.9606,-1.2463893198730005
249,1,"

def solve(arr1, arr2):
    return list(filter(lambda x: x in arr1, arr2))",0.957,-1.054127447025
249,2,"

def solve(arr1, arr2):
    return list(filter(lambda x: x in arr1, arr2))",0.957,-1.054127447025
249,3,"

def solve(arr1, arr2):
    return list(filter(lambda x: x in arr1, arr2))",0.957,-1.054127447025
249,4,"

def solve(arr1, arr2):
    return list(filter(lambda x: x in arr1, arr2))
",0.8215,-4.719145537025
249,5,"

def solve(arr1, arr2):
    return list(filter(lambda x: x in arr1, arr2))",0.957,-1.054127447025
250,1,"

def solve(tup, element):
    count = 0
    for item in tup:
        if item == element:
            count += 1
    return count",0.9371,-2.271967876617399
250,2,"

def solve(tuple, element):
    count = 0
    for i in tuple:
        if i == element:
            count += 1
    return count",0.9309,-2.4361837762217
250,3,"

def solve(tup, element):
    count = 0
    for i in tup:
        if i == element:
            count += 1
    return count",0.9379,-2.2443423833926
250,4,"

def solve(tup, element):
    count = 0
    for item in tup:
        if item == element:
            count += 1
    return count",0.9371,-2.271967876617399
250,5,"

def solve(tup, element):
    count = 0
    for x in tup:
        if x == element:
            count += 1
    return count",0.8661,-5.0316463420040005
251,1,"

def solve(l, element):
    new_list = []
    for i in l:
        new_list.append(element)
        new_list.append(i)
    return new_list",0.7751,-8.660138646594
251,2,"

def solve(list, element):
  result = []
  for item in list:
    result.append(element)
    result.append(item)
  return result",0.7557,-8.402241012684998
251,3,"

def solve(lst, el):
    new_lst = []
    for item in lst:
        new_lst.append(el)
        new_lst.append(item)
    return new_lst",0.8389,-5.974134573308299
251,4,"

def solve(lst, element):
    new_lst = []
    for i in lst:
        new_lst.append(element)
        new_lst.append(i)
    return new_lst",0.9241,-2.682730207633
251,5,"

def solve(lst, element):
    new_list = []
    for i in range(len(lst)):
        new_list.append(element)
        new_list.append(lst[i])
    return new_list",0.8645,-5.388119247653001
252,1,"

def solve(complex_num):
    r = abs(complex_num)
    theta = math.atan2(complex_num.imag, complex_num.real)
    return r, theta",0.8779,-4.559204475203
252,2,"

def solve(complex_num):
    r = abs(complex_num)
    theta = math.atan2(complex_num.imag, complex_num.real)
    return (r, theta)",0.9055,-3.671239971394
252,3,"

def solve(complex_num):
    r = abs(complex_num)
    theta = cmath.phase(complex_num)
    return r, theta",0.8823,-3.75771978104
252,4,"

def solve(complex_num):
    import cmath
    polar_num = cmath.polar(complex_num)
    return polar_num",0.8387,-4.924392437057102
252,5,"

def solve(complex_num):
    r = abs(complex_num)
    theta = math.atan2(complex_num.imag, complex_num.real)
    return r, theta",0.8779,-4.559204475203
253,1,"

def solve(lst):
    count = 0
    for num in lst:
        if isinstance(num, int):
            count += 1
    return count",0.9503,-1.6809245648634998
253,2,"

def solve(list):
    count = 0
    for num in list:
        if isinstance(num, int):
            count += 1
    return count",0.8709,-4.561883513136601
253,3,"

def solve(lst):
    count = 0
    for num in lst:
        if type(num) == int:
            count += 1
    return count",0.9687,-1.0800570341025
253,4,"

def solve(lst):
    count = 0
    for item in lst:
        if type(item) == int:
            count += 1
    return count",0.9083,-3.271878240870101
253,5,"

def solve(lst):
    count = 0
    for num in lst:
        if isinstance(num, int):
            count += 1
    return count",0.9503,-1.6809245648634998
254,1,"

def solve(string):
    words = string.split()
    result = []
    for word in words:
        if word.startswith('a') or word.startswith('e'):
            result.append(word)
    return result",0.9488,-2.209149481977
254,2,"

def solve(string):
    words = string.split()
    result = []
    for word in words:
        if word[0] == 'a' or word[0] == 'e':
            result.append(word)
    return result",0.9619,-1.8621873421203996
254,3,"

def solve(string):
    words = string.split()
    result = []
    for word in words:
        if word.startswith('a') or word.startswith('e'):
            result.append(word)
    return result",0.9488,-2.209149481977
254,4,"

def solve(string):
    words = string.split()
    result = []
    for word in words:
        if word[0] == 'a' or word[0] == 'e':
            result.append(word)
    return result",0.9619,-1.8621873421203996
254,5,"

def solve(string):
    result = []
    words = string.split()
    for word in words:
        if word[0].lower() == 'a' or word[0].lower() == 'e':
            result.append(word)
    return result",0.8917,-5.9621522225899986
255,1,"

def solve(colors, num):
    result = []
    def generate_combinations(curr, remaining):
        if len(curr) == num:
            result.append(curr)
            return
        for color in colors:
            generate_combinations(curr + [color], remaining - 1)
    
    generate_combinations([], num)
    return result",0.8003,-14.925163289454
255,2,"

def solve(colours, num):
    combinations = []
    def generate_combinations(curr_comb, num):
        if len(curr_comb) == num:
            combinations.append(curr_comb)
            return
        for c in colours:
            generate_combinations(curr_comb + [c], num)
    generate_combinations([], num)
    return combinations",0.7982,-15.323639345482
255,3,"

def solve(n):
    colors = ['red', 'blue', 'green']
    combinations = []
    
    if n == 1:
        return colors
    
    for i in range(n):
        if i == 0:
            for color in colors:
                combinations.append([color])
        else:
            new_combinations = []
            for combination in combinations:
                for color in colors:
                    new_combinations.append(combination + [color])
            combinations = new_combinations
    
    return combinations",0.8583,-15.432813239363
255,4,"

def solve(colours, num):
    if num == 0:
        return [[]]
    else:
        combos = []
        for c in colours:
            for combo in solve(colours, num-1):
                combos.append([c] + combo)
        return combos",0.8451,-9.424042860049
255,5,"

def solve(colors, num):
    result = []
    if num == 1:
        return colors
    else:
        for i in range(len(colors)):
            previous = colors[i]
            for j in range(len(colors)):
                temp = previous + colors[j]
                for k in range(len(colors)):
                    result.append(temp + colors[k])
        return result[:len(result)-len(colors)**(num-1)]",0.661,-35.604563774217006
256,1,"

def solve(n):
    count = 0
    for num in range(2, n):
        is_prime = True
        for i in range(2, num):
            if num % i == 0:
                is_prime = False
                break
        if is_prime:
            count += 1
    return count",0.9507,-3.487171939611498
256,2,"

def solve(n):
    count = 0
    for num in range(2,n):
        if all(num % i != 0 for i in range(2,num)):
            count += 1
    return count",0.8499,-7.482217138507699
256,3,"

def solve(num):
    count = 0
    for i in range(2, num):
        if all(i % j != 0 for j in range(2, i)):
            count += 1
    return count",0.8853,-5.849668075551602
256,4,"

def solve(n):
    count = 0
    for num in range(2, n):
        is_prime = True
        for i in range(2, num):
            if num % i == 0:
                is_prime = False
                break
        if is_prime:
            count += 1
    return count",0.9507,-3.487171939611498
256,5,"

def solve(num):
    count = 0
    for i in range(2, num):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            count += 1
    return count",0.9571,-3.0224509144488003
257,1,"

def solve(a, b):
    a, b = b, a
    return a, b",0.9314,-1.4920352861980002
257,2,"

def solve(a, b):
    a, b = b, a
    return a, b",0.9314,-1.4920352861980002
257,3,"

def solve(a, b):
    temp = a
    a = b
    b = temp
    return a, b",0.9152,-2.3927329639789994
257,4,"

def solve(num1, num2):
    num1, num2 = num2, num1
    return num1, num2",0.9093,-2.758030047369001
257,5,"

def solve(a,b):
  temp = a
  a = b
  b = temp
  return a,b",0.8323,-4.589990630699999
258,1,"

def solve(lst):
    return len(list(filter(lambda x: x%2 != 0, lst)))",0.9228,-1.7669326844770004
258,2,"

def solve(lst):
    return len(list(filter(lambda x: x % 2 != 0, lst)))",0.9295,-1.6819530911910006
258,3,"

def solve(lst):
    count = 0
    for num in lst:
        if (lambda x: x%2 != 0)(num):
            count += 1
    return count",0.8327,-7.5086939422466
258,4,"

def solve(lst):
    return len(list(filter(lambda x: x % 2 != 0, lst)))",0.9295,-1.6819530911910006
258,5,"

def solve(lst):
    return len(list(filter(lambda x: x % 2 == 1, lst)))",0.8709,-3.179531258947
259,1,"

def solve(tup1, tup2):
    return max(tup1) + max(tup2)",0.8623,-3.4061652370183
259,2,"

def solve(tuple1, tuple2):
    return max(tuple1) + max(tuple2)",0.8591,-3.038105265602
259,3,"

def solve(tup1, tup2):
    return tuple([max(tup1[i], tup2[i]) for i in range(len(tup1))])",0.8037,-7.431681271725302
259,4,"

def solve(tuple1, tuple2):
    return tuple(max(x, y) for x, y in zip(tuple1, tuple2))",0.8467,-4.825975992530999
259,5,"

def solve(tuple1, tuple2):
    return tuple(map(max, tuple1, tuple2))",0.7878,-5.0088723235699995
260,1,"

def is_prime(n):
    if n <= 1:
        return False
    elif n == 2:
        return True
    elif n % 2 == 0:
        return False
    else:
        for i in range(3, int(n**0.5) + 1, 2):
            if n % i == 0:
                return False
        return True

def solve(n):
    count = 0
    num = 1
    while count < n:
        num += 1
        if is_prime(num):
            if is_prime(2**num - 1):
                count += 1
    return num",0.9132,-12.627729000667992
260,2,"

def solve(n):
    prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 31, 43, 61, 67, 79, 97, 103, 109, 113, 127, 163, 181, 191, 199, 313, 331, 367, 379, 383, 397, 409, 421, 433, 463, 487, 541, 577, 601, 607, 613, 617, 631, 641, 673, 757, 787, 823, 883, 911, 997, 1009, 1021, 1033, 1039, 1093, 1151, 1321, 1361, 1429, 1451, 1489, 1601, 1621, 1663, 1667, 1723, 1741, 1801, 1823, 1861, 1867, 1879, 1949, 1951, 1987, 2017, 2027, 2063, 2081, 2087, 2113, 2131, 2137, 2143, 2153, 2179, 2239, 2281, 2341, 2371, 2383, 2549, 2579, 2591, 2609, 2617, 2633, 2647, 2657, 2677, 2687, 2693, 2699, 2707, 2711, 2729, 2741, 2749, 2753, 2791, 2797, 2801, 2917, 2927, 2939, 2957, 2963, 2969, 2971, 3001, 3019, 3023, 3037, 3049, 3079, 3083, 3089, 3109, 3119, 3167, 3191, 3203, 3209, 3251, 3257, 3271, 3299, 3301, 3329, 3331, 3337, 3359, 3373, 3389, 3391, 3407, 3433, 3449, 3457, 3463, 3467, 3491, 3511, 3517, 3527, 3533, 3541, 3557, 3581, 3583, 3593, 3613, 3637, 3673, 3719, 3739, 3793, 3803, 3823, 3827, 3833, 3851, 3863, 3869, 3911, 3929, 3931, 3937, 4019, 4051, 4057, 4073, 4091, 4099, 4111, 4127, 4133, 4157, 4177, 4201, 4211, 4219, 4229, 4231, 4237, 4253, 4259, 4261, 4267, 4273, 4283, 4297, 4337, 4349, 4357, 4367, 4373, 4397, 4423, 4427, 4439, 4441, 4447, 4451, 4463, 4481, 4493, 4517, 4547, 4561, 4583, 4621, 4637, 4643, 4651, 4679, 4703, 4729, 4759, 4799, 4801, 4807, 4819, 4831, 4931, 4951, 4969, 4977, 4993, 5003, 5009, 5011, 5039, 5051, 5059, 5089, 5099, 5119, 5129, 5171, 5189, 5197, 5297, 5309, 5321, 5333, 5347, 5381, 5417, 5449, 5471, 5501, 5519, 5569, 5581, 5623, 5657, 5681, 5693, 5701, 5711, 5723, 5749, 5761, 5801, 5827, 5849, 5867, 5927, 5939, 5981, 6011, 6067, 6133, 6163, 6197, 6269, 6287, 6301, 6329, 6359, 6379, 6427, 6449, 6469, 6637, 6653, 6703, 6827, 6857, 6899, 6949, 6961, 6967, 7013, 7039, 7079, 7103, 7121, 7141, 7159, 7219, 7243, 7271, 7283, 7309, 7321, 7349, 7411, 7433, 7451, 7457, 7477, 7489, 7547, 7573, 7583, 7607, 7643, 7687, 7723, 7753, 7757, 7759, 7789, 7841, 7853, 7877, 7901, 7963, 8009, 8039, 8059, 8069, 8089, 8171, 8209, 8237, 8309, 8317, 8369, 8387, 8423, 8599, 8609, 8627, 8633, 8641, 8663, 8699, 8713, 8741, 8753, 8803, 8831, 8861, 8867, 8923, 8939, 8941, 8951, 8963, 9013, 9041, 9059, 9091, 9101, 9127, 9161, 9173, 9221, 9227, 9241, 9281, 9283, 9293, 9341, 9349, 9371, 9397, 9419, 9421, 9437, 9439, 9467, 9479, 9629, 9643, 9661, 9677, 9689, 9743, 9767, 9791, 9839, 9871, 9901, 9923, 9941, 9973, 10007, 10009, 10039, 10061, 10091, 10133, 10169, 10183, 10223, 10243, 10273, 10301, 10333, 10343, 10357, 10399, 10429, 10457, 10499, 10501, 10531, 10559, 10567, 10589, 10657, 10663, 10687, 10711, 10729, 10733, 10739, 10771, 10781, 10789, 10889, 10903, 10909, 10937, 10987, 11027, 11047, 11057, 11069, 11087, 11113, 11161, 11171, 11197, 11213, 11261, 11273, 11287, 11329, 11353, 11369, 11383, 11399, 11411, 11437, 11461, 11483, 11503, 11527, 11549, 11587, 11617, 11657, 11689, 11701, 11719, 11743, 11777, 11801, 11831, 11863, 11887, 11903, 11923, 11939, 11959, 11971, 11981, 12011, 12043, 12071, 12097, 12107, 12109, 12143, 12157, 12197, 12239, 12263, 12281, 12343, 12391, 12397, 12409, 12421, 12433, 12473,",0.6374,-900.8370141213863
260,3,"

def solve(n):
    count = 0
    num = 1
    while count < n:
        num += 1
        if is_prime(n):
            if is_nsw_prime(num):
                count += 1
    return num

def is_prime(n):
    if n == 2:
        return True
    if n < 2 or n%2 == 0:
        return False
    for i in range(3, int(n**0.5)+1, 2):
        if n%i == 0:
            return False
    return True

def is_nsw_prime(n):
    if n == 1:
        return False
    if n == 2:
        return True
    if n%2 == 0:
        return False
    for i in range(3, int(n**0.5)+1, 2):
        if n%i == 0:
            return False
    return (2**(n-1))%n == 1",0.8717,-28.969088650435
260,4,"

def nth_newman_shanks_williams(n):
    count = 0
    num = 0
    while count < n:
        num += 1
        if is_prime(nth_williams(num)):
            count += 1
    return nth_williams(num)

def nth_williams(n):
    return (2**n) - 1

def is_prime(n):
    if n == 2:
        return True
    if n < 2:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

def solve(n):
    return nth_newman_shanks_williams(n)",0.8086,-33.150100813751685
260,5,"

def solve(n):
    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]

    def is_prime(num):
        for prime in primes:
            if num % prime == 0:
                return False
        return True

    def get_next_prime():
        num = primes[-1] + 1
        while True:
            if is_prime(num):
                primes.append(num)
                return num
            num += 1

    def newman_shanks_williams(prime):
        return (2 ** prime) - 1

    while len(primes) < n:
        next_prime = get_next_prime()
        newman_shanks_williams_prime = newman_shanks_williams(next_prime)
        if is_prime(newman_shanks_williams_prime):
            primes.append(newman_shanks_williams_prime)

    return primes[n - 1]",0.8381,-35.13767231973433
261,1,"

def solve(tuples):
    #convert tuple to list
    lst = list(tuples)
    #divide first two elements of list
    result = lst[0][0] / lst[0][1]
    #iterate through remaining elements of list and divide by result
    for i in range(1, len(lst)):
        result = result / lst[i][0]
    return result",0.6842,-31.123129317115005
261,2,"

def solve(tuples):
    result = tuples[0][0] / tuples[1][0]
    return result",0.8612,-3.73551367985
261,3,"

def solve(tup1, tup2):
    num1 = tup1[0]
    num2 = tup1[1]
    num3 = tup2[0]
    num4 = tup2[1]
    return (num1/num3, num2/num4)",0.8667,-8.725338217460504
261,4,"

def solve(tuples):
    result = tuples[0]
    for i in range(1, len(tuples)):
        result = (result[0] / tuples[i][0], result[1] / tuples[i][1])
    return result",0.8948,-5.778176307748997
261,5,"

def solve(tuples):
    result = tuples[0][0] / tuples[0][1]
    for i in range(1, len(tuples)):
        result /= tuples[i][0] / tuples[i][1]
    return result",0.9279,-3.818678117724
262,1,"

def solve(lst, length):
    return lst[:length], lst[length:]",0.8731,-2.1703850523579997
262,2,"
def solve(lst, length):
    return [lst[:length], lst[length:]]",0.7765,-4.554067642454001
262,3,"

def solve(lst, length):
    return [lst[:length], lst[length:]]",0.913,-1.6391946630630003
262,4,"

def solve(lst, length):
    return [lst[:length], lst[length:]]",0.913,-1.6391946630630003
262,5,"

def solve(lst, length):
    return lst[:length], lst[length:]",0.8731,-2.1703850523579997
263,1,"

def solve(dict1, dict2):
    dict_merged = dict1.copy()
    dict_merged.update(dict2)
    return dict_merged",0.8576,-4.299994698396301
263,2,"

def solve(dict1, dict2):
    merged_dict = {}
    for key in dict1:
        merged_dict[key] = dict1[key]
    for key in dict2:
        merged_dict[key] = dict2[key]
    return merged_dict",0.9197,-4.354012389926498
263,3,"

def solve(dict1, dict2):
    dict3 = dict1.copy()
    dict3.update(dict2)
    return dict3",0.9213,-2.295632814488
263,4,"

def solve(dict1, dict2):
    merged_dict = dict1.copy()
    merged_dict.update(dict2)
    return merged_dict",0.947,-1.5235305912929995
263,5,"

def solve(dict1, dict2):
    merged_dict = dict1.copy()
    merged_dict.update(dict2)
    return merged_dict",0.947,-1.5235305912929995
264,1,"

def solve(human_age):
    if human_age <= 0:
        return ""Invalid age. Please enter a positive number.""
    elif human_age == 1:
        return ""Your dog is 15 years old in dog years.""
    elif human_age == 2:
        return ""Your dog is 24 years old in dog years.""
    else:
        dog_age = 24 + (human_age - 2) * 4
        return ""Your dog is "" + str(dog_age) + "" years old in dog years.""",0.9003,-11.872145134303
264,2,"

def solve(human_years):
    if human_years <= 2:
        dog_years = human_years * 10.5
    else:
        dog_years = (2 * 10.5) + (human_years - 2) * 4
    return dog_years",0.9006,-6.069364337104199
264,3,"

def solve(human_age):
    if human_age <= 0:
        return ""Invalid age. Please enter a positive number.""
    elif human_age == 1:
        return ""The dog's age is 15 in dog's years.""
    elif human_age == 2:
        return ""The dog's age is 24 in dog's years.""
    else:
        dog_age = 24 + (human_age - 2) * 4
        return ""The dog's age is {} in dog's years."".format(dog_age)",0.9039,-11.415521623323198
264,4,"

def solve(human_years):
    if human_years <= 0:
        return ""Invalid input. Please enter a positive number.""
    elif human_years == 1:
        return ""The dog's age in dog years is 15.""
    elif human_years == 2:
        return ""The dog's age in dog years is 24.""
    else:
        dog_years = 24 + (human_years - 2) * 4
        return ""The dog's age in dog years is {}."".format(dog_years)",0.8959,-12.0947905962525
264,5,"

def solve(human_years):
    if human_years <= 2:
        dog_years = human_years * 10.5
    else:
        dog_years = 21 + (human_years - 2) * 4
    return dog_years",0.9431,-3.0454133719326997
265,1,"

def solve(lst, n):
    return [lst[i:i+n] for i in range(0, len(lst), n)]",0.9285,-2.0032887863555
265,2,"

def solve(lst, n):
    result = []
    for i in range(0, len(lst), n):
        result.append(lst[i:i+n])
    return result",0.962,-1.3564818890610002
265,3,"

def solve(lst, n):
    result = []
    for i in range(0, len(lst), n):
        result.append(lst[i:i+n])
    return result",0.962,-1.3564818890610002
265,4,"

def solve(lst, n):
    result = []
    for i in range(0, len(lst), n):
        result.append(lst[i:i+n])
    return result",0.962,-1.3564818890610002
265,5,"

def solve(lst, n):
    return [lst[i:i+n] for i in range(0, len(lst), n)]",0.9285,-2.0032887863555
266,1,"

def solve(side):
    return 4 * (side ** 2)",0.8862,-1.932700174257
266,2,"

def solve(side):
    return 4 * side**2",0.8007,-2.89011781322
266,3,"

def solve(side):
    return 4 * (side ** 2)",0.8862,-1.932700174257
266,4,"

def solve(side):
    return 4 * (side * side)",0.7853,-3.6252667571
266,5,"

def solve(side):
    return 4 * side * side",0.8556,-2.02702424281
267,1,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i-1)**2
    return sum",0.9286,-2.7401352758699993
267,2,"

def solve(n):
    sum = 0
    for i in range(1, 2*n, 2):
        sum += i*i
    return sum",0.9338,-2.396088999825001
267,3,"

def solve(n):
    sum = 0
    for i in range(1, 2*n, 2):
        sum += i*i
    return sum",0.9338,-2.396088999825001
267,4,"

def solve(n):
    sum = 0
    for i in range(1, n*2, 2):
        sum += i*i
    return sum",0.8984,-3.750047986902
267,5,"

def solve(n):
    sum = 0
    for i in range(1,n+1):
        sum += (2*i-1)**2
    return sum",0.9059,-3.558509356295
268,1,"

def solve(n):
    return n * (n + 1) / 2",0.8425,-3.0859316461029995
268,2,"

def solve(n):
    return n**2 + n + 1",0.8021,-3.307702544
268,3,"

def solve(n):
    return n * (n + 1) / 2 + 1",0.8407,-3.642885741043
268,4,"

def solve(n):
    return (6*n*(n-1)+1)",0.7558,-4.758629413182001
268,5,"

def solve(n):
    return n**2 + n + 1",0.8021,-3.307702544
269,1,"

def solve(char):
    return ord(char)",0.9492,-0.5211979527920001
269,2,"

def solve(char):
    return ord(char)",0.9492,-0.5211979527920001
269,3,"

def solve(char):
    return ord(char)",0.9492,-0.5211979527920001
269,4,"

def solve(char):
    return ord(char)

# Test Cases
print(solve('A')) # 65
print(solve('a')) # 97
print(solve('1')) # 49",0.757,-11.972552812200298
269,5,"

def solve(char):
    return ord(char)",0.9492,-0.5211979527920001
270,1,"

def solve(numbers):
    sum = 0
    for i in range(1, len(numbers), 2):
        if numbers[i]%2 == 0:
            sum += numbers[i]
    return sum",0.8544,-6.9232581364195
270,2,"

def solve(lst):
    sum = 0
    for i in range(1, len(lst)+1):
        if i % 2 == 0 and lst[i-1] % 2 == 0:
            sum += lst[i-1]
    return sum",0.9162,-4.986384069081499
270,3,"

def solve(nums):
    sum = 0
    for i in range(len(nums)):
        if i % 2 == 0 and nums[i] % 2 == 0:
            sum += nums[i]
    return sum",0.9258,-3.7029130489895983
270,4,"

def solve(numbers):
    sum = 0
    for i in range(1, len(numbers)+1):
        if i % 2 == 0 and numbers[i-1] % 2 == 0:
            sum += numbers[i-1]
    return sum

#Example:
numbers = [1, 2, 3, 4, 5, 6, 7, 8]
print(solve(numbers))

#Output: 12",0.8206,-19.181930460513698
270,5,"

def solve(nums):
    sum = 0
    for i in range(1, len(nums), 2):
        if nums[i]%2 == 0:
            sum += nums[i]
    return sum",0.8597,-6.653893399134
271,1,"
def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i)**5
    return sum",0.89,-4.078115621467001
271,2,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i)**5
    return sum",0.9617,-1.365448873592
271,3,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i)**5
    return sum",0.9617,-1.365448873592
271,4,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i)**5
    return sum",0.9617,-1.365448873592
271,5,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        num = 2 * i
        sum += num ** 5
    return sum",0.8409,-7.280173388596
272,1,"

def solve(records):
    return [record[-1] for record in records]",0.8782,-2.2079743920340005
272,2,"

def solve(records):
    rear_elements = []
    for record in records:
        rear_elements.append(record[-1])
    return rear_elements",0.8916,-3.2136055215779993
272,3,"

def solve(records):
    if not records:
        return None
    return records[-1][-1]",0.7587,-6.075067901277
272,4,"

def solve(records):
    return [record[-1] for record in records]",0.8782,-2.2079743920340005
272,5,"

def solve(records):
    return [t[-1] for t in records]",0.7987,-3.821458434735
273,1,"

def solve(tuple1, tuple2):
    result = ()
    for i in range(len(tuple1)):
        result += (tuple1[i] - tuple2[i],)
    return result",0.9447,-2.2199602442318005
273,2,"

def solve(t1, t2):
    result = []
    for i in range(len(t1)):
        result.append(t1[i] - t2[i])
    return tuple(result)",0.911,-3.636290744751801
273,3,"

def solve(tuple1, tuple2):
    result = []
    for i in range(len(tuple1)):
        result.append(tuple1[i] - tuple2[i])
    return tuple(result)",0.9443,-2.2340665807248015
273,4,"

def solve(tup1, tup2):
    result = ()
    for i in range(len(tup1)):
        result += (tup1[i] - tup2[i],)
    return result",0.9469,-2.292896456871
273,5,"

def solve(tuple1, tuple2):
    result = []
    for i in range(len(tuple1)):
        result.append(tuple1[i] - tuple2[i])
    return tuple(result)",0.9443,-2.2340665807248015
274,1,"

def solve(n):
    total = 0
    for i in range(n+1):
        if i % 2 == 0:
            total += (math.factorial(n)/(math.factorial(i)*math.factorial(n-i)))
    return total",0.8606,-7.959716669269
274,2,"

def solve(n):
    sum = 0
    for i in range(n+1):
        if i % 2 == 0:
            sum += math.factorial(n) / (math.factorial(i) * math.factorial(n-i))
    return sum",0.9152,-4.876067999270997
274,3,"

def solve(n):
    result = 0
    for i in range(n+1):
        if i % 2 == 0:
            result += (n choose i)
    return result",0.8783,-5.320662937708999
274,4,"

def solve(n):
    total = 0
    for i in range(n+1):
        if i % 2 == 0:
            total += nCr(n,i)
    return total",0.8472,-6.796154504872
274,5,"

def solve(n):
  sum = 0
  for i in range(0, n+1):
    if i % 2 == 0:
      sum += nCr(n, i)
  return sum",0.8135,-9.289181965444998
275,1,"

def solve(arr):
    removed = arr.pop()
    return arr.index(removed) + 1",0.8237,-4.071834662943999
275,2,"

def solve(arr):
  removed = arr.pop()
  return arr.index(removed)",0.754,-5.082706531815999
275,3,"

def solve(arr):
    removed = arr.pop()
    return arr.index(removed) + 1",0.8237,-4.071834662943999
275,4,"

def solve(arr):
    arr_copy = arr.copy()
    last_removed = arr_copy.pop()
    return arr.index(last_removed)",0.8087,-5.734162258446001
275,5,"

def solve(arr):
    last_removed = arr[len(arr)-1]
    return arr.index(last_removed)",0.8009,-4.883748022850001
276,1,"

def solve(radius, height):
    volume = 3.14159265359 * radius**2 * height
    return volume",0.7844,-6.555522121211001
276,2,"

def solve(radius, height):
    pi = 3.14159
    volume = pi * radius**2 * height
    return volume",0.9254,-2.324736146431
276,3,"

def solve(radius, height):
    pi = 3.141592653589793
    volume = pi * radius ** 2 * height
    return volume",0.8492,-5.5563662181749995
276,4,"

def solve(radius, height):
    pi = 3.14159
    volume = pi * (radius ** 2) * height
    return volume",0.9249,-2.575545228836
276,5,"

def solve(radius, height):
    volume = 3.14159 * (radius**2) * height
    return volume",0.8546,-4.242955163604001
277,1,"

def solve(dictionary, condition):
    filtered_dict = {}
    for key, value in dictionary.items():
        if condition(value):
            filtered_dict[key] = value
    return filtered_dict",0.8935,-4.278828623534
277,2,"

def solve(dictionary, filter_value):
    filtered_dict = {key: value for key, value in dictionary.items() if value == filter_value}
    return filtered_dict",0.8389,-5.973736092293002
277,3,"

def solve(dictionary, value):
    return {key: val for key, val in dictionary.items() if val == value}",0.8607,-3.900514107926
277,4,"

def solve(dictionary, value):
    return {key: val for key, val in dictionary.items() if val == value}",0.8607,-3.900514107926
277,5,"

def solve(dictionary, filter_value):
    filtered_dict = {}
    for key, value in dictionary.items():
        if value == filter_value:
            filtered_dict[key] = value
    return filtered_dict",0.9474,-2.2150879044089997
278,1,"

def solve(tuple, record):
    count = 0
    for item in tuple:
        if item == record:
            return count
        count += 1",0.8624,-5.031522410376
278,2,"

def solve(tuple, record):
    count = 0
    for element in tuple:
        if element == record:
            return count
        else:
            count += 1",0.9128,-3.3738608248189
278,3,"

def solve(tup, record):
    count = 0
    for i in range(len(tup)):
        if tup[i] == record:
            return count
        else:
            count += 1",0.9255,-3.3277775010189985
278,4,"

def solve(tuple, record):
    count = 0
    for element in tuple:
        if element == record:
            return count
        else:
            count += 1
    return -1",0.89,-4.8941459018888995
278,5,"

def solve(tuple, record):
    count = 0
    for elem in tuple:
        if elem == record:
            return count
        else:
            count += 1
    return 0",0.7777,-10.5579389348959
279,1,"

def solve(n):
    return n * (9 * n - 7)",0.8503,-2.7568643610300008
279,2,"

def solve(n):
    return n*(7*n-5)//2",0.7913,-3.5111982915300004
279,3,"

def solve(n):
    return n * (7 * n - 5)",0.8781,-2.20915050773
279,4,"

def solve(n):
    return n * (7 * n - 5)",0.8781,-2.20915050773
279,5,"

def solve(n):
    return n*(9*n-7)",0.7956,-3.20035745063
280,1,"

def solve(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1",0.9566,-1.375868924389
280,2,"

def solve(arr, element):
    for i in range(len(arr)):
        if arr[i] == element:
            return i
    return -1 ",0.846,-5.350088543250701
280,3,"

def solve(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1",0.9566,-1.375868924389
280,4,"

def solve(arr, target):
    for i in range(len(arr)): 
        if arr[i] == target: 
            return i 
    return -1",0.8046,-7.175311202351
280,5,"

def solve(array, element):
    for i in range(len(array)):
        if array[i] == element:
            return i
    return -1",0.8915,-3.5612921928560004
281,1,"

def solve(lst):
    if len(lst) == len(set(lst)):
        return True
    else:
        return False",0.9601,-1.017026470933
281,2,"

def solve(lst):
    if len(lst) == len(set(lst)):
        return True
    else:
        return False",0.9601,-1.017026470933
281,3,"

def solve(lst):
    if len(lst) == len(set(lst)):
        return True
    else:
        return False",0.9601,-1.017026470933
281,4,"

def solve(lst):
    if len(lst) == len(set(lst)):
        return True
    else:
        return False",0.9601,-1.017026470933
281,5,"

def solve(lst):
    if len(lst) == len(set(lst)):
        return True
    else:
        return False",0.9601,-1.017026470933
282,1,"

def solve(l1, l2):
    return list(map(lambda x, y: x-y, l1, l2))",0.7934,-6.247497169273702
282,2,"

def solve(list1, list2):
    return list(map(lambda x, y: x - y, list1, list2))",0.9428,-1.6481772333950997
282,3,"

def solve(list1, list2):
    return list(map(lambda x,y: x-y, list1, list2))",0.9336,-1.7870211315841
282,4,"

def solve(list1, list2):
    return list(map(lambda x,y: x-y, list1, list2))",0.9336,-1.7870211315841
282,5,"

def solve(list1, list2):
    return list(map(lambda x,y: x-y, list1, list2))",0.9336,-1.7870211315841
283,1,"
def solve(n):
    freq = [0] * 10

    while n > 0:
        digit = n % 10
        freq[digit] += 1
        n //= 10

    for i in range(10):
        if freq[i] > i:
            return False
    return True",0.8374,-12.06889541553099
283,2,"

def solve(num):
    str_num = str(num)
    for digit in str_num:
        if str_num.count(digit) > int(digit):
            return False
    return True",0.8407,-6.769082569753
283,3,"

def solve(number):
    digits = [int(d) for d in str(number)]
    for digit in digits:
        if digits.count(digit) > digit:
            return False
    return True",0.8593,-6.219484983236001
283,4,"

def solve(num):
    freq = {}
    for digit in str(num):
        freq[digit] = freq.get(digit, 0) + 1
    
    for digit in freq:
        if int(digit) < freq[digit]:
            return False
    return True",0.8674,-8.248714540283
283,5,"

def solve(num):
    freq = {} 
    for i in str(num):
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    
    for key, value in freq.items():
        if int(key) < value:
            return False
    return True",0.8353,-11.879238445542994
284,1,"

def solve(list, string):
    for item in list:
        if item != string:
            return False
    return True",0.8808,-3.299165643275
284,2,"

def solve(lst, string):
    for item in lst:
        if item != string:
            return False
    return True",0.9701,-0.7893299877571998
284,3,"

def solve(lst, string):
    for item in lst:
        if item != string:
            return False
    return True",0.9701,-0.7893299877571998
284,4,"

def solve(lst, string):
    for item in lst:
        if item != string:
            return False
    return True",0.9701,-0.7893299877571998
284,5,"

def solve(lst, str):
    for item in lst:
        if item != str:
            return False
    return True",0.8903,-3.020815906535
285,1,"

def solve(string):
    import re
    pattern = r'a[bb]{2,3}'
    match = re.search(pattern, string)
    if match:
        return True
    else:
        return False",0.8864,-5.306330855681004
285,2,"

def solve(string):
    import re
    if re.search(r'a{1}b{2,3}', string):
        return True
    else:
        return False",0.8387,-6.334247559899999
285,3,"

def solve(s):
    return re.search(r'a(b{2,3})', s) is not None",0.7253,-7.387433209881002
285,4,"

def solve(string):
    import re
    pattern = r'a(bb){1,2}'
    match = re.search(pattern, string)
    if match:
        return True
    else:
        return False",0.8523,-6.872404043310998
285,5,"

def solve(string):
    pattern = r'a[bb]{2,3}'
    return re.search(pattern, string) is not None",0.673,-11.088307709532002
286,1,"

def solve(arr, k):
    # create a modified array by repeating the given array k times
    modified_arr = arr * k
    
    # initialize variables to store the maximum sum and current sum
    max_sum = float('-inf')
    curr_sum = 0
    
    # loop through the modified array
    for num in modified_arr:
        # update the current sum by adding the current number
        curr_sum += num
        # if the current sum is greater than the maximum sum, update the maximum sum
        if curr_sum > max_sum:
            max_sum = curr_sum
        # if the current sum becomes negative, reset it to 0
        if curr_sum < 0:
            curr_sum = 0
    
    # return the maximum sum
    return max_sum",0.9087,-15.702725661606191
286,2,"

def solve(arr, k):
    # initialize max sum to be the first element of the array
    max_sum = arr[0]
    # iterate through the array k times
    for i in range(k):
        # initialize current sum to be 0
        current_sum = 0
        # iterate through the array
        for j in range(len(arr)):
            # update current sum by adding the element at index j
            current_sum += arr[j]
            # update max sum if current sum is greater
            if current_sum > max_sum:
                max_sum = current_sum
    # return the max sum
    return max_sum",0.837,-23.84929757546301
286,3,"

def solve(arr, k):
    # create modified array by repeating given array k times
    modified_arr = arr * k
    
    # set initial maximum sum to be the first element in modified array
    max_sum = modified_arr[0]
    
    # set current sum to be the first element in modified array
    curr_sum = modified_arr[0]
    
    # loop through modified array starting from the second element
    for i in range(1, len(modified_arr)):
        # if current sum is negative, reset it to be the current element
        if curr_sum < 0:
            curr_sum = modified_arr[i]
        # otherwise, add current element to current sum
        else:
            curr_sum += modified_arr[i]
        
        # update maximum sum if current sum is greater
        if curr_sum > max_sum:
            max_sum = curr_sum
    
    return max_sum",0.8639,-27.209995208433547
286,4,"

def solve(arr, k):
    modified_arr = arr * k
    max_sum = 0
    curr_sum = 0
    
    for num in modified_arr:
        curr_sum = max(curr_sum + num, num)
        max_sum = max(max_sum, curr_sum)
        
    return max_sum",0.8612,-9.562603217763998
286,5,"

def solve(arr, k):
    n = len(arr)
    max_sum = 0
    for i in range(n):
        cur_sum = 0
        for j in range(i, i + k * n):
            cur_sum += arr[j % n]
            max_sum = max(max_sum, cur_sum)
    return max_sum",0.8503,-11.516901926865994
287,1,"

def solve(n):
    sum = 0
    for num in range(2, 2*n+1, 2):
        sum += num**2
    return sum",0.8366,-6.780606447753001
287,2,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i)**2
    return sum",0.9526,-1.7008626990029998
287,3,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        if i%2 == 0:
            sum += i*i
    return sum",0.9101,-3.863469413408
287,4,"

def solve(n):
    sum_squares = 0
    for i in range(1, n+1):
        sum_squares += (2*i)**2
    return sum_squares",0.8607,-6.1504680658795
287,5,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        if i % 2 == 0:
            sum += (i*i)
    return sum",0.8927,-4.878811265276999
288,1,"

def solve(arr, p):
    count = 0
    for num in arr:
        if pow(num, p-2, p) == num:
            count += 1
    return count",0.955,-1.932329895898
288,2,"

def solve(arr, p):
    count = 0
    for num in arr:
        if pow(num, p-2, p) == num:
            count += 1
    return count",0.955,-1.932329895898
288,3,"

def solve(arr, p):
    count = 0
    for num in arr:
        if (num ** (p-2)) % p == num:
            count += 1
    return count",0.9209,-3.544623345465299
288,4,"

def solve(arr, p):
    count = 0
    for num in arr:
        if (num * num) % p == 1:
            count += 1
    return count",0.9316,-2.904023457768
288,5,"

def solve(arr, p):
    count = 0
    for num in arr:
        inverse = pow(num, p-2, p)
        if inverse == num:
            count += 1
    return count",0.9406,-2.8185093912349988
289,1,"

def solve(year):
    if year % 400 == 0:
        return 2
    elif year % 100 == 0:
        return 1
    elif year % 4 == 0:
        return 2
    else:
        return 1",0.9113,-5.2936644792675995
289,2,"

def solve(year):
    odd_days = 0
    if year % 4 == 0:
        odd_days = 2
    else:
        odd_days = 1

    if year % 100 == 0:
        odd_days = 0

    if year % 400 == 0:
        odd_days = 2

    return odd_days",0.8527,-12.267788295086
289,3,"

def solve(year):
    odd_days = 0
    odd_days += (year - 1) % 7
    odd_days += ((year - 1) // 4 - 3 * ((year - 1) // 100 + 1) // 4) % 7
    return odd_days % 7",0.8919,-8.125654988014
289,4,"

def solve(year):
    odd_days = 0
    
    # calculate the number of leap years
    leap_years = (year - 1) // 4 - (year - 1) // 100 + (year - 1) // 400
    
    # calculate the number of non-leap years
    non_leap_years = year - 1 - leap_years
    
    # calculate the number of odd days for non-leap years
    odd_days += non_leap_years * 365
    
    # calculate the number of odd days for leap years
    odd_days += leap_years * 366
    
    # calculate the number of odd days for the given year
    odd_days %= 7
    
    # return the result
    return odd_days",0.8804,-20.129902723759095
289,5,"

def solve(year):
    odd_days = 0
    days_in_month = [31,28,31,30,31,30,31,31,30,31,30,31]
    if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
        days_in_month[1] = 29
    for days in days_in_month:
        odd_days += days % 7
    return odd_days % 7",0.9266,-7.850573461793103
290,1,"

def solve(lists):
    max_length = 0
    max_lists = []
    for l in lists:
        if len(l) > max_length:
            max_length = len(l)
            max_lists = [l]
        elif len(l) == max_length:
            max_lists.append(l)
    return max_lists",0.934,-4.507856217827001
290,2,"

def solve(list_of_lists):
    max_length = 0
    max_lists = []

    for lst in list_of_lists:
        if len(lst) > max_length:
            max_length = len(lst)
            max_lists = [lst]
        elif len(lst) == max_length:
            max_lists.append(lst)

    return max_lists",0.9342,-4.693455960966898
290,3,"

def solve(list_of_lists):
    max_length = len(max(list_of_lists, key=len))
    max_lists = [lst for lst in list_of_lists if len(lst) == max_length]
    return max_lists",0.8145,-9.02946568754
290,4,"

def solve(list_of_lists):
    max_length = 0
    max_lists = []
    for lst in list_of_lists:
        if len(lst) > max_length:
            max_length = len(lst)
            max_lists = [lst]
        elif len(lst) == max_length:
            max_lists.append(lst)
    return max_lists",0.9602,-2.804275388561299
290,5,"

def solve(list_of_lists):
    max_length = 0
    max_lists = []
    
    for lst in list_of_lists:
        if len(lst) > max_length:
            max_length = len(lst)
            max_lists = [lst]
        elif len(lst) == max_length:
            max_lists.append(lst)
            
    return max_lists",0.9253,-5.512270665229
291,1,"

def solve(n, k):
    if n == 0:
        return 0
    same = 0
    diff = k
    for i in range(2, n+1):
        same, diff = diff, (same + diff) * (k-1)
    return same + diff",0.8716,-8.933719788498001
291,2,"

def solve(n, k):
    # base cases
    if n == 1:
        return k
    if n == 2:
        return k*k
    
    # create a dp array to store the number of ways for each post
    dp = [0 for i in range(n)]
    
    # initialize the first two post with k and k*k ways
    dp[0] = k
    dp[1] = k*k
    
    # loop through the remaining posts
    for i in range(2, n):
        # calculate the number of ways for the current post based on the previous two posts
        dp[i] = (k-1) * (dp[i-1] + dp[i-2])
        
    # return the total number of ways for n posts
    return dp[n-1]",0.7948,-39.74071374342399
291,3,"

def solve(n, k):
    if n == 0:
        return 0
    elif n == 1:
        return k
    elif n == 2:
        return k * k
    else:
        same = k
        diff = k * (k - 1)
        for i in range(3, n + 1):
            temp = diff
            diff = (same + diff) * (k - 1)
            same = temp
        return same + diff",0.9373,-6.798876683415699
291,4,"

def solve(n, k):
    if n == 0:
        return 0
    if n == 1:
        return k
    same = k
    diff = k * (k-1)
    for i in range(3, n+1):
        temp = diff
        diff = (same + diff) * (k-1)
        same = temp
    return same + diff",0.949,-4.500478253838999
291,5,"

def solve(n, k):
    if n == 0:
        return 0
    elif n == 1:
        return k
    elif n == 2:
        return k * k
    
    # Initialize dp array to store number of ways to paint fence
    # with i posts and j colors
    dp = [[0 for i in range(k)] for j in range(n)]
    
    # For 1st post, there are k ways to paint it
    for j in range(k):
        dp[0][j] = k
    
    # For 2nd post, there are k ways to paint it if the 1st post
    # has a different color, and k-1 ways if they have the same color
    for j in range(k):
        dp[1][j] = k
        if j == 0:
            dp[1][j] *= k
        else:
            dp[1][j] *= (k-1)
    
    # For the remaining posts, there are two cases:
    # 1. If the current post has a different color than the previous post,
    #    then there are k-1 ways to paint it.
    # 2. If the current post has the same color as the previous post,
    #    then we cannot have more than 2 adjacent posts with the same color,
    #    so there are k-2 ways to paint it.
    for i in range(2, n):
        for j in range(k):
            dp[i][j] = (dp[i-1][j] + dp[i-2][j]) * (k-1)
            if j > 0:
                dp[i][j] += dp[i-1][j-1] * (k-2)
    
    # The total number of ways to paint the fence is the sum of all entries
    # in the last row of the dp array
    return sum(dp[n-1])",0.8315,-76.77704532824337
292,1,"

def solve(num1, num2):
    return num1 / num2",0.898,-1.720640747948
292,2,"

def solve(num1, num2):
    return num1 / num2",0.898,-1.720640747948
292,3,"

def solve(a, b):
    return a / b",0.8148,-2.45789909571
292,4,"

def solve(num1, num2):
  return num1 / num2",0.7339,-4.950416829018
292,5,"

def solve(a, b):
    return a / b",0.8148,-2.45789909571
293,1,"

def solve(side1, side2):
    return (side1**2 + side2**2)**0.5",0.8953,-2.764987054449801
293,2,"

def solve(side1, side2):
    side3 = (side1**2 + side2**2)**(1/2)
    return side3",0.898,-3.5488037690956995
293,3,"

def solve(side1, side2):
    return (side1**2 + side2**2)**0.5",0.8953,-2.764987054449801
293,4,"

def solve(side1, side2):
    return ((side1 ** 2) + (side2 ** 2)) ** 0.5",0.8517,-4.974998774094001
293,5,"

def solve(side1, side2):
    side3 = (side1**2 + side2**2)**0.5
    return side3",0.9428,-1.885217472387
294,1,"

def solve(lst):
    max_val = lst[0]
    for val in lst:
        if isinstance(val, int) or isinstance(val, float):
            if val > max_val:
                max_val = val
    return max_val",0.8972,-5.3147233110879
294,2,"

def solve(lst):
    max_val = lst[0]
    for i in range(len(lst)):
        if type(lst[i]) == int or type(lst[i]) == float:
            if lst[i] > max_val:
                max_val = lst[i]
        elif type(lst[i]) == list:
            sub_max = solve(lst[i])
            if sub_max > max_val:
                max_val = sub_max
    return max_val",0.9074,-8.651814467440897
294,3,"

def solve(lst):
    max_val = float('-inf')
    for item in lst:
        if type(item) == int or type(item) == float:
            if item > max_val:
                max_val = item
    return max_val",0.888,-5.9377676906538
294,4,"

def solve(lst):
    max_val = None
    for val in lst:
        if max_val is None or val > max_val:
            max_val = val
    return max_val",0.8875,-4.6546981494893
294,5,"

def solve(lst):
    return max(lst)",0.804,-2.1819709913
295,1,"

def solve(number):
    sum = 0
    for i in range(1, number+1):
        if number % i == 0:
            sum += i
    return sum",0.9059,-3.9542677133209994
295,2,"

def solve(n):
    total = 0
    for i in range(1, n+1):
        if n % i == 0:
            total += i
    return total",0.9159,-3.5121003374525
295,3,"

def solve(num):
    sum = 0
    for i in range(1, num+1):
        if num % i == 0:
            sum += i
    return sum",0.9584,-1.6978780421150002
295,4,"

def solve(num):
    sum = 0
    for i in range(1, num+1):
        if num % i == 0:
            sum += i
    return sum",0.9584,-1.6978780421150002
295,5,"

def solve(num):
    sum = 0
    for i in range(1, num+1):
        if num % i == 0:
            sum += i
    return sum",0.9584,-1.6978780421150002
296,1,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] > arr[j]:
                count += 1
    return count",0.9813,-0.925644852608
296,2,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] > arr[j]:
                count += 1
    return count",0.9813,-0.925644852608
296,3,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] > arr[j]:
                count += 1
    return count",0.9813,-0.925644852608
296,4,"

def merge(arr, temp_arr, left, mid, right): 
	inversions = 0
	i = left
	j = mid + 1
	k = left 
	
	while i <= mid and j <= right: 
		if arr[i] <= arr[j]: 
			temp_arr[k] = arr[i] 
			i += 1
		else: 
			temp_arr[k] = arr[j] 
			inversions += (mid - i + 1)
			j += 1
		k += 1

	while i <= mid: 
		temp_arr[k] = arr[i] 
		i += 1
		k += 1

	while j <= right: 
		temp_arr[k] = arr[j] 
		j += 1
		k += 1

	for m in range(left, right + 1): 
		arr[m] = temp_arr[m] 
		
	return inversions


def mergeSort(arr, temp_arr, left, right): 
	inversions = 0
	if left < right: 
		mid = (left + right)//2
		inversions += mergeSort(arr, temp_arr, left, mid) 
		inversions += mergeSort(arr, temp_arr, mid + 1, right) 
		inversions += merge(arr, temp_arr, left, mid, right) 
	return inversions


def solve(arr):
	temp_arr = [0]*len(arr) 
	return mergeSort(arr, temp_arr, 0, len(arr)-1)",0.9,-33.087690816820725
296,5,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] > arr[j]:
                count += 1
    return count",0.9813,-0.925644852608
297,1,"

def solve(nested_list):
    flattened_list = []
    for element in nested_list:
        if type(element) == list:
            flattened_list.extend(solve(element))
        else:
            flattened_list.append(element)
    return flattened_list",0.931,-3.433049774754999
297,2,"

def solve(nested_list):
    flattened_list = []
    for item in nested_list:
        if type(item) == list:
            flattened_list.extend(solve(item))
        else:
            flattened_list.append(item)
    return flattened_list",0.9262,-3.6816170931739993
297,3,"

def solve(nested_list):
    flattened_list = []
    for el in nested_list:
        if isinstance(el, list):
            flattened_list.extend(solve(el))
        else:
            flattened_list.append(el)
    return flattened_list",0.857,-7.251086541794002
297,4,"

def solve(nested_list):
    flattened_list = []
    for item in nested_list:
        if type(item) == list:
            flattened_list.extend(solve(item))
        else:
            flattened_list.append(item)
    return flattened_list",0.9262,-3.6816170931739993
297,5,"

def solve(nested_list):
    flattened_list = []
    for i in nested_list:
        if type(i) == list:
            flattened_list.extend(solve(i))
        else:
            flattened_list.append(i)
    return flattened_list",0.9286,-3.554652327775
298,1,"

def solve(nested_list, main_list):
    result = []
    for sublist in nested_list:
        for ele in sublist:
            if ele in main_list:
                result.append(ele)
    return result",0.804,-9.160097510288
298,2,"

def solve(nested_list, another_list):
    result = []
    for sublist in nested_list:
        for element in sublist:
            if element in another_list:
                result.append(element)
    return result",0.8991,-4.46700263649
298,3,"

def solve(nested_list, other_list):
    result = []
    for sublist in nested_list:
        for element in sublist:
            if element in other_list:
                result.append(element)
    return result",0.9245,-3.2974861594430003
298,4,"

def solve(list1, list2):
    result = []
    for i in list1:
        if type(i) == list:
            for j in i:
                if j in list2:
                    result.append(j)
        else:
            if i in list2:
                result.append(i)
    return result",0.9171,-5.538544271485998
298,5,"
def solve(nested_list, list):
    result = []
    
    for sublist in nested_list:
        for element in sublist:
            if element in list and element not in result:
                result.append(element)
    
    return result",0.7811,-11.612078195867
299,1,"

def solve(lst):
    max_sum = 0
    for tup in lst:
        max_sum = max(max_sum, sum(tup))
    return max_sum",0.8587,-5.178973226357002
299,2,"

def solve(list_of_tuples):
    max_aggregate = 0
    for tuple in list_of_tuples:
        aggregate = tuple[0] + tuple[1]
        if aggregate > max_aggregate:
            max_aggregate = aggregate
    return max_aggregate",0.8857,-6.672710277040998
299,3,"

def solve(lst):
    sum = 0
    max_sum = 0
    for tup in lst:
        sum = tup[0] + tup[1]
        if sum > max_sum:
            max_sum = sum
    return max_sum",0.8112,-11.088918183219006
299,4,"

def solve(lst):
    max_aggregate = 0
    for tup in lst:
        aggregate = sum(tup)
        if aggregate > max_aggregate:
            max_aggregate = aggregate
    return max_aggregate",0.927,-3.48521409835
299,5,"

def solve(lst):
    max_agg = 0
    for tpl in lst:
        curr_agg = tpl[0] + tpl[1] + tpl[2]
        if curr_agg > max_agg:
            max_agg = curr_agg
    return max_agg",0.8091,-11.650909830842998
300,1,"

def solve(n):
    count = 0
    for i in range(2**(2*n)):
        binary = bin(i)[2:].zfill(2*n)
        first_half = binary[:n]
        second_half = binary[n:]
        if sum(int(bit) for bit in first_half) == sum(int(bit) for bit in second_half):
            count += 1
    return count",0.9462,-4.5942624570413
300,2,"

def solve(n):
    # Base case: if n is 0, there are no valid binary sequences
    if n == 0:
        return 0
    
    # Use dynamic programming to store the counts for each number of bits
    counts = [0 for _ in range(n+1)]
    
    # The first count is always 1, since a sequence of length 0 has a sum of 0
    counts[0] = 1
    
    # Iterate through all possible values for the first n bits
    for i in range(1, n+1):
        # Calculate the sum of the first n bits
        sum = i
        
        # Iterate through all possible values for the last n bits
        for j in range(0, i+1):
            # If the sum of the last n bits is the same as the sum of the first n bits,
            # increment the count for this number of bits by the count for the previous number of bits
            if sum == (i-j):
                counts[i] += counts[j]
    
    # The total count is the last count in the list
    return counts[-1]",0.702,-85.25494342987147
300,3,"

def solve(n):
    count = 0
    for i in range(2**(2*n)):
        binary = bin(i)[2:].zfill(2*n)
        first_half = binary[:n]
        second_half = binary[n:]
        if sum([int(x) for x in first_half]) == sum([int(x) for x in second_half]):
            count += 1
    return count",0.9314,-6.037435287785801
300,4,"

def solve(n):
    count = 0
    # Generate all binary sequences of length 2n
    for i in range(2**(2*n)):
        # Convert the integer to binary string
        binary = bin(i)[2:]
        # Pad the binary string with leading zeros if necessary
        binary = binary.zfill(2*n)
        # Split the binary string into two halves
        first_half = binary[:n]
        last_half = binary[n:]
        # Convert the binary strings to integers
        first_half_sum = int(first_half, 2)
        last_half_sum = int(last_half, 2)
        # Check if the sum of first n bits is equal to the sum of last n bits
        if first_half_sum == last_half_sum:
            count += 1
    return count",0.8736,-22.965624183338793
300,5,"

def solve(n):
    count = 0
    for i in range(2**(2*n)):
        binary = format(i, '0' + str(2*n) + 'b')
        first_sum = 0
        last_sum = 0
        for j in range(n):
            first_sum += int(binary[j])
            last_sum += int(binary[n+j])
        if first_sum == last_sum:
            count += 1
    return count",0.9005,-10.065206529909991
301,1,"

def solve(dictionary):
    depth = 1
    for key, value in dictionary.items():
        if isinstance(value, dict):
            depth = max(depth, 1 + solve(value))
    return depth",0.9025,-4.307278789753999
301,2,"

def solve(dictionary):
    if not isinstance(dictionary, dict):
        return 0
    depths = []
    for key in dictionary:
        depth = 1 + solve(dictionary[key])
        depths.append(depth)
    if len(depths) == 0:
        return 1
    return max(depths)",0.7987,-14.384746489238005
301,3,"

def solve(dictionary):
    if type(dictionary) != dict:
        return 0
    else:
        max_depth = 0
        for key, value in dictionary.items():
            if type(value) == dict:
                depth = solve(value) + 1
                if depth > max_depth:
                    max_depth = depth
        return max_depth",0.8701,-10.019873494958004
301,4,"

def solve(dictionary, depth=0):
    if isinstance(dictionary, dict):
        depth += 1
        for key in dictionary:
            depth = max(depth, solve(dictionary[key], depth))
    return depth",0.8094,-9.093411333752996
301,5,"

def solve(dictionary):
    max_depth = 0
    if type(dictionary) != dict:
        return max_depth
    for key in dictionary:
        if type(dictionary[key]) == dict:
            depth = solve(dictionary[key])
            if depth > max_depth:
                max_depth = depth
    return max_depth + 1",0.8251,-12.878546445929
302,1,"

def solve(num):
    if num == 0:
        return 0
    elif num == 1:
        return 1
    else:
        msb = 0
        while num > 0:
            msb += 1
            num = num // 2
        return pow(2, msb-1)",0.7952,-16.503117283286194
302,2,"

def solve(num):
    return int(math.log2(num & -num)) + 1",0.7315,-5.941037323700001
302,3,"

def solve(n):
    msb = 0
    while n > 0:
        msb = max(msb, n & -n)
        n = n >> 1
    return msb",0.8387,-7.741148801511299
302,4,"

def solve(n):
    msb = n & -n
    return msb",0.6866,-6.768365701093001
302,5,"

def solve(n):
    msb = 0
    while n > 1:
        n = n >> 1
        msb += 1
    return msb",0.7878,-9.0653934536804
303,1,"

def solve(arr1, arr2):
    count1 = 0
    count2 = 0
    for i in range(len(arr1)):
        for j in range(i+1, len(arr1)):
            if arr1[i] > arr1[j]:
                count1 += 1
    for i in range(len(arr2)):
        for j in range(i+1, len(arr2)):
            if arr2[i] > arr2[j]:
                count2 += 1
    if count1 == count2:
        return True
    else:
        return False",0.9758,-2.9688269297705987
303,2,"

def solve(arr1, arr2):
    count1 = 0
    count2 = 0

    for i in range(len(arr1)):
        for j in range(i+1, len(arr1)):
            if arr1[i] > arr1[j]:
                count1 += 1

    for i in range(len(arr2)):
        for j in range(i+1, len(arr2)):
            if arr2[i] > arr2[j]:
                count2 += 1

    if count1 == count2:
        return True
    else:
        return False",0.9528,-5.850044467424
303,3,"

def solve(arr1, arr2):
    count1 = 0
    count2 = 0

    for i in range(len(arr1)):
        for j in range(i+1, len(arr1)):
            if arr1[i] > arr1[j]:
                count1 += 1
    
    for i in range(len(arr2)):
        for j in range(i+1, len(arr2)):
            if arr2[i] > arr2[j]:
                count2 += 1
    
    if count1 == count2:
        return True
    else:
        return False",0.9446,-6.8921580327955
303,4,"

def solve(A, B):
    invA = 0
    invB = 0
    for i in range(len(A)):
        for j in range(i+1, len(A)):
            if A[i] > A[j]:
                invA += 1
    for i in range(len(B)):
        for j in range(i+1, len(B)):
            if B[i] > B[j]:
                invB += 1
    if invA == invB:
        return True
    else:
        return False",0.908,-10.709098057730598
303,5,"

def solve(arr1, arr2):
    count1 = 0
    count2 = 0
    for i in range(len(arr1)):
        for j in range(i+1, len(arr1)):
            if arr1[i] > arr1[j]:
                count1 += 1
    for i in range(len(arr2)):
        for j in range(i+1, len(arr2)):
            if arr2[i] > arr2[j]:
                count2 += 1
    if count1 == count2:
        return True
    else:
        return False",0.9758,-2.9688269297705987
304,1,"

def solve(arr, index, rotations):
    new_index = (index + rotations) % len(arr)
    return arr[new_index]",0.8554,-4.374495488896001
304,2,"

def solve(arr, rotations, index):
    for i in range(rotations):
        temp = arr.pop(-1)
        arr.insert(0, temp)
    return arr[index]",0.8187,-7.603613463554001
304,3,"

def solve(arr, index, rotations):
    # find the length of the array
    length = len(arr)
    # calculate the effective number of rotations
    effective_rotations = rotations % length
    # find the new index after rotations
    new_index = (index + effective_rotations) % length
    # return the element at the new index
    return arr[new_index]",0.8437,-13.765557647340298
304,4,"

def solve(arr, index, rotations):
    for i in range(rotations):
        arr.insert(0, arr.pop())
    return arr[index]",0.8867,-3.728074421318
304,5,"

def solve(arr, index, rotations):
    # get the length of the array
    n = len(arr)
    
    # calculate the effective number of rotations
    k = rotations % n
    
    # calculate the new index after rotations
    new_index = (index + k) % n
    
    # return the element at the new index
    return arr[new_index]",0.8386,-13.7258790865205
305,1,"

def solve(word_list):
    matches = []
    for word in word_list:
        if word.startswith('p'):
            matches.append(word)
    return matches",0.8761,-4.232390279680001
305,2,"

def solve(words):
    matches = []
    for word in words:
        if word[0] == 'p':
            matches.append(word)
    return matches",0.8816,-4.158162581179999
305,3,"

def solve(words):
    p_words = [word for word in words if word.startswith('p')]
    if len(p_words) == 2:
        return p_words
    else:
        return False",0.8386,-7.393755225547801
305,4,"

def solve(words):
    result = []
    for word in words:
        if word[0] == 'p':
            result.append(word)
    return result",0.885,-4.029714887807
305,5,"

def solve(words):
    matches = []
    for word in words:
        if word[0] == 'p' and len(word) >= 2:
            matches.append(word)
    return matches

# Example usage:
# words = ['apple', 'pear', 'penguin', 'orange', 'pineapple']
# result = solve(words)
# print(result) # ['pear', 'penguin', 'pineapple']",0.7032,-30.982052806642983
306,1,"

def solve(arr, k):
    n = len(arr)
    dp = [0] * n
    dp[0] = arr[0]
    for i in range(1, n):
        dp[i] = arr[i]
        for j in range(i):
            if arr[j] < arr[i]:
                dp[i] = max(dp[i], dp[j] + arr[i])
    max_sum = dp[k]
    for i in range(k + 1, n):
        max_sum = max(max_sum, dp[i])
    return max_sum",0.9081,-11.186202702638004
306,2,"

def solve(arr, k):
    # initialize a list to store the maximum sum of increasing subsequence till each index
    dp = [0] * len(arr)
    # initialize the maximum sum to be the value at index i
    max_sum = arr[0]
    # loop through the array from index 1 to k
    for i in range(1, k+1):
        # initialize the maximum sum of increasing subsequence till index i
        dp[i] = arr[i]
        # loop through the array from index 0 to i
        for j in range(i):
            # if the current element is greater than the previous element
            if arr[i] > arr[j]:
                # update the maximum sum of increasing subsequence till index i
                dp[i] = max(dp[i], dp[j] + arr[i])
        # update the maximum sum
        max_sum = max(max_sum, dp[i])
    # return the maximum sum
    return max_sum",0.8529,-32.6091907041193
306,3,"

def solve(nums, k):
    dp = [0] * len(nums)
    dp[0] = nums[0]
    for i in range(1, len(nums)):
        dp[i] = nums[i]
        for j in range(i):
            if nums[j] < nums[i]:
                dp[i] = max(dp[i], dp[j] + nums[i])
    return max(dp) + nums[k]",0.9171,-7.531808955388698
306,4,"

def solve(nums, k):
    dp = [0] * len(nums)
    dp[0] = nums[0]
    for i in range(1, len(nums)):
        dp[i] = nums[i]
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + nums[i])
    return max(dp + nums[k:])",0.8662,-12.352560232993698
306,5,"

def solve(arr, k):
    # initialize a list to store the maximum sum of increasing subsequence till each index
    max_sum = [0] * len(arr)

    # fill the first element with the value at index 0
    max_sum[0] = arr[0]

    # loop through the array starting from index 1
    for i in range(1, len(arr)):
        # initialize the maximum sum at index i to be the value at index i
        max_sum[i] = arr[i]
        # loop through the previous indices before i
        for j in range(i):
            # check if the value at index j is smaller than the value at index i
            if arr[j] < arr[i]:
                # update the maximum sum at index i by adding the value at index j
                max_sum[i] = max(max_sum[i], max_sum[j] + arr[i])

    # return the maximum sum at index k, which includes the value at index k
    return max_sum[k]",0.8381,-37.80065566628461
307,1,"

def solve(tup):
    return tup[1]",0.8647,-1.7446327072
307,2,"

def solve(tuple):
    colon = tuple[1]
    return colon",0.7876,-3.5808892467699995
307,3,"

def solve(tup):
    return tup[1]",0.8647,-1.7446327072
307,4,"

def solve(tup):
    col = tup[1]
    return col",0.6966,-5.783749061
307,5,"

def solve(tup):
    colon = tup[1]
    return colon",0.8544,-2.5169843502
308,1,"

def solve(list1, list2, n):
    products = []
    for num1 in list1:
        for num2 in list2:
            products.append(num1 * num2)
    sorted_products = sorted(products, reverse=True)
    return sorted_products[:n]",0.9015,-5.9123140905768
308,2,"

def solve(lst1, lst2, n):
    products = []
    for num1 in lst1:
        for num2 in lst2:
            products.append(num1 * num2)
    
    products.sort(reverse=True)
    return products[:n]",0.8779,-6.903570416939701
308,3,"

def solve(list1, list2, num):
    list1.sort(reverse=True)
    list2.sort(reverse=True)
    products = []
    for i in range(num):
        products.append(list1[i] * list2[i])
    return products",0.8749,-6.818163160110801
308,4,"

def solve(list1, list2, num):
    products = []
    for i in range(len(list1)):
        for j in range(len(list2)):
            products.append(list1[i]*list2[j])
    products.sort(reverse=True)
    return products[:num]",0.9108,-5.229310280458299
308,5,"

def solve(list1, list2, num):
    products = []
    for i in range(len(list1)):
        for j in range(len(list2)):
            products.append(list1[i] * list2[j])
    products.sort(reverse = True)
    return products[:num]",0.8814,-7.3252951901043
309,1,"

def solve(num1, num2):
    if num1 > num2:
        return num1
    else:
        return num2",0.9649,-1.0372285084800004
309,2,"

def solve(x, y):
    if x > y:
        return x
    else:
        return y",0.8822,-2.883432182779
309,3,"

def solve(num1, num2):
    if num1 > num2:
        return num1
    else:
        return num2",0.9649,-1.0372285084800004
309,4,"

def solve(num1, num2):
    if num1 > num2:
        return num1
    else:
        return num2",0.9649,-1.0372285084800004
309,5,"

def solve(x, y):
    if x > y:
        return x
    else:
        return y",0.8822,-2.883432182779
310,1,"

def solve(string):
    return tuple(string)",0.9205,-0.8281204927500001
310,2,"

def solve(string):
    return tuple(string)",0.9205,-0.8281204927500001
310,3,"

def solve(string):
    return tuple(string)",0.9205,-0.8281204927500001
310,4,"

def solve(string):
    return tuple(string)",0.9205,-0.8281204927500001
310,5,"

def solve(string):
    return tuple(string)",0.9205,-0.8281204927500001
311,1,"

def solve(n):
    mask = 1
    while (n & mask) == mask:
        mask <<= 1
    return n | mask",0.7826,-7.843892920249999
311,2,"

def solve(n):
    return n | (n + 1)",0.82,-2.97734225623
311,3,"

def solve(n):
    return n | (n + 1)",0.82,-2.97734225623
311,4,"

def solve(n):
    if n == 0:
        return 1
    mask = 1 << (n.bit_length() - 1)
    return n | mask",0.7658,-9.872988230860004
311,5,"
def solve(n):
    if n == 0:
        return 1
    else:
        i = 1
        while n & i:
            i <<= 1
        return n | i",0.7465,-12.570188388789996
312,1,"

def solve(radius, height):
    return (1/3) * 3.14159 * (radius**2) * height",0.8502,-4.542828328077
312,2,"

def solve(radius, height):
    volume = (1/3) * 3.14 * (radius**2) * height
    return volume",0.8837,-3.956121082947
312,3,"

def solve(radius, height):
    volume = (1/3) * math.pi * radius**2 * height
    return volume",0.8758,-3.713057607400999
312,4,"

def solve(radius, height):
    return (1/3) * 3.14159 * radius**2 * height",0.8423,-4.460684723987
312,5,"

def solve(radius, height):
    return (1/3) * 3.14159 * radius**2 * height",0.8423,-4.460684723987
313,1,"

def solve(lst):
    for num in lst:
        if num > 0:
            print(num)",0.9537,-1.0420233735305005
313,2,"

def solve(lst):
    for num in lst:
        if num > 0:
            print(num)",0.9537,-1.0420233735305005
313,3,"

def solve(lst):
    for num in lst:
        if num > 0:
            print(num)",0.9537,-1.0420233735305005
313,4,"

def solve(lst):
    for num in lst:
        if num > 0:
            print(num) ",0.8258,-4.4033309735305
313,5,"

def solve(lst):
    for num in lst:
        if num > 0:
            print(num)",0.9537,-1.0420233735305005
314,1,"

def solve(n, grid):
    if n == 0:
        return 0
    if n == 1:
        return max(grid[0][0], grid[1][0])
    dp = [0] * (n + 1)
    dp[1] = max(grid[0][0], grid[1][0])
    for i in range(2, n + 1):
        dp[i] = max(dp[i - 1], dp[i - 2] + max(grid[0][i - 1], grid[1][i - 1]))
    return dp[n]",0.923,-10.340143379854997
314,2,"

def solve(grid):
    n = len(grid[0])
    dp = [0] * (n + 1)
    for i in range(1, n + 1):
        dp[i] = max(dp[i - 1], grid[0][i - 1] + dp[i - 2])
    return dp[n]",0.8923,-8.206401774759
314,3,"

def solve(grid):
    if len(grid) == 0:
        return 0
    elif len(grid) == 1:
        return max(grid[0])
    else:
        dp = [0] * len(grid[0])
        dp[0] = max(grid[0][0], grid[1][0])
        for i in range(1, len(grid[0])):
            dp[i] = max(dp[i-1], dp[i-2] + max(grid[0][i], grid[1][i]))
        return dp[-1]",0.915,-10.481184404375
314,4,"

def solve(grid):
    # initialize variables to keep track of the maximum sum at each position
    # and the previous maximum sums at adjacent positions
    max_sum = [0] * len(grid[0])
    prev_max_sum = [0] * len(grid[0])

    # loop through each row in the grid
    for row in grid:
        # loop through each column in the row
        for i in range(len(row)):
            # calculate the current maximum sum by adding the value at the current position
            # to the previous maximum sum at the non-adjacent position
            current_max_sum = row[i] + max(prev_max_sum[:i-1] + prev_max_sum[i+2:])

            # update the previous maximum sum at the current position
            prev_max_sum[i] = max_sum[i]

            # update the maximum sum at the current position
            max_sum[i] = current_max_sum

    # return the maximum sum at the last position
    return max_sum[-1]",0.7968,-48.168167766763666
314,5,"

def solve(grid):
    n = len(grid[0])
    prev_max = 0
    curr_max = max(grid[0][0], grid[1][0])
    for i in range(1, n):
        temp = curr_max
        curr_max = max(prev_max + max(grid[0][i], grid[1][i]), curr_max)
        prev_max = temp
    return curr_max",0.8875,-10.385039040837
315,1,"

def solve(string):
    words = string.split()
    max_len = 0
    for word in words:
        if len(word) % 2 == 0:
            if len(word) > max_len:
                max_len = len(word)
    return max_len",0.8954,-6.185862479516701
315,2,"

def solve(words):
    max_length = 0
    for word in words:
        if len(word) % 2 == 0 and len(word) > max_length:
            max_length = len(word)
    return max_length",0.9425,-2.8426404837280987
315,3,"

def solve(words):
    max_length = 0
    for word in words:
        if len(word) % 2 == 0 and len(word) > max_length:
            max_length = len(word)
    return max_length",0.9425,-2.8426404837280987
315,4,"

def solve(text):
    words = text.split()
    max_length = 0
    for word in words:
        if len(word) > max_length and len(word) % 2 == 0:
            max_length = len(word)
    return max_length",0.8912,-6.220801362343198
315,5,"

def solve(string):
    words = string.split()
    max_len = 0
    for word in words:
        if len(word) % 2 == 0 and len(word) > max_len:
            max_len = len(word)
    return max_len",0.9157,-4.754478811389701
316,1,"

def solve(arr, num):
    start = 0
    end = len(arr) - 1
    index = -1
    while start <= end:
        mid = (start + end) // 2
        if arr[mid] == num:
            index = mid
            start = mid + 1
        elif arr[mid] < num:
            start = mid + 1
        else:
            end = mid - 1
    return index",0.9514,-4.882752348730999
316,2,"

def solve(arr, num):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == num:
            if mid == high or arr[mid + 1] != num:
                return mid
            else:
                low = mid + 1
        elif arr[mid] < num:
            low = mid + 1
        else:
            high = mid - 1
    return -1",0.937,-7.1553946774084976
316,3,"

def solve(arr, num):
    start = 0
    end = len(arr) - 1
    index = -1
    while start <= end:
        mid = (start + end) // 2
        if arr[mid] == num:
            index = mid
            start = mid + 1
        elif arr[mid] < num:
            start = mid + 1
        else:
            end = mid - 1
    return index",0.9514,-4.882752348730999
316,4,"

def solve(nums, target):
    low = 0
    high = len(nums) - 1
    idx = -1
    while low <= high:
        mid = (low + high) // 2
        if nums[mid] == target:
            idx = mid
            low = mid + 1
        elif nums[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return idx",0.9077,-9.485230306483002
316,5,"

def solve(arr, target):
    low = 0
    high = len(arr) - 1
    last_index = -1
    
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            last_index = mid
            low = mid + 1
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    
    return last_index",0.9282,-7.519878303510001
317,1,"

def solve(lst):
    result = []
    prev = lst[0]
    count = 1
    for i in range(1, len(lst)):
        if lst[i] == prev:
            count += 1
        else:
            result.append(count)
            result.append(prev)
            count = 1
            prev = lst[i]
    result.append(count)
    result.append(prev)
    return result",0.9115,-7.873517802227597
317,2,"

def solve(lst):
    result = []
    count = 1
    for i in range(1, len(lst)):
        if lst[i] == lst[i-1]:
            count += 1
        else:
            result.append(count)
            result.append(lst[i-1])
            count = 1
    result.append(count)
    result.append(lst[-1])
    return result",0.9416,-4.8164522997675
317,3,"

def solve(lst):
    res = []
    count = 1
    for i in range(1, len(lst)):
        if lst[i] == lst[i-1]:
            count += 1
        else:
            res.append(count)
            res.append(lst[i-1])
            count = 1
    res.append(count)
    res.append(lst[-1])
    return res",0.9331,-5.537506139218601
317,4,"

def solve(lst):
    res = []
    cur = None
    count = 0
    for i in range(len(lst)):
        if lst[i] == cur:
            count += 1
        else:
            if count:
                res.append((count, cur))
            cur = lst[i]
            count = 1
    if count:
        res.append((count, cur))
    return res",0.8123,-17.46283455066698
317,5,"

def solve(lst):
    result = []
    i = 0
    while i < len(lst):
        count = 1
        while i+1 < len(lst) and lst[i] == lst[i+1]:
            count += 1
            i += 1
        result.append((count,lst[i]))
        i += 1
    return result",0.8643,-11.226957596582
318,1,"

def solve(sum_of_sides):
    side = sum_of_sides / 3
    volume = side ** 3
    return volume",0.8882,-3.557791882666999
318,2,"

def solve(s):
    l = s / 3
    return l ** 3",0.7214,-6.204900530740001
318,3,"

def solve(s):
    l = s/3
    b = s/3
    h = s/3
    return l*b*h",0.8344,-5.614026360424
318,4,"

def solve(s): 
    l = s / 3
    return l ** 3",0.6083,-9.941327953279997
318,5,"

def solve(sides_sum):
    a = sides_sum / 3
    volume = a * a * a
    return volume",0.7526,-7.956740628981
319,1,"

import re

def solve(string):
    pattern = r'\b\w{5}\b'
    result = re.findall(pattern, string)
    return result",0.8844,-4.053774905481001
319,2,"

import re

def solve(string):
    pattern = r'\b\w{5}\b'
    matches = re.findall(pattern, string)
    return matches",0.9132,-2.996773449306001
319,3,"

def solve(string):
    pattern = r""\b\w{5}\b""
    matches = re.findall(pattern, string)
    return matches",0.8717,-4.1209822410416
319,4,"

def solve(string):
    import re
    pattern = r'\b\w{5}\b'
    result = re.findall(pattern, string)
    return result",0.8547,-5.338602157830398
319,5,"

def solve(string):
    pattern = r""\b\w{5}\b""
    matches = re.findall(pattern, string)
    return matches",0.8717,-4.1209822410416
320,1,"

def solve(n):
    squared_sum = sum(range(1,n+1))**2
    sum_squared = sum([x**2 for x in range(1,n+1)])
    difference = squared_sum - sum_squared
    return difference",0.8316,-9.407517816153
320,2,"

def solve(n):
    sum_of_squares = 0
    squared_sum = 0
    for i in range(1, n+1):
        sum_of_squares += i**2
        squared_sum += i
    squared_sum = squared_sum**2
    return squared_sum - sum_of_squares",0.92,-5.584799584467397
320,3,"

def solve(n):
    sum_of_squares = 0
    squared_sum = 0
    for i in range(1, n+1):
        sum_of_squares += i**2
        squared_sum += i
    squared_sum = squared_sum**2
    return squared_sum - sum_of_squares",0.92,-5.584799584467397
320,4,"

def solve(n):
    square_sum = ((n * (n + 1)) / 2) ** 2
    sum_squares = (n * (n + 1) * (2 * n + 1)) / 6
    return square_sum - sum_squares",0.8451,-10.268825082836
320,5,"

def solve(n):
    squared_sum = 0
    sum_squared = 0
    for i in range(1, n+1):
        squared_sum += i
        sum_squared += i**2
    return squared_sum**2 - sum_squared",0.9202,-4.488977084613998
321,1,"

def solve(n):
    if n == 0:
        return 1
    else:
        return n * (n + 1) // 2",0.7592,-9.0921338051
321,2,"
def solve(n):
    if n == 0:
        return 0
    else:
        demlo_num = 0
        for i in range(1, n + 1):
            demlo_num += i * (i + 1) * (i + 2)
        return demlo_num ",0.7165,-22.33568267459169
321,3,"

def solve(n):
    if n == 0:
        return 0
    else:
        demlo = 0
        while n > 0:
            digit = n % 10
            demlo += digit ** 2
            n = n // 10
        return demlo",0.8063,-13.562265829147506
321,4,"

def solve(n):
    result = 0
    for i in range(1, n+1):
        result += (i**3 + 1)
    return result",0.6891,-13.779820913039998
321,5,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        if n % i == 0:
            count += 1
    return count",0.8941,-4.588369229232
322,1,"

def solve(lst):
    min_val = min(lst)
    min_indices = []
    for i in range(len(lst)):
        if lst[i] == min_val:
            min_indices.append(i)
    return min_indices",0.9288,-3.2505992869410005
322,2,"

def solve(lst):
    min_val = min(lst)
    result = []
    for i in range(len(lst)):
        if lst[i] == min_val:
            result.append(i)
    return result",0.8989,-4.371547286098701
322,3,"

def solve(arr):
    min_val = min(arr)
    min_positions = []
    for i in range(len(arr)):
        if arr[i] == min_val:
            min_positions.append(i)
    return min_positions",0.8123,-9.1458410485146
322,4,"

def solve(lst):

    min_val = min(lst)
    indices = []

    for i in range(len(lst)):
        if lst[i] == min_val:
            indices.append(i)
    
    return indices",0.7931,-9.733249014506
322,5,"

def solve(lst):
    min_value = min(lst)
    indices = []
    for i, num in enumerate(lst):
        if num == min_value:
            indices.append(i)
    return indices",0.8321,-7.354431251883501
323,1,"

def solve(arr):
    pos = [num for num in arr if num >= 0]
    neg = [num for num in arr if num < 0]
    result = []
    for i in range(min(len(pos), len(neg))):
        result.append(pos[i])
        result.append(neg[i])
    if len(pos) > len(neg):
        result.extend(pos[len(neg):])
    elif len(neg) > len(pos):
        result.extend(neg[len(pos):])
    return result",0.9234,-8.447379901388503
323,2,"

def solve(arr):
    # separate positive and negative items
    pos = []
    neg = []
    for num in arr:
        if num < 0:
            neg.append(num)
        else:
            pos.append(num)
    
    # determine the length of the smaller list
    size = min(len(pos), len(neg))
    
    # create output list by alternating between positive and negative items
    output = []
    for i in range(size):
        output.append(pos[i])
        output.append(neg[i])
    
    # add remaining items from larger list
    if len(pos) > len(neg):
        output.extend(pos[size:])
    else:
        output.extend(neg[size:])
    
    return output",0.783,-35.9567494532838
323,3,"

def solve(arr):
  pos = []
  neg = []
  result = []
  for num in arr:
    if num >= 0:
      pos.append(num)
    else:
      neg.append(num)
  while len(pos) > 0 and len(neg) > 0:
    result.append(pos.pop(0))
    result.append(neg.pop(0))
  if len(pos) > 0:
    result.extend(pos)
  else:
    result.extend(neg)
  return result",0.9035,-10.451962480976
323,4,"

def solve(arr):
    pos = []
    neg = []
    for num in arr:
        if num >= 0:
            pos.append(num)
        else:
            neg.append(num)
    
    result = []
    i = 0
    j = 0
    while i < len(pos) and j < len(neg):
        result.append(pos[i])
        result.append(neg[j])
        i += 1
        j += 1
    
    if i < len(pos):
        result.extend(pos[i:])
    if j < len(neg):
        result.extend(neg[j:])
    
    return result",0.9277,-9.526837254935105
323,5,"

def solve(arr):
    pos = []
    neg = []
    for num in arr:
        if num >= 0:
            pos.append(num)
        else:
            neg.append(num)
    result = []
    for i in range(max(len(pos), len(neg))):
        if i < len(pos):
            result.append(pos[i])
        if i < len(neg):
            result.append(neg[i])
    return result",0.925,-6.779424460287401
324,1,"

def solve(tuples):
    chain1 = []
    chain2 = []
    for i in range(len(tuples)):
        if i % 2 == 0:
            chain1.append(tuples[i])
        else:
            chain2.append(tuples[i])
    sum1 = sum(chain1)
    sum2 = sum(chain2)
    return sum1 + sum2",0.8962,-8.436644932684004
324,2,"

def solve(tuples):
    result = 0
    for i in range(0, len(tuples), 2):
        result += sum(tuples[i])
    return result",0.9009,-3.966204399139
324,3,"

def solve(tuples):
    sum = 0
    for i in range(0, len(tuples), 2):
        sum += tuples[i][0]
        sum += tuples[i+1][1]
    return sum",0.8789,-6.193994024663
324,4,"

def solve(tuples):
    sum = 0
    for i in range(0, len(tuples), 2):
        for j in range(len(tuples[i])):
            sum += tuples[i][j]
    return sum",0.9103,-4.511359991717
324,5,"

def solve(tuples):
    result = 0
    for i in range(0, len(tuples), 2):
        result += sum(tuples[i])
    return result",0.9009,-3.966204399139
325,1,"

def solve(n):
    # initialize a list to store the squares
    squares = []
    # initialize a counter to keep track of the number of squares
    count = 0
    # iterate through numbers from 1 to n
    for i in range(1, n+1):
        # check if the square of the number is less than or equal to n
        if i*i <= n:
            # if yes, add the square to the list of squares
            squares.append(i*i)
        else:
            # if not, break out of the loop
            break
    # reverse the list of squares to start from the largest square
    squares.reverse()
    # iterate through the squares
    for square in squares:
        # check if the square is less than or equal to n
        if square <= n:
            # if yes, subtract the square from n
            n = n - square
            # increase the counter by 1
            count += 1
        # if the square is greater than n, continue to the next square
        else:
            continue
    # return the counter
    return count",0.8367,-42.44510818338201
325,2,"

def solve(num):
    dp = [0] * (num + 1)
    for i in range(1, num + 1):
        dp[i] = i
        for j in range(1, i):
            if j * j > i:
                break
            dp[i] = min(dp[i], 1 + dp[i - j * j])
    return dp[num]",0.9081,-8.004671043926
325,3,"

def solve(n):

    # base case
    if n == 0:
        return 0

    # initialize minimum number of squares
    min_squares = n

    # loop through all possible squares
    for i in range(1, int(n**0.5) + 1):
        
        # recursive call
        temp = 1 + solve(n - i**2)

        # update minimum number of squares
        if temp < min_squares:
            min_squares = temp

    return min_squares",0.7852,-26.8353289699699
325,4,"

def solve(n):
    dp = [0] * (n+1)
    dp[0] = 0
    dp[1] = 1
    for i in range(2, n+1):
        dp[i] = i
        for j in range(1, i+1):
            temp = j*j
            if temp > i:
                break
            else:
                dp[i] = min(dp[i], 1+dp[i-temp])
    return dp[n]",0.905,-10.47599483987
325,5,"

def solve(n):
    dp = [0] * (n + 1)
    for i in range(1, n + 1):
        dp[i] = i
        for j in range(1, i + 1):
            if j * j > i:
                break
            dp[i] = min(dp[i], 1 + dp[i - j * j])
    return dp[n]",0.9013,-8.933363730963002
326,1,"

def solve(strings):
    word_counts = {}
    for string in strings:
        words = string.split()
        for word in words:
            if word in word_counts:
                word_counts[word] += 1
            else:
                word_counts[word] = 1
    max_count = 0
    max_word = """"
    for word, count in word_counts.items():
        if count > max_count:
            max_count = count
            max_word = word
    return max_word",0.9405,-6.199249571312799
326,2,"

def solve(strings):
    word_count = {}
    for string in strings:
        words = string.split()
        for word in words:
            if word in word_count:
                word_count[word] += 1
            else:
                word_count[word] = 1
    max_count = 0
    max_word = """"
    for word, count in word_count.items():
        if count > max_count:
            max_count = count
            max_word = word
    return max_word",0.9474,-5.456259869861899
326,3,"

def solve(strings):
    words = {}
    for string in strings:
        for word in string.split():
            if word not in words:
                words[word] = 1
            else:
                words[word] += 1
    max_word = ''
    max_count = 0
    for word, count in words.items():
        if count > max_count:
            max_word = word
            max_count = count
    return max_word",0.9003,-9.660720666696797
326,4,"

def solve(strings):
    words = {}
    for string in strings:
        for word in string.split():
            if word in words:
                words[word] += 1
            else:
                words[word] = 1
    max_word = max(words, key=words.get)
    return max_word",0.9034,-6.4027907912325
326,5,"

def solve(strings):
    count_dict = {}
    for string in strings:
        words = string.split()
        for word in words:
            if word in count_dict:
                count_dict[word] += 1
            else:
                count_dict[word] = 1

    max_count = 0
    max_word = """"
    for word, count in count_dict.items():
        if count > max_count:
            max_count = count
            max_word = word

    return max_word",0.9061,-9.961888387162402
327,1,"

def solve(a, b, c):
    if a == b or a == c or b == c:
        print(""The triangle is isosceles."")
    else:
        print(""The triangle is not isosceles."")",0.9384,-3.1150462837909996
327,2,"

def solve(side1, side2, side3):
    if side1 == side2 or side1 == side3 or side2 == side3:
        print(""The triangle is isosceles."")
    else:
        print(""The triangle is not isosceles."")",0.9603,-2.352163328215001
327,3,"

def solve(x, y, z):
    if x == y or x == z or y == z:
        print(""This triangle is isosceles."")
    else:
        print(""This triangle is not isosceles."")",0.8451,-8.249423339481503
327,4,"

def solve(side1, side2, side3):
    if side1 == side2 or side2 == side3 or side1 == side3:
        print(""The triangle is isosceles."")
    else:
        print(""The triangle is not isosceles."")",0.9426,-3.431610443379499
327,5,"

def solve(a,b,c):
    if a == b or b == c or a == c:
        print(""The triangle is isosceles."")
    else:
        print(""The triangle is not isosceles."")",0.9096,-4.4537859653487
328,1,"

def solve(lst, k):
    return lst[k:] + lst[:k]",0.7973,-3.850493921139
328,2,"

def solve(lst, n):
    n = n % len(lst)
    return lst[n:] + lst[:n]",0.9038,-2.529867033627
328,3,"

def solve(lst, n):
    n = n % len(lst)
    return lst[n:] + lst[:n]",0.9038,-2.529867033627
328,4,"

def solve(lst, n):
    return lst[n:] + lst[:n]",0.8909,-1.964697542529
328,5,"

def solve(lst, n):
    n = n % len(lst)
    return lst[n:] + lst[:n]",0.9038,-2.529867033627
329,1,"

def solve(lst):
    count = 0
    for num in lst:
        if num < 0:
            count += 1
    return count",0.9798,-0.6750711285036002
329,2,"

def solve(lst):
    count = 0
    for num in lst:
        if num < 0:
            count += 1
    return count",0.9798,-0.6750711285036002
329,3,"

def solve(lst):
    count = 0
    for num in lst:
        if num < 0:
            count += 1
    return count",0.9798,-0.6750711285036002
329,4,"

# Function to count negative numbers in a list
def solve(lst):
    count = 0
    for i in lst:
        if i < 0:
            count += 1
    return count",0.7472,-12.531021390132995
329,5,"

def solve(lst):
    count = 0
    for num in lst:
        if num < 0:
            count += 1
    return count",0.9798,-0.6750711285036002
330,1,"

import re
def solve(string):
    three_char_words = re.findall(r'\b\w{3}\b', string)
    four_char_words = re.findall(r'\b\w{4}\b', string)
    five_char_words = re.findall(r'\b\w{5}\b', string)
    return three_char_words + four_char_words + five_char_words",0.9162,-6.8281718554875
330,2,"

import re

def solve(string):
    three_char_words = re.findall(r'\b\w{3}\b', string)
    four_char_words = re.findall(r'\b\w{4}\b', string)
    five_char_words = re.findall(r'\b\w{5}\b', string)
    return three_char_words + four_char_words + five_char_words",0.9418,-4.676904782387799
330,3,"

def solve(string):
    pattern = r'\b[a-zA-Z]{3,5}\b'
    matches = re.findall(pattern, string)
    return matches",0.8614,-4.923148572078
330,4,"

import re

def solve(string):
    three_char = re.findall(r'\b\w{3}\b', string)
    four_char = re.findall(r'\b\w{4}\b', string)
    five_char = re.findall(r'\b\w{5}\b', string)
    
    return three_char + four_char + five_char",0.9316,-5.1715439634748
330,5,"

import re

def solve(string):
    three_char = re.findall(r'\b\w{3}\b', string)
    four_char = re.findall(r'\b\w{4}\b', string)
    five_char = re.findall(r'\b\w{5}\b', string)
    return three_char + four_char + five_char",0.9378,-4.622863770456799
331,1,"

def solve(n):
    count = 0
    while n > 0:
        if n & 1 == 0:
            count += 1
        n = n >> 1
    return count",0.9143,-4.033657843475003
331,2,"

def solve(n):
    count = 0
    while n > 0:
        if n % 2 == 0:
            count += 1
        n = n // 2
    return count",0.9469,-2.4535503276999995
331,3,"

def solve(n):
    count = 0
    while n > 0:
        if n % 2 == 0:
            count += 1
        n = n // 2
    return count",0.9469,-2.4535503276999995
331,4,"

def solve(num):
    count = 0
    while num > 0:
        if num & 1 == 0:
            count += 1
        num = num >> 1
    return count
",0.8042,-10.0265567908865
331,5,"

def solve(n):
    count = 0
    while n > 0:
        if n % 2 == 0:
            count += 1
        n = n // 2
    return count",0.9469,-2.4535503276999995
332,1,"

def solve(string):
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    return freq",0.9681,-1.3946838538969997
332,2,"

def solve(string):
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    return freq",0.9681,-1.3946838538969997
332,3,"

def solve(string):
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    return freq",0.9681,-1.3946838538969997
332,4,"

def solve(string):
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    return freq",0.9681,-1.3946838538969997
332,5,"

def solve(string):
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    return freq",0.9681,-1.3946838538969997
333,1,"

def solve(lst):
    return sorted(lst, key=lambda x: x[1])",0.9031,-1.8353498823837
333,2,"

def solve(list):
    return sorted(list, key=lambda x: x[1])",0.855,-2.819991785724999
333,3,"

def solve(list):
    list.sort(key=lambda x: x[1])
    return list",0.8805,-2.4182309137500004
333,4,"

def solve(lst):
    lst.sort(key=lambda x: x[1])
    return lst",0.9228,-1.5274382533465
333,5,"

def solve(lst):
    lst.sort(key=lambda x: x[1])
    return lst",0.9228,-1.5274382533465
334,1,"

def solve(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        return True
    else:
        return False",0.9309,-2.791407668129
334,2,"

def solve(a,b,c): 
    if (a+b > c) and (a+c > b) and (b+c > a): 
        return True
    else: 
        return False",0.7765,-10.621995590159
334,3,"

def solve(a,b,c):
    if (a+b>c) and (a+c>b) and (b+c>a):
        return True
    else:
        return False",0.8915,-4.134383945471
334,4,"

def solve(side1, side2, side3):
    if (side1 + side2 > side3) and (side1 + side3 > side2) and (side2 + side3 > side1):
        return True
    else:
        return False",0.948,-2.99048761082
334,5,"

def solve(side1, side2, side3):
    if side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1:
        return True
    else:
        return False",0.9409,-3.105678525984997
335,1,"

def solve(n, a1, d):
    sum = (n/2) * (2 * a1 + (n-1) * d)
    return sum",0.7592,-9.916658862171996
335,2,"

def solve(a, d, n):
    return (n/2) * (2*a + (n-1)*d)",0.9007,-2.9277662135869997
335,3,"

def solve(a, d, n):
    return (n/2)*(2*a + (n-1)*d)",0.8997,-2.747699484215999
335,4,"

def solve(a, d, n):
    return (n/2) * (2*a + (n-1)*d)",0.9007,-2.9277662135869997
335,5,"

def solve(first_term, common_difference, n):
    sum = (n / 2) * (2 * first_term + (n - 1) * common_difference)
    return sum",0.8422,-6.867741540942
336,1,"

def solve(month):
    if month in [""February""]:
        return ""Contains 28 days""
    else:
        return ""Does not contain 28 days""",0.8084,-7.018241353304
336,2,"

def solve(month_name):
  thirty_days = ['April', 'June', 'September', 'November']
  thirty_one_days = ['January', 'March', 'May', 'July', 'August', 'October', 'December']
  if month_name in thirty_days:
    return False
  elif month_name in thirty_one_days:
    return False
  else:
    return True",0.8836,-9.778621769426003
336,3,"

def solve(month_name):
    if month_name in ['February']:
        return ""28 days""
    else:
        return ""Not 28 days""",0.7577,-8.601149434868
336,4,"

def solve(month):
    thirty_one_day_months = [""January"", ""March"", ""May"", ""July"", ""August"", ""October"", ""December""]
    thirty_day_months = [""April"", ""June"", ""September"", ""November""]
    
    if month == ""February"":
        return False
    elif month in thirty_one_day_months:
        return True
    elif month in thirty_day_months:
        return False",0.8737,-11.477519920320995
336,5,"

def solve(month):
    months_28_days = ['February']
    if month in months_28_days:
        return True
    else:
        return False",0.83,-6.148494158858
337,1,"

def solve(string, word):
    if string.endswith(word):
        return True
    else:
        return False",0.8558,-3.581386147060001
337,2,"

def solve(string, word):
    if string.endswith(word):
        return True
    elif string.endswith(word + "".""):
        return True
    elif string.endswith(word + "",""):
        return True
    elif string.endswith(word + ""?""):
        return True
    elif string.endswith(word + ""!""):
        return True
    else:
        return False",0.9402,-4.3771753212975
337,3,"

def solve(string, word):
    if string.endswith(word):
        return True
    elif string.endswith(word + "".""):
        return True
    elif string.endswith(word + "",""):
        return True
    elif string.endswith(word + ""?""):
        return True
    elif string.endswith(word + ""!""):
        return True
    else:
        return False",0.9402,-4.3771753212975
337,4,"

def solve(word, string):
    if string[-len(word):] == word:
        return True
    elif string[-len(word)-1:-1] == word and string[-1] in string.punctuation:
        return True
    else:
        return False",0.8609,-8.236003660867995
337,5,"

def solve(word, string):
    pattern = r'\b' + word + r'[^\w]*$'
    match = re.search(pattern, string)
    if match:
        return match.group()
    else:
        return None",0.7922,-11.183267173687996
338,1,"

def solve(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1,len(string)+1):
            if string[i] == string[j-1]:
                count += 1
    return count",0.9177,-4.465539433190997
338,2,"

def solve(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            if string[i] == string[j-1]:
                count += 1
    return count",0.9725,-1.4798364742289996
338,3,"

def solve(string):
    count = 0
    
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            if string[i] == string[j-1]:
                count += 1
                
    return count",0.8789,-6.839027443927502
338,4,"

def solve(string):
    count = 0
    for i in range(len(string)):
        for j in range(i+1, len(string)+1):
            if string[i] == string[j-1]:
                count += 1
    return count",0.9725,-1.4798364742289996
338,5,"

def solve(str):
    count = 0
    for i in range(len(str)):
        for j in range(i+1, len(str)+1):
            if str[i] == str[j-1]:
                count += 1
    return count",0.9163,-4.630298682768001
339,1,"

def solve(start, end):
    divisors = {}
    for i in range(start, end+1):
        for j in range(1, i+1):
            if i % j == 0:
                if j in divisors:
                    divisors[j] += 1
                else:
                    divisors[j] = 1
    max_divisor = max(divisors, key=divisors.get)
    return max_divisor",0.9446,-5.243662835051002
339,2,"

def solve(start, end):
    max_divisor = 0
    for num in range(start, end+1):
        count = 0
        for i in range(1, num+1):
            if num % i == 0:
                count += 1
        if count > max_divisor:
            max_divisor = count
    return max_divisor",0.9267,-6.014629856288502
339,3,"

def solve(start, end):
    max_divisor = 0
    for num in range(start, end+1):
        divisors = []
        for i in range(1, num+1):
            if num % i == 0:
                divisors.append(i)
        if len(divisors) > len(max_divisor):
            max_divisor = divisors
    return max_divisor[-1]",0.9174,-7.409873791072502
339,4,"

def solve(start,end):
    divisors = {}
    for num in range(start, end+1):
        for i in range(1, num+1):
            if num % i == 0:
                if i in divisors:
                    divisors[i] += 1
                else:
                    divisors[i] = 1
    max_div = max(divisors.values())
    for key, value in divisors.items():
        if value == max_div:
            return key",0.8843,-12.2990009366678
339,5,"

def solve(start, end):
    divisors = []
    for num in range(start, end+1):
        for i in range(1, num+1):
            if num%i == 0:
                divisors.append(i)
    max_occur = max(set(divisors), key=divisors.count)
    return max_occur",0.827,-13.300242386790702
340,1,"
def solve(numbers):
    numbers = sorted(numbers)
    sum = 0
    for num in numbers:
        if num > 0:
            sum += num
            if sum == 3:
                break
    return sum",0.7879,-11.444212192648
340,2,"

def solve(numbers):
    numbers.sort()
    sum = 0
    for i in range(len(numbers)):
        if numbers[i] > 0 and i < 3:
            sum += numbers[i]
    return sum",0.8621,-6.827082498277502
340,3,"

def solve(numbers):
    sorted_nums = sorted(numbers)
    lowest_nums = sorted_nums[:3]
    return sum(lowest_nums)",0.848,-4.617592886323999
340,4,"

def solve(lst):
    lst.sort()
    sum = 0
    for num in lst:
        if num > 0:
            sum += num
            if sum == 3:
                break
    return sum",0.8348,-8.307118508552001
340,5,"

def solve(nums):
    sorted_nums = sorted(nums)
    lowest_nums = sorted_nums[:3]
    return sum(lowest_nums)",0.825,-5.385383816306501
341,1,"

def solve(s):
    ordered_tuples = []
    for item in s:
        ordered_tuples.append(tuple(sorted(item)))
    return ordered_tuples",0.8143,-5.750962809805
341,2,"

def solve(s):
    ordered_tuples = []
    for elem in sorted(s):
        ordered_tuples.append((elem,))
    return ordered_tuples",0.7734,-7.194970818199999
341,3,"

def solve(s):
    return tuple(sorted(s))",0.8075,-2.35189511182
341,4,"

def solve(s):
    return sorted(tuple(x) for x in s)",0.7385,-4.850036288799
341,5,"

def solve(s):
    return tuple(sorted(s))",0.8075,-2.35189511182
342,1,"

def solve(arrays):
    # initialize variables
    n = len(arrays)
    max_val = float('-inf')
    min_val = float('inf')
    range_val = float('inf')
    # create a list of tuples to store the index and current value for each array
    queue = []
    # add the first element from each array to the queue
    for i in range(n):
        queue.append((i,0,arrays[i][0]))
    # sort the queue based on the current value
    queue.sort(key=lambda x: x[2])
    # loop until the queue is empty
    while queue:
        # get the index of the array with the smallest current value
        idx, j, val = queue[0]
        # update the maximum value
        max_val = max(max_val, val)
        # update the minimum value
        min_val = min(min_val, val)
        # remove the first element from the queue
        queue.pop(0)
        # if there are more elements in the current array, add the next element to the queue
        if j + 1 < len(arrays[idx]):
            queue.append((idx, j+1, arrays[idx][j+1]))
            # re-sort the queue
            queue.sort(key=lambda x: x[2])
        # if the queue is empty or the current range is smaller than the previous smallest range, update the range
        if not queue or max_val - min_val < range_val:
            range_val = max_val - min_val
    # return the smallest range
    return range_val",0.7792,-82.83642364792652
342,2,"

def solve(arrays):
    # initialize variables
    min_range = None
    min_num = None
    max_num = None
    # create a set of all numbers in the arrays
    all_nums = set()
    for arr in arrays:
        all_nums.update(arr)
    # loop through all numbers and check if they are present in all arrays
    for num in all_nums:
        is_in_all = True
        for arr in arrays:
            if num not in arr:
                is_in_all = False
                break
        # if num is present in all arrays, update min_range, min_num, and max_num
        if is_in_all:
            if min_range is None:
                min_range = 1
            if min_num is None or num < min_num:
                min_num = num
            if max_num is None or num > max_num:
                max_num = num
            # check if the range is smaller than the current min_range
            if max_num - min_num + 1 < min_range:
                min_range = max_num - min_num + 1
    return min_range",0.8039,-51.08479270950961
342,3,"

def solve(arrays):
    # initialize variables
    min_range = float('inf') # set initial range to infinity
    max_val = float('-inf') # set initial max value to negative infinity
    min_val = float('inf') # set initial min value to infinity
    range_list = [] # list to store ranges
    
    # iterate through arrays
    for arr in arrays:
        # find min and max values in current array
        min_val = min(arr)
        max_val = max(arr)
        
        # check if current range is smaller than min_range
        if (max_val - min_val) < min_range:
            # update min_range
            min_range = max_val - min_val
        
        # add current range to range_list
        range_list.append((min_val, max_val))
    
    # sort range_list in ascending order
    range_list.sort()
    
    # initialize variables for current range
    current_range = range_list[0][1] - range_list[0][0]
    current_min = range_list[0][0]
    current_max = range_list[0][1]
    
    # iterate through range_list
    for i in range(len(range_list)):
        # check if current range is smaller than min_range
        if current_range < min_range:
            # update min_range
            min_range = current_range
        
        # check if current max value is less than the maximum value in the last array
        if current_max < range_list[len(range_list)-1][1]:
            # update current_max
            current_max = range_list[i+1][1]
        
        # check if current min value is greater than the minimum value in the last array
        if current_min > range_list[len(range_list)-1][0]:
            # update current_min
            current_min = range_list[i+1][0]
        
        # update current_range
        current_range = current_max - current_min
    
    # return smallest range
    return min_range",0.8197,-82.28704814078075
342,4,"

def solve(arrays):
    # initialize variables
    min_range = float('inf')
    max_value = float('-inf')

    # find the maximum value among all arrays
    for arr in arrays:
        max_value = max(max_value, max(arr))

    # iterate through all possible values from min to max
    for val in range(min(arrays[0]), max_value+1):
        is_in_range = True
        # check if the current value is present in all arrays
        for arr in arrays:
            if val not in arr:
                is_in_range = False
                break
        # if current value is present in all arrays, update min range
        if is_in_range:
            min_range = min(min_range, max_value-val)

    return min_range",0.765,-43.39225190844599
342,5,"

def solve(arr):
    # find the number of arrays
    n = len(arr)
    
    # initialize minimum and maximum values
    min_val = float('inf')
    max_val = float('-inf')
    
    # initialize pointers for each array
    ptr = [0] * n
    
    # initialize flag to check if all arrays have been traversed
    flag = False
    
    # loop until all arrays have been traversed
    while not flag:
        # find the minimum and maximum values among the current elements
        curr_min = min(arr[i][ptr[i]] for i in range(n))
        curr_max = max(arr[i][ptr[i]] for i in range(n))
        
        # update the minimum range if necessary
        if curr_max - curr_min < min_val:
            min_val = curr_max - curr_min
        
        # increment the pointer for the array with the minimum value
        for i in range(n):
            if arr[i][ptr[i]] == curr_min:
                ptr[i] += 1
        
        # check if all arrays have been traversed
        if ptr[0] == len(arr[0]):
            flag = True
    
    # return the smallest range
    return min_val",0.8393,-44.48418128579832
343,1,"

def solve(string):
    digits = 0
    letters = 0
    for char in string:
        if char.isdigit():
            digits += 1
        elif char.isalpha():
            letters += 1
    return digits, letters",0.9686,-1.6289340853258
343,2,"

def solve(string):
    digits = 0
    letters = 0
    for char in string:
        if char.isdigit():
            digits += 1
        elif char.isalpha():
            letters += 1
    return digits, letters",0.9686,-1.6289340853258
343,3,"

def solve(string):
    digits = 0
    letters = 0
    for char in string:
        if char.isdigit():
            digits += 1
        elif char.isalpha():
            letters += 1
    return digits, letters",0.9686,-1.6289340853258
343,4,"

def solve(s):
    digits = 0
    letters = 0
    for char in s:
        if char.isdigit():
            digits += 1
        elif char.isalpha():
            letters += 1
    return digits, letters",0.936,-3.3727082396029
343,5,"

def solve(string):
    digits = 0
    letters = 0
    for char in string:
        if char.isdigit():
            digits += 1
        elif char.isalpha():
            letters += 1
    return digits, letters",0.9686,-1.6289340853258
344,1,"

def solve(start, end):
    count = 0
    for i in range(start, end+1):
        factors = 0
        for j in range(1, i+1):
            if i % j == 0:
                factors += 1
        if factors % 2 != 0:
            count += 1
    return count",0.9637,-2.8116932828269015
344,2,"

def solve(start, end):
    count = 0
    for num in range(start, end+1):
        factors = []
        for i in range(1, num+1):
            if num%i == 0:
                factors.append(i)
        if len(factors)%2 != 0:
            count += 1
    return count",0.9326,-5.0962490686686
344,3,"

def solve(start, end):
    count = 0
    for num in range(start, end+1):
        factors = [i for i in range(1, num+1) if num % i == 0]
        if len(factors) % 2 != 0:
            count += 1
    return count",0.9419,-4.189803283347599
344,4,"

def solve(start, end):

    count = 0

    for num in range(start, end+1):
        factors = []
        for i in range(1, num+1):
            if num % i == 0:
                factors.append(i)
        if len(factors) % 2 != 0:
            count += 1

    return count",0.8937,-8.537791268691002
344,5,"

def solve(start, end):
    count = 0
    for num in range(start, end+1):
        factors = 0
        for i in range(1, num+1):
            if num % i == 0:
                factors += 1
        if factors % 2 != 0:
            count += 1
    return count",0.9689,-2.3978468477889
345,1,"

def solve(lst):
    diff = []
    for i in range(len(lst)-1):
        diff.append(lst[i+1] - lst[i])
    return diff",0.9174,-2.930056823006
345,2,"

def solve(lst):
    diff = []
    for i in range(len(lst)-1):
        diff.append(abs(lst[i+1]-lst[i]))
    return diff",0.8678,-4.821392346353999
345,3,"

def solve(lst):
    diff = []
    for i in range(len(lst)-1):
        diff.append(lst[i+1] - lst[i])
    return diff",0.9174,-2.930056823006
345,4,"

def solve(numbers):
    diff = []
    for i in range(len(numbers)-1):
        diff.append(numbers[i+1] - numbers[i])
    return diff ",0.8198,-6.956260638031999
345,5,"

def solve(list):
    difference = []
    for i in range(len(list)-1):
        difference.append(list[i+1]-list[i])
    return difference",0.7909,-7.739974311294001
346,1,"

def solve(n,k):
    result = 0
    for i in range(1,n+1):
        result += i**k
    return result",0.8271,-6.263528176823001
346,2,"

def solve(n, k):
    e = 1
    for i in range(1, n+1):
        e = e + (1/i)**k
    return e",0.8013,-8.641491389609001
346,3,"

def solve(n, k):
    e = 1
    for i in range(1, n+1):
        e *= (1 + (k/i))
    return e",0.7912,-8.901833443349004
346,4,"

def solve(n, k):
    e = 1
    for i in range(1, n+1):
        e += (1 / (i ** k))
    return e",0.7913,-9.129507527048998
346,5,"

def solve(n, k):
    e = 1
    for i in range(1, n+1):
        e *= (k + i - 1) / i
    return e",0.83,-7.823744359948999
347,1,"

def solve(length, width):
    if length == 0 or width == 0:
        return 0
    else:
        return length * width + solve(length - 1, width) + solve(length, width - 1) - solve(length - 1, width - 1)",0.8414,-10.710100508757998
347,2,"

def solve(length, width):
    count = 0
    for i in range(1, min(length, width) + 1):
        count += (length - i + 1) * (width - i + 1)
    return count",0.9474,-2.8615903016362982
347,3,"

def solve(length, width):
    return (length * width) + (length-1) * (width-1)",0.7905,-6.111359677590001
347,4,"

def solve(length, width):
    return (length * (length + 1) * (2 * length + 1) * width * (width + 1) * (2 * width + 1)) // 12",0.9067,-4.6988661236
347,5,"

def solve(length, width):
    squares = 0
    for i in range(1, min(length, width) + 1):
        squares += (length - i + 1) * (width - i + 1)
    return squares",0.9292,-3.8917207647153
348,1,"
def solve(values, length):
    count = 0
    for i in range(len(values)):
        prefix_sum = 0
        for j in range(i, len(values)):
            prefix_sum += values[j]
            if prefix_sum >= 0 and j-i+1 == length:
                count += 1
    return count",0.9057,-6.835518292565001
348,2,"

def solve(length, values):
    count = 0
    prefix_sum = 0
    for i in range(length):
        for j in range(length):
            prefix_sum += values[j]
            if prefix_sum >= 0:
                count += 1
    return count",0.818,-11.650267930722002
348,3,"

def solve(values, length):
    count = 0
    for i in range(len(values)):
        prefix_sum = 0
        for j in range(i, len(values)):
            prefix_sum += values[j]
            if prefix_sum >= 0 and j-i+1 == length:
                count += 1
    return count",0.9411,-4.185843126866001
348,4,"

def solve(values, length):
    count = 0
    for i in range(len(values)-length+1):
        if sum(values[i:i+length]) >= 0:
            count += 1
    return count",0.9066,-4.607734425986999
348,5,"

def solve(values, n):
    count = 0
    for i in range(len(values)-n+1):
        if all(sum(values[i:i+n]) >= 0 for j in range(n)):
            count += 1
    return count",0.7503,-14.94133481246
349,1,"

def solve(string):
    for char in string:
        if char != '0' and char != '1':
            return False
    return True",0.9524,-1.5110645208749998
349,2,"

def solve(string):
    for char in string:
        if char not in ['0', '1']:
            return False
    return True",0.9191,-2.4453040360919
349,3,"

def solve(string):
    binary = ""01""
    for char in string:
        if char not in binary:
            return False
    return True",0.8142,-6.370502775545999
349,4,"

def solve(string):
    for char in string:
        if char not in ['0', '1']:
            return False
    return True",0.9191,-2.4453040360919
349,5,"

def solve(string):
    for char in string:
        if char not in ['0', '1']:
            return False
    return True",0.9191,-2.4453040360919
350,1,"

def solve(string):
    for i in range(len(string)):
        new_string = string[:i] + string[i+1:]
        if len(set(new_string)) == len(new_string):
            return new_string
    return string",0.9286,-3.4815765516459996
350,2,"

def solve(string):
    for i in range(len(string)):
        new_string = string[:i] + string[i+1:]
        if len(set(new_string)) == len(new_string):
            return new_string",0.9435,-2.5028849359459997
350,3,"

def solve(s):
    if len(s) <= 2:
        return s
    for i in range(len(s)):
        new_s = s[:i] + s[i+1:]
        if len(set(new_s)) == len(new_s):
            return new_s",0.8396,-9.791587197851502
350,4,"

def solve(string):
    for i in range(len(string)):
        temp = string[:i] + string[i+1:]
        if temp == temp[::-1]:
            return temp
    return ""Not possible""",0.8389,-7.727072697252499
350,5,"

def solve(string):
    for i in range(len(string)):
        if string.count(string[i]) == 1:
            return string.replace(string[i], """")
    return string",0.837,-6.22836913245
351,1,"

def solve(arr, k):
    count = {}
    for num in arr:
        if num in count:
            count[num] += 1
        else:
            count[num] = 1
    for num in arr:
        if count[num] == k:
            return num
    return -1",0.9374,-4.1369219403590005
351,2,"

def solve(arr, k):
    count = {}
    for num in arr:
        if num in count:
            count[num] += 1
        else:
            count[num] = 1
            
        if count[num] == k:
            return num
            
    return -1",0.8517,-9.308211645502
351,3,"

def solve(arr,k):
    for i in range(len(arr)):
        count = 0
        for j in range(len(arr)):
            if arr[i] == arr[j]:
                count += 1
        if count == k:
            return arr[i]
    return -1",0.8788,-7.4914738022912
351,4,"

def solve(arr, k):
    for i in arr:
        if arr.count(i) == k:
            return i
    return -1",0.8787,-3.8778859636
351,5,"

def solve(arr, k):
    count = {}

    for num in arr:
        if num in count:
            count[num] += 1
        else:
            count[num] = 1
    
    for num in arr:
        if count[num] == k:
            return num
    
    return -1",0.8814,-8.081217816701999
352,1,"

def solve(string):
    unique = True
    for i in range(len(string)):
        for j in range(i+1, len(string)):
            if string[i] == string[j]:
                unique = False
                break
    return unique",0.8803,-6.374546251808601
352,2,"

def solve(string):
    unique = set(string)
    if len(unique) == len(string):
        return True
    else:
        return False",0.8751,-4.003291290156
352,3,"

def solve(string):
    unique_chars = set()
    for char in string:
        if char in unique_chars:
            return False
        else:
            unique_chars.add(char)
    return True",0.9292,-2.9374485985455996
352,4,"

def solve(string):
    if len(string) == len(set(string)):
        return True
    else:
        return False",0.883,-3.1117418444250005
352,5,"

def solve(string):
    char_set = set()
    for char in string:
        if char in char_set:
            return False
        else:
            char_set.add(char)
    return True",0.913,-3.6425884182353
353,1,"

def solve(nested_list, col_index):
    for row in nested_list:
        del row[col_index]
    return nested_list",0.8922,-3.079528951561999
353,2,"

def solve(nested_list, col):
    for row in nested_list:
        del row[col]
    return nested_list ",0.7859,-6.262802740448
353,3,"

def solve(nested_list, col):
  for row in nested_list:
    del row[col]
  return nested_list",0.8025,-5.501313648441001
353,4,"

def solve(nested_list, column):
    for row in nested_list:
        del row[column]
    return nested_list",0.9237,-1.9832975675749995
353,5,"

def solve(nested_list, column):
    for row in nested_list:
        del row[column]
    return nested_list",0.9237,-1.9832975675749995
354,1,"

def solve(a, d, n):
    return a + (n-1)*d",0.9448,-1.0795632141849998
354,2,"

def solve(a, d, n):
    return a + (n-1)*d",0.9448,-1.0795632141849998
354,3,"

def solve(a, d, n):
    return a + (n-1)*d",0.9448,-1.0795632141849998
354,4,"

def solve(a, d, n):
    return a + (n-1)*d",0.9448,-1.0795632141849998
354,5,"

def solve(a, d, n):
    return a + (n-1)*d",0.9448,-1.0795632141849998
355,1,"

def solve(r):
    count = 0
    for i in range(r):
        for j in range(r):
            if i**2 + j**2 <= r**2:
                count += 1
    return count",0.8883,-5.687465701048997
355,2,"

def solve(r):
    count = 0
    for x in range(-r, r+1):
        for y in range(-r, r+1):
            if x**2 + y**2 <= r**2:
                for w in range(1, abs(x)+1):
                    for h in range(1, abs(y)+1):
                        if w*h == abs(x)*abs(y):
                            count += 1
    return count",0.8558,-14.791137481760996
355,3,"

def solve(r):
    count = 0
    for i in range(r):
        for j in range(r):
            if (i**2 + j**2) <= r**2:
                count += 1
    return count",0.8883,-5.924957179287999
355,4,"

def solve(r):
    return int((r**2 / 4) * (4 * (r + 1) + 3))",0.5817,-16.254684569600002
355,5,"

from math import sqrt

def solve(r):
    return round(r ** 2 * (2 - sqrt(2)))",0.4972,-17.46881508642
356,1,"

def solve(angle1, angle2):
    angle3 = 180 - angle1 - angle2
    return angle3",0.9715,-0.753076216075
356,2,"

def solve(angle1, angle2):
    angle3 = 180 - angle1 - angle2
    return angle3",0.9715,-0.753076216075
356,3,"

def solve(angle1, angle2):
    angle3 = 180 - angle1 - angle2
    return angle3",0.9715,-0.753076216075
356,4,"

def solve(angle1, angle2):
    angle3 = 180 - angle1 - angle2
    return angle3",0.9715,-0.753076216075
356,5,"

def solve(angle1, angle2):
    angle3 = 180 - angle1 - angle2
    return angle3",0.9715,-0.753076216075
357,1,"

def solve(records):
    max_element = records[0][0]
    for tup in records:
        for element in tup:
            if element > max_element:
                max_element = element
    return max_element",0.8622,-6.522042622522998
357,2,"

def solve(tuples):
    max_element = float(""-inf"")
    for tuple in tuples:
        for element in tuple:
            if element > max_element:
                max_element = element
    return max_element",0.869,-6.038474911126001
357,3,"

def solve(records):
    max_element = records[0][0]
    for record in records:
        for element in record:
            if element > max_element:
                max_element = element
    return max_element",0.9394,-2.748455548407001
357,4,"

def solve(*tuples):
    max_element = float('-inf')
    for tuple in tuples:
        for element in tuple:
            if element > max_element:
                max_element = element
    return max_element",0.8521,-7.0426274298994995
357,5,"

def solve(tuples):
    max_element = tuples[0][0]
    for tup in tuples:
        for elem in tup:
            if elem > max_element:
                max_element = elem
    return max_element",0.8816,-5.672386314908002
358,1,"

def solve(list1, list2):
  return list(map(lambda x, y: x%y, list1, list2))",0.8388,-4.9235065153385005
358,2,"

def solve(list1, list2):
    return list(map(lambda x,y: x%y, list1, list2))",0.9233,-2.1547475180415
358,3,"

def solve(list1, list2):
    return list(map(lambda x, y: x % y, list1, list2))",0.9563,-1.2512188667803998
358,4,"

def solve(list1, list2):
    return list(map(lambda x,y: x%y, list1, list2))",0.9233,-2.1547475180415
358,5,"

def solve(list1, list2):
    return list(map(lambda x, y: x % y, list1, list2))",0.9563,-1.2512188667803998
359,1,"

def solve(a, b, c):
    d = b**2 - 4*a*c
    if d < 0:
        return False
    else:
        root1 = (-b + (d ** 0.5)) / (2*a)
        root2 = (-b - (d ** 0.5)) / (2*a)
        if root1 == 2*root2 or root2 == 2*root1:
            return True
        else:
            return False",0.9044,-10.544990151208502
359,2,"

def solve(a, b, c):
    discriminant = (b**2) - (4*a*c)
    if discriminant < 0:
        return False
    else:
        x1 = (-b + (discriminant ** 0.5)) / (2 * a)
        x2 = (-b - (discriminant ** 0.5)) / (2 * a)
        if x1 == 2*x2 or x2 == 2*x1:
            return True
        else:
            return False",0.9212,-9.269057736783894
359,3,"

def solve(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return False
    else:
        root1 = (-b + discriminant**(1/2)) / (2*a)
        root2 = (-b - discriminant**(1/2)) / (2*a)
        if root1 == 2*root2 or root2 == 2*root1:
            return True
        else:
            return False",0.9305,-7.560969950680101
359,4,"

def solve(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant >= 0:
        root1 = (-b + (discriminant)**0.5) / (2*a)
        root2 = (-b - (discriminant)**0.5) / (2*a)
        if root1 == 2*root2 or root2 == 2*root1:
            return True
        else:
            return False
    else:
        return ""No real roots exist.""",0.9171,-9.869203724596298
359,5,"

def solve(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant >= 0:
        root1 = (-b + (discriminant)**0.5) / (2*a)
        root2 = (-b - (discriminant)**0.5) / (2*a)
        if root1 == 2*root2 or root2 == 2*root1:
            return True
        else:
            return False
    else:
        return False",0.9411,-6.6129837409963
360,1,"

def solve(n):
    if n == 0:
        return 1
    else:
        return sum([solve(i)*solve(n-i-1) for i in range(n)])",0.8599,-5.884783992172999
360,2,"

def solve(n):
    if n == 0:
        return 1
    else:
        return (3 * solve(n-1) + 2) % 1000000007",0.8335,-7.284566463044
360,3,"

def solve(n):
    if n == 0:
        return 1
    else:
        return sum([solve(i)*solve(n-i-1) for i in range(n)])",0.8599,-5.884783992172999
360,4,"

def solve(n):
    if n == 0:
        return 1
    else:
        return (2*(2*n-1)/(n+1))*solve(n-1)",0.8264,-7.438378988154001
360,5,"

def solve(n):
    if n==0:
        return 1
    else:
        return (3*n-2)*solve(n-1)",0.7838,-7.796828622513001
361,1,"

def solve(lst):
    return [x for x in lst if x]",0.8168,-3.2376554900135
361,2,"

def solve(list_of_lists):
    return [lst for lst in list_of_lists if lst]",0.8685,-2.8187902694469997
361,3,"

def solve(list_of_lists):
    return [x for x in list_of_lists if x]",0.8155,-4.078134432795
361,4,"

def solve(lst):
    return [sublst for sublst in lst if sublst]",0.8118,-3.9623345486965
361,5,"

def solve(list_of_lists):
    return [lst for lst in list_of_lists if lst != []]",0.8459,-3.680954138647
362,1,"

def solve(lst):
    count_dict = {}
    for item in lst:
        if item not in count_dict:
            count_dict[item] = 1
        else:
            count_dict[item] += 1
    max_count = 0
    max_item = None
    for item, count in count_dict.items():
        if count > max_count:
            max_count = count
            max_item = item
    return max_item",0.9131,-8.268120554526202
362,2,"

def solve(lst):
    count_dict = {}
    for item in lst:
        if item in count_dict:
            count_dict[item] += 1
        else:
            count_dict[item] = 1
    
    max_count = 0
    max_item = None
    for item, count in count_dict.items():
        if count > max_count:
            max_count = count
            max_item = item
    
    return max_item",0.9322,-6.321546372865201
362,3,"

def solve(lst):
    counts = {}
    for item in lst:
        counts[item] = counts.get(item, 0) + 1
    max_count = 0
    max_item = None
    for key, value in counts.items():
        if value > max_count:
            max_count = value
            max_item = key
    return max_item",0.8918,-8.704945080522597
362,4,"

def solve(lst):
    max_count = 0
    max_item = None
    
    for item in lst:
        count = lst.count(item)
        if count > max_count:
            max_count = count
            max_item = item
    
    return max_item",0.9343,-3.6679872276686
362,5,"

def solve(lst):
    count_dict = {}

    for item in lst:
        if item in count_dict:
            count_dict[item] += 1
        else:
            count_dict[item] = 1

    max_count = max(count_dict.values())

    for key, value in count_dict.items():
        if value == max_count:
            return key",0.8719,-10.0076622395381
363,1,"

def solve(tup, k):
    return tuple(map(lambda x: x + k, tup))",0.8414,-3.62711898726
363,2,"

def solve(tup, k):
    return tuple(x+k for x in tup)",0.8129,-3.728858999727001
363,3,"

def solve(tup, k):
    result = []
    for elem in tup:
        result.append(elem + k)
    return tuple(result)",0.8321,-5.514665702439002
363,4,"

def solve(tup, k):
    return tuple(elem + k for elem in tup)",0.795,-4.359383921046
363,5,"

def solve(tup, k):
    new_tup = tuple(i+k for i in tup)
    return new_tup",0.8129,-5.3853268553256
364,1,"

def solve(binary_string):
    flips = 0
    for i in range(len(binary_string) - 1):
        if binary_string[i] == binary_string[i+1]:
            flips += 1
    return flips",0.909,-4.485188758060999
364,2,"

def solve(binary_str):
    flips = 0
    for i in range(len(binary_str)):
        if i % 2 == 0 and binary_str[i] == ""0"":
            flips += 1
        elif i % 2 == 1 and binary_str[i] == ""1"":
            flips += 1
    return flips",0.8369,-12.823792031993204
364,3,"

def solve(binary_string):
    flips = 0
    for i in range(1, len(binary_string)):
        if binary_string[i] == binary_string[i-1]:
            flips += 1
    return flips",0.9148,-4.097705815015
364,4,"

def solve(s):
    count = 0
    for i in range(len(s)-1):
        if s[i] == s[i+1]:
            count += 1
    return count",0.9258,-3.160080162922001
364,5,"

def solve(s):
    flips = 0
    for i in range(len(s)-1):
        if s[i] == s[i+1]:
            flips += 1
    return flips",0.9239,-3.247163814124999
365,1,"

def solve(n):
    count = 0
    while n > 0:
        count += 1
        n //= 10
    return count",0.8759,-4.372537406301
365,2,"

def solve(num):
    count = 0
    while num > 0:
        num = num // 10
        count += 1
    return count",0.9358,-2.3241449082124004
365,3,"

def solve(num):
    count = 0
    while num > 0:
        num = num // 10
        count += 1
    return count",0.9358,-2.3241449082124004
365,4,"

def solve(num):
    count = 0
    while num > 0:
        num = num // 10
        count += 1
    return count",0.9358,-2.3241449082124004
365,5,"

def solve(number):
    count = 0
    while number != 0:
        number //= 10
        count += 1
    return count",0.8898,-3.85327530846
366,1,"

def solve(nums):
    max_product = float('-inf')
    for i in range(len(nums)-1):
        product = nums[i] * nums[i+1]
        if product > max_product:
            max_product = product
    return max_product",0.9125,-4.759635033683002
366,2,"

def solve(lst):
    largest_product = lst[0] * lst[1]
    for i in range(1, len(lst) - 1):
        if lst[i] * lst[i+1] > largest_product:
            largest_product = lst[i] * lst[i+1]
    return largest_product",0.8978,-7.008776648624502
366,3,"

def solve(nums):
    largest_product = 0
    for i in range(len(nums)-1):
        product = nums[i] * nums[i+1]
        if product > largest_product:
            largest_product = product
    return largest_product",0.9343,-3.4668201234381
366,4,"

def solve(nums):
    max_prod = nums[0] * nums[1]
    for i in range(len(nums)-1):
        if nums[i] * nums[i+1] > max_prod:
            max_prod = nums[i] * nums[i+1]
    return max_prod",0.8632,-8.8249076736285
366,5,"

def solve(nums):
    max_product = nums[0] * nums[1]
    for i in range(1, len(nums)-1):
        product = nums[i] * nums[i+1]
        if product > max_product:
            max_product = product
    return max_product",0.9234,-4.782105543642001
367,1,"

def solve(root):
    if root is None:
        return True
    
    def checkBalance(node):
        if node is None:
            return 0
        
        left = checkBalance(node.left)
        if left == -1:
            return -1
        
        right = checkBalance(node.right)
        if right == -1:
            return -1
        
        if abs(left - right) > 1:
            return -1
        
        return max(left, right) + 1
    
    return checkBalance(root) != -1",0.8941,-12.092221964864994
367,2,"

def solve(root):
    if not root:
        return True
    
    left_height = height(root.left)
    right_height = height(root.right)
    
    if abs(left_height - right_height) > 1:
        return False
    
    return solve(root.left) and solve(root.right)

def height(root):
    if not root:
        return 0
    
    return max(height(root.left), height(root.right)) + 1",0.9024,-8.936378126840001
367,3,"

def solve(root):
    if not root:
        return True
    
    left_height = height(root.left)
    right_height = height(root.right)
    
    if abs(left_height - right_height) > 1:
        return False
    
    return solve(root.left) and solve(root.right)

def height(node):
    if not node:
        return 0
    
    return 1 + max(height(node.left), height(node.right))",0.9187,-7.381539415190001
367,4,"

def solve(root): 
    if root == None: 
        return True
    left_height = height(root.left) 
    right_height = height(root.right) 
    if (abs(left_height - right_height) <= 1) and solve(root.left) is True and solve(root.right) is True: 
        return True
    return False

def height(node): 
    if node == None: 
        return 0
    return max(height(node.left), height(node.right)) + 1",0.8916,-11.929337305670996
367,5,"

def solve(root):
    if root is None:
        return True
    
    left_height = height(root.left)
    right_height = height(root.right)
    
    if abs(left_height - right_height) > 1:
        return False
    
    return solve(root.left) and solve(root.right)
    
def height(node):
    if node is None:
        return 0
    
    return 1 + max(height(node.left), height(node.right))",0.935,-6.048116374601002
368,1,"

def solve(t, n):
    return tuple(t * n)",0.6822,-5.354769865859001
368,2,"

def solve(tup, n):
    result = ()
    for i in range(n):
        result += tup
    return result",0.8896,-3.1595489166159996
368,3,"

def solve(tuple, n):
    repeated_tuple = tuple * n
    return repeated_tuple",0.8264,-3.62263899408
368,4,"

def solve(tuple, n):
    return tuple * n",0.8463,-2.00291551771
368,5,"

def solve(tuple, n):
    return tuple * n",0.8463,-2.00291551771
369,1,"

def solve(length, width, height):
    return 2 * (length * height + width * height)",0.9598,-0.9444964385770002
369,2,"

def solve(length, width, height):
    return 2 * (length * height + width * height)",0.9598,-0.9444964385770002
369,3,"

def solve(length, width, height):
    return 2 * (length * height + width * height)",0.9598,-0.9444964385770002
369,4,"

def solve(length, width, height):
    return 2 * height * (length + width)",0.8496,-3.4222620214069996
369,5,"

def solve(length, width, height):
    return 2 * (length * height + width * height)",0.9598,-0.9444964385770002
370,1,"
def solve(tup):
    return tuple(sorted(tup, key=lambda x: x[1]))",0.7939,-4.846501407815
370,2,"

def solve(tup):
    return sorted(tup, key=lambda x: x[1])",0.9042,-2.01314713989
370,3,"

def solve(tuple_lst):
    return sorted(tuple_lst, key=lambda x: x[1])

# Explanation:
# The function takes in a tuple as an argument and uses the built-in sorted function to sort the tuple based on the second element (index 1) of each item in the tuple.
# The key parameter allows us to specify a function to be used for sorting, in this case, we use a lambda function to access the second element of each item in the tuple for comparison.
# The sorted function returns a new sorted list, without modifying the original tuple.
# This function can be used to sort tuples containing any type of elements, as long as the second element is a float.",0.6419,-62.503145093169685
370,4,"

def solve(tup):
    return sorted(tup, key=lambda x: float(x[1]))",0.8363,-3.753711498463
370,5,"

def solve(tup):
    return sorted(tup, key=lambda x: x[1])",0.9042,-2.01314713989
371,1,"

def solve(arr):
    n = len(arr)
    low = 0
    high = n - 1
    mid = 0

    while (high - low) > 1:
        mid = (low + high) // 2
        if (arr[low] - low) != (arr[mid] - mid):
            high = mid
        elif (arr[high] - high) != (arr[mid] - mid):
            low = mid
    return arr[low] + 1",0.9039,-11.007394711062004
371,2,"

def solve(arr):
    missing = 1
    
    for num in arr:
        if num == missing:
            missing += 1
        else:
            return missing
            
    return missing",0.7744,-9.9719487466333
371,3,"

def solve(arr):
    smallest_missing = 1
    for num in arr:
        if num == smallest_missing:
            smallest_missing += 1
        else:
            return smallest_missing
    return smallest_missing",0.8908,-5.089140903960698
371,4,"

def solve(arr):
    smallest_missing = 1
    
    for num in arr:
        if num == smallest_missing:
            smallest_missing += 1
        else:
            return smallest_missing
    
    return smallest_missing",0.85,-7.152697104658898
371,5,"

def solve(arr):
    n = len(arr)
    for i in range(n):
        if arr[i] != i+1:
            return i+1
    
    return n+1",0.8143,-8.010793617942
372,1,"

def solve(lst):
    import heapq
    heapq.heapify(lst)
    sorted_lst = []
    while lst:
        sorted_lst.append(heapq.heappop(lst))
    return sorted_lst",0.9524,-1.9022092919798008
372,2,"

def solve(lst):
    import heapq
    heapq.heapify(lst)
    sorted_lst = []
    while lst:
        sorted_lst.append(heapq.heappop(lst))
    return sorted_lst",0.9524,-1.9022092919798008
372,3,"

def solve(lst):
  import heapq
  heapq.heapify(lst)
  sorted_lst = []
  while lst:
    sorted_lst.append(heapq.heappop(lst))
  return sorted_lst",0.9081,-3.757738952973899
372,4,"

def solve(lst):
    import heapq
    heapq.heapify(lst)
    sorted_lst = []
    while lst:
        sorted_lst.append(heapq.heappop(lst))
    return sorted_lst",0.9524,-1.9022092919798008
372,5,"

def solve(lst):
    import heapq
    heapq.heapify(lst)
    sorted_lst = []
    while lst:
        sorted_lst.append(heapq.heappop(lst))
    return sorted_lst",0.9524,-1.9022092919798008
373,1,"

def solve(length, width, height):
    return length * width * height",0.9405,-0.9810311554060002
373,2,"

def solve(length, width, height):
    volume = length * width * height
    return volume",0.9562,-0.9397289728220002
373,3,"

def solve(length, width, height):
    volume = length * width * height
    return volume",0.9562,-0.9397289728220002
373,4,"

def solve(length, width, height):
    return length * width * height",0.9405,-0.9810311554060002
373,5,"

def solve(length, width, height):
    volume = length * width * height
    return volume",0.9562,-0.9397289728220002
374,1,"

def solve(string):
    if len(string) == 1:
        return [string]
    
    result = []
    for i in range(len(string)):
        for perm in solve(string[:i] + string[i+1:]):
            result.append(string[i] + perm)
    
    return result",0.886,-7.385176474578
374,2,"

def solve(string):
    if len(string) == 1:
        return [string]
    result = []
    for i in range(len(string)):
        for perm in solve(string[:i] + string[i+1:]):
            result.append(string[i] + perm)
    return result",0.9026,-6.042971795367998
374,3,"

def solve(string):
    if len(string) == 1:
        return [string]
    else:
        result = []
        for i in range(len(string)):
            first_char = string[i]
            remaining_chars = string[:i] + string[i+1:]
            sub_permutations = solve(remaining_chars)
            for permutation in sub_permutations:
                result.append(first_char + permutation)
        return result",0.8823,-10.518655889235
374,4,"
def solve(string):
    if len(string) == 1:
        return [string]
    
    permutations = []
    for i in range(len(string)):
        for perm in solve(string[:i] + string[i + 1:]):
            permutations.append(string[i] + perm)
    
    return permutations",0.7865,-14.889066394534003
374,5,"

def solve(s):
    if len(s) == 1:
        return [s]
    else:
        perms = []
        for i in range(len(s)):
            sub_perms = solve(s[:i] + s[i+1:])
            for perm in sub_perms:
                perms.append(s[i] + perm)
        return perms",0.8916,-7.805395398750999
375,1,"

def solve(num, multiple):
    return round(num / multiple) * multiple",0.9163,-1.39805163121
375,2,"

def solve(number, multiple):
    return round(number / multiple) * multiple",0.9187,-1.3567048557
375,3,"

def solve(num, multiple):
    return round(num / multiple) * multiple",0.9163,-1.39805163121
375,4,"

def solve(number, multiple):
    return round(number / multiple) * multiple",0.9187,-1.3567048557
375,5,"

def solve(num, multiple):
    return round(num/multiple) * multiple",0.8593,-2.4261649737699997
376,1,"

def solve(tup, custom_value):
    new_tup = []
    for i in tup:
        if i not in new_tup:
            new_tup.append(i)
        else:
            new_tup.append(custom_value)
    return tuple(new_tup)",0.9245,-4.3147711909889965
376,2,"

def solve(tup, custom_value):
    temp = []
    for i in tup:
        if i not in temp:
            temp.append(i)
        else:
            temp.append(custom_value)
    return tuple(temp)",0.853,-7.154454678777
376,3,"

def solve(tup, custom_val):
    new_tup = ()
    for i in tup:
        if i not in new_tup:
            new_tup = new_tup + (i,)
        else:
            new_tup = new_tup + (custom_val,)
    return new_tup",0.8888,-7.429200176096003
376,4,"

def solve(tuples, custom_value):
    unique_tuples = []
    for tup in tuples:
        if tup not in unique_tuples:
            unique_tuples.append(tup)
        else:
            unique_tuples.append(custom_value)
    return tuple(unique_tuples)",0.8761,-6.743818423896998
376,5,"

def solve(tup, custom_value):
    new_tup = tuple(set(tup))
    for i in range(len(new_tup)):
        if tup.count(new_tup[i]) > 1:
            tup = list(tup)
            for j in range(tup.count(new_tup[i]) - 1):
                tup[tup.index(new_tup[i])] = custom_value
            tup = tuple(tup)
    return tup",0.8546,-14.14455276337379
377,1,"

def solve(string, char):
    new_string = """"
    for letter in string:
        if letter != char:
            new_string += letter
    return new_string",0.9263,-2.6019093024361992
377,2,"

def solve(string, char):
    new_string = string.replace(char, """")
    return new_string",0.8996,-2.1169993205949997
377,3,"

def solve(string, char):
    new_string = string.replace(char, """")
    return new_string",0.8996,-2.1169993205949997
377,4,"

def solve(string, char):
    new_string = """"
    for c in string:
        if c != char:
            new_string += c
    return new_string",0.9193,-2.8605045952833
377,5,"

def solve(string, char):
    result = """"
    for c in string:
        if c != char:
            result += c
    return result",0.8655,-4.478417214898701
378,1,"

def solve(lst):
    lst.insert(0, lst.pop())
    return lst",0.9531,-0.817316729754
378,2,"

def solve(lst):
    lst.insert(0, lst.pop())
    return lst",0.9531,-0.817316729754
378,3,"

def solve(list):
    last_element = list[-1]
    list.pop()
    list.insert(0, last_element)
    return list",0.8008,-6.4419936543193
378,4,"

def solve(lst):
    lst.insert(0, lst.pop())
    return lst",0.9531,-0.817316729754
378,5,"

def solve(lst):
    lst.insert(0, lst.pop())
    return lst",0.9531,-0.817316729754
379,1,"

def solve(length, width, height):
    area = 2 * (length * width + length * height + width * height)
    return area",0.8925,-3.5270348320780003
379,2,"

def solve(length, width, height):
    return 2 * (length * width + width * height + height * length)",0.8938,-3.03219185403
379,3,"

def solve(length, width, height):
    area = 2 * (length * width + length * height + width * height)
    return area",0.8925,-3.5270348320780003
379,4,"

def solve(length, width, height):
    surface_area = 2 * (length * width + width * height + height * length)
    return surface_area",0.9081,-3.1814465069590003
379,5,"

def solve(length, width, height):
    return 2 * (length * width + length * height + width * height)",0.9275,-2.0329087700840005
380,1,"

def solve(rows, cols):
    matrix = []
    for i in range(rows):
        row = []
        for j in range(cols):
            row.append(i*cols + j + 1)
        matrix.append(row)
    return matrix",0.8848,-5.995779126642001
380,2,"

def solve(rows, cols):
    arr = []
    for i in range(rows):
        arr.append([])
        for j in range(cols):
            arr[i].append(0)
    return arr",0.9077,-3.872816855514
380,3,"

def solve(rows, cols):
    arr = []
    for i in range(rows):
        arr.append([])
        for j in range(cols):
            arr[i].append(0)
    return arr",0.9077,-3.872816855514
380,4,"

def solve(rows, cols):
    arr = []
    for i in range(rows):
        inner_arr = []
        for j in range(cols):
            inner_arr.append(j + 1)
        arr.append(inner_arr)
    return arr",0.8043,-10.453663220724
380,5,"

def solve(rows, cols):
    arr = []
    for i in range(rows):
        arr.append([])
        for j in range(cols):
            arr[i].append(0)
    return arr",0.9077,-3.872816855514
381,1,"

def solve(lists, index):
    return sorted(lists, key = lambda x: x[index])",0.7996,-4.919738890742
381,2,"

def solve(list, index):
    list.sort(key=lambda x: x[index])
    return list",0.7484,-5.796902131885
381,3,"

def solve(lists, index):
    return sorted(lists, key=lambda x: x[index])",0.9217,-1.711697534815
381,4,"

def solve(lists, index):
    sorted_lists = sorted(lists, key=lambda x: x[index])
    return sorted_lists",0.9055,-2.679402814189499
381,5,"

def solve(list_of_lists, index):
    list_of_lists.sort(key=lambda x: x[index])
    return list_of_lists",0.8849,-3.178222799366
382,1,"

def solve(arr):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] < arr[mid - 1]:
            return mid
        if arr[mid] > arr[high]:
            low = mid + 1
        else:
            high = mid - 1
    return 0",0.9051,-8.772588308581001
382,2,"

def solve(arr):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] < arr[mid - 1]:
            return mid
        elif arr[mid] > arr[high]:
            low = mid + 1
        else:
            high = mid - 1",0.9367,-5.431577590052998
382,3,"

def solve(arr):
    start = 0
    end = len(arr) - 1
    while start <= end:
        mid = (start + end) // 2
        if arr[mid] < arr[mid - 1]:
            return mid
        elif arr[mid] > arr[end]:
            start = mid + 1
        else:
            end = mid - 1
    return 0",0.9321,-6.113191866117001
382,4,"

def solve(arr):
    left = 0
    right = len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] < arr[mid-1]:
            return mid
        elif arr[mid] > arr[right]:
            left = mid + 1
        else:
            right = mid - 1
    
    return 0",0.9047,-8.613159538425998
382,5,"

def solve(arr):
    l = 0
    r = len(arr) - 1
    
    while l <= r:
        if arr[l] <= arr[r]:
            return l
        mid = (l + r) // 2
        prev = (mid + len(arr) - 1) % len(arr)
        next = (mid + 1) % len(arr)
        
        if arr[mid] <= arr[prev] and arr[mid] <= arr[next]:
            return mid
        
        elif arr[mid] <= arr[r]:
            r = mid - 1
        
        elif arr[mid] >= arr[l]:
            l = mid + 1",0.9019,-14.243736528022003
383,1,"

def solve(num):
    res = 0
    for i in range(0, 32, 2):
        res |= (num & (1 << i)) << 1
    for i in range(1, 32, 2):
        res |= (num & (1 << i)) >> 1
    return res",0.8679,-10.200673235128004
383,2,"

def solve(n):
    result = 0
    i = 0
    while(n):
        if(n & 1):
            result ^= (1 << i)
        n >>= 1
        i += 2
    return result",0.8249,-9.819636887448004
383,3,"

def solve(num):
    result = 0
    bit = 1
    while num > 0:
        if num % 2 == 1:
            result = result ^ bit
        num = num // 2
        bit = bit << 2
    return result",0.8315,-11.069574599796995
383,4,"

def solve(num):
    # Converting the number to binary representation
    binary = bin(num)
    
    # Removing the ""0b"" prefix from the binary string
    binary = binary[2:]
    
    # Creating a list of binary digits
    binary_digits = list(binary)
    
    # Looping through the list of binary digits
    for i in range(len(binary_digits)):
        
        # Checking if the index is odd
        if i % 2 != 0:
            
            # Toggling the bit by flipping the 0 to 1 or 1 to 0
            if binary_digits[i] == ""0"":
                binary_digits[i] = ""1""
            else:
                binary_digits[i] = ""0""
    
    # Joining the binary digits list back into a string
    binary = """".join(binary_digits)
    
    # Converting the binary string back to an integer
    result = int(binary, 2)
    
    return result",0.7977,-45.8797047172835
383,5,"

def solve(n):
    return n ^ (2 ** n.bit_length() - 1)",0.6949,-7.281121978305
384,1,"

def solve(arr):
    min_val = min(arr)
    count = 0
    for num in arr:
        if num == min_val:
            count += 1
    return count",0.9153,-3.542020602684499
384,2,"

def solve(arr):
    smallest = min(arr)
    frequency = arr.count(smallest)
    return frequency",0.8597,-3.3251209959974997
384,3,"

def solve(arr):
    smallest = min(arr)
    return arr.count(smallest)",0.8685,-2.5378115748709997
384,4,"

def solve(arr):
    smallest = min(arr)
    frequency = arr.count(smallest)
    return frequency",0.8597,-3.3251209959974997
384,5,"
def solve(arr):
    freq = 0
    min_val = min(arr)
    for i in arr:
        if i == min_val:
            freq += 1
    return freq",0.8021,-8.818812184012
385,1,"

def solve(n):
    if n == 0:
        return 0
    elif n == 1 or n == 2:
        return 1
    else:
        return solve(n-2) + solve(n-3)",0.9616,-1.9568171807714
385,2,"

def solve(n):
    if n == 0 or n == 1 or n == 2:
        return 0
    elif n == 3:
        return 2
    else:
        return solve(n-2) + solve(n-3)",0.9419,-3.2896764648593004
385,3,"

def solve(n):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    else:
        return solve(n-2) + solve(n-3)",0.9142,-5.112882190451001
385,4,"

def solve(n):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return solve(n-2) + solve(n-3)",0.9247,-4.460526669368999
385,5,"

def solve(n):
    if n == 0 or n == 1 or n == 2:
        return n
    else:
        return solve(n-2) + solve(n-3)",0.9138,-3.785817438051999
386,1,"

def solve(s):
    count = 0
    stack = []

    for c in s:
        if c == '(':
            stack.append(c)
        elif c == ')':
            if len(stack) == 0:
                count += 1
            else:
                stack.pop()
    
    return count + len(stack)",0.8482,-11.196719743105
386,2,"
def solve(s):
    stack = []
    swaps = 0
    for char in s:
        if char == '[':
            stack.append(char)
        else:
            if len(stack) > 0:
                stack.pop()
            else:
                swaps += 1
                stack.append('[')

    return swaps + len(stack)//2",0.8124,-14.750449676455
386,3,"

def solve(s):
    stack = []
    swaps = 0
    for char in s:
        if char == ""("":
            stack.append(char)
        else:
            if stack:
                stack.pop()
            else:
                swaps += 1
    return swaps + len(stack)",0.8876,-7.034778126361001
386,4,"

def solve(s):
    stack = []
    swaps = 0
    for c in s:
        if c == '(':
            stack.append(c)
        else:
            if len(stack) == 0:
                swaps += 1
            else:
                stack.pop()
    return swaps + len(stack)",0.8905,-7.424155533655997
386,5,"

def solve(s):
    stack = []
    swaps = 0
    for c in s:
        if c == ""("":
            stack.append(c)
        else:
            if stack:
                stack.pop()
            else:
                swaps += 1
    return swaps + len(stack)",0.885,-7.208057962393999
387,1,"

def solve(hex_num):
    dec_num = int(hex_num, 16)
    if dec_num % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.963,-1.547041424392
387,2,"

def solve(hex_num):
    dec_num = int(hex_num, 16)
    if dec_num % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.963,-1.547041424392
387,3,"

def solve(hex_num):
    dec_num = int(hex_num, 16) # convert hexadecimal number to decimal
    if dec_num % 2 == 0: # check if decimal number is even
        return ""Even""
    else:
        return ""Odd""",0.8765,-7.381745285543602
387,4,"

def solve(hex_num):
    decimal_num = int(hex_num, 16)
    if decimal_num % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.9422,-2.439510666039499
387,5,"

def solve(hex_num):
    dec_num = int(hex_num, 16)
    if dec_num % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.963,-1.547041424392
388,1,"
def solve(n):
    highest_power = 1
    while highest_power <= n:
        highest_power *= 2
    return highest_power // 2",0.7711,-8.577091327679002
388,2,"

def solve(n):
    power = 0
    while 2**power <= n:
        power += 1
    return 2**(power-1)",0.9541,-1.6444288246139995
388,3,"

def solve(n):
    power = 0
    while 2 ** power <= n:
        power += 1
    return 2 ** (power-1)",0.8907,-4.167960679234
388,4,"

def solve(n):
    power = 0
    while (2 ** power <= n):
        power += 1
    return 2 ** (power-1)",0.7956,-8.231703453609997
388,5,"

def solve(n):
  power = 0
  while 2**power <= n:
    power += 1
  return 2**(power-1)",0.8819,-4.396850133851001
389,1,"

def solve(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        return solve(n-1) + solve(n-2)",0.9765,-1.0709236445280004
389,2,"

def solve(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        return solve(n-1) + solve(n-2)",0.9765,-1.0709236445280004
389,3,"

def solve(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        return solve(n-1)+solve(n-2)",0.8882,-5.215444432060001
389,4,"

def solve(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        return solve(n-1) + solve(n-2)",0.9765,-1.0709236445280004
389,5,"

def solve(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        return solve(n-1) + solve(n-2)",0.9765,-1.0709236445280004
390,1,"

def solve(input_list, string):
    return [string + item for item in input_list]",0.7827,-4.899430881024
390,2,"

def solve(lst, string):
    return [string + item for item in lst]",0.8563,-2.7923934457940005
390,3,"

def solve(string, lst):
    new_lst = []
    for item in lst:
        new_lst.append(string + item)
    return new_lst",0.9017,-3.105076211948
390,4,"

def solve(string, list):
    return [string + item for item in list]",0.7215,-5.876663707964999
390,5,"

def solve(string, lst):
    new_lst = []
    for item in lst:
        new_item = string + item
        new_lst.append(new_item)
    return new_lst",0.8791,-4.765896783260998
391,1,"

def solve(*lists):
    result = {}
    for i, lst in enumerate(lists):
        temp = result
        for item in lst:
            if item not in temp:
                temp[item] = {}
            temp = temp[item]
    return result",0.839,-9.304934289968998
391,2,"

def solve(*args):
    result = {}
    for arg in args:
        curr_dict = result
        for i in range(len(arg) - 2):
            if arg[i] not in curr_dict:
                curr_dict[arg[i]] = {}
            curr_dict = curr_dict[arg[i]]
        curr_dict[arg[-2]] = arg[-1]
    return result",0.8576,-11.671971064961994
391,3,"

def solve(keys, values):
    result = {}
    for i in range(len(keys)):
        current_dict = result
        for j in range(len(keys[i])):
            if keys[i][j] not in current_dict:
                current_dict[keys[i][j]] = {}
            current_dict = current_dict[keys[i][j]]
        current_dict = values[i]
    return result",0.8926,-8.747956751299702
391,4,"

def solve(keys, values, nested_keys):
    nested_dict = {}
    for key in keys:
        sub_dict = {}
        for i in range(len(values)):
            sub_dict[values[i]] = None
        nested_dict[key] = sub_dict
    for key in keys:
        for i in range(len(values)):
            nested_dict[key][values[i]] = {}
            for j in range(len(nested_keys)):
                nested_dict[key][values[i]][nested_keys[j]] = None
    return nested_dict",0.7959,-24.192585928289
391,5,"

def solve(lists, keys):
    result = {}
    for i in range(len(lists)):
        temp = result
        for key in keys[:-1]:
            temp = temp.setdefault(key, {})
        temp[keys[-1]] = lists[i]
    return result",0.8383,-9.697808100260596
392,1,"

def solve(n):
    if n <= 1:
        return n
    
    # calculate f(n) recursively
    f_n = max((solve(n//2) + solve(n//3) + solve(n//4) + solve(n//5)), n)
    
    return f_n",0.779,-14.982725544539
392,2,"

def solve(n):
    if n == 0:
        return 0
    
    # Initialize memoization array
    memo = [0] * (n+1)
    
    # Loop through all numbers from 1 to n
    for i in range(1, n+1):
        # Calculate the maximum sum for i
        memo[i] = max((memo[i//2] + memo[i//3] + memo[i//4] + memo[i//5]), i)
        
    # Return the maximum sum for n
    return memo[n]",0.8107,-24.547023504168394
392,3,"

def solve(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return max(n, solve(n//2) + solve(n//3) + solve(n//4) + solve(n//5))",0.9035,-6.087081010575999
392,4,"

def solve(n): 
    # base case 
    if n == 0: 
        return 0
      
    # recursive case 
    return max(n, solve(n//2) + solve(n//3) + solve(n//4) + solve(n//5))",0.8076,-12.183321235540996
392,5,"

def solve(n):
    if n <= 1:
        return n
    
    # calculate f(n/2), f(n/3), f(n/4), and f(n/5)
    f_n2 = solve(n//2)
    f_n3 = solve(n//3)
    f_n4 = solve(n//4)
    f_n5 = solve(n//5)
    
    # calculate f(n) using the given equation
    f_n = max((f_n2 + f_n3 + f_n4 + f_n5), n)
    
    return f_n",0.8894,-14.182783830362702
393,1,"

def solve(lst):
    return max(lst, key=lambda x: len(x))",0.8648,-2.468545473151
393,2,"

def solve(lists):
    return max(lists, key=lambda l: len(l))",0.8296,-3.548382268155
393,3,"

def solve(lists):
    max_list = max(lists, key=lambda x:len(x))
    return max_list",0.7414,-7.180067064549999
393,4,"

def solve(lists):
    return max(lists, key=lambda x: len(x))",0.9292,-1.3953895088539998
393,5,"

def solve(lst):
    return max(lst, key=lambda x: len(x))",0.8648,-2.468545473151
394,1,"

def solve(tup):
    if len(set(tup)) == len(tup):
        return True
    else:
        return False",0.8793,-3.601625494432
394,2,"

def solve(tup):
    return len(set(tup)) == len(tup)",0.8437,-3.059357709098
394,3,"

def solve(tuple):
    if len(tuple) == len(set(tuple)):
        return True
    else:
        return False",0.9037,-2.5313279571489997
394,4,"

def solve(tup):
    return len(tup) == len(set(tup))",0.8479,-2.9689024813280005
394,5,"

def solve(tup):
    if len(tup) == len(set(tup)):
        return True
    else:
        return False",0.9084,-2.690251492904
395,1,"

def solve(s):
    for char in s:
        if s.count(char) == 1:
            return char
    return ""No non-repeated characters found.""",0.8189,-6.994208554099002
395,2,"

def solve(string):
    for char in string:
        if string.count(char) == 1:
            return char
    return None",0.9239,-2.216548200439
395,3,"

def solve(string):
    counts = {}
    for char in string:
        if char in counts:
            counts[char] += 1
        else:
            counts[char] = 1
    for char in string:
        if counts[char] == 1:
            return char
    return None",0.9236,-4.9241773860635
395,4,"

def solve(string):
    for char in string:
        if string.count(char) == 1:
            return char
    return None",0.9239,-2.216548200439
395,5,"

def solve(string):
    for char in string:
        if string.count(char) == 1:
            return char
    return None",0.9239,-2.216548200439
396,1,"

def solve(s):
  pattern = r""^(.).*\1$""
  if re.match(pattern, s):
    return True
  else:
    return False",0.7664,-9.046202270917997
396,2,"

def solve(string):
    pattern = r""^(.).*\1$""
    if re.match(pattern, string):
        return True
    else:
        return False",0.8851,-4.149405069487
396,3,"

import re
def solve(string):
    pattern = r'^([a-zA-Z]).*?\1$'
    if re.search(pattern, string):
        return True
    else:
        return False",0.7621,-11.140716610627
396,4,"

import re

def solve(string):
    pattern = r'^([a-zA-Z]).*\1$'
    if re.match(pattern, string):
        return True
    else:
        return False",0.8787,-5.174162391902001
396,5,"

import re

def solve(string):
    pattern = r'^(.).*\1$'
    match = re.match(pattern, string)
    if match:
        return True
    else:
        return False",0.9025,-4.309577031444004
397,1,"

def solve(num1, num2, num3):
    # Sort the numbers in ascending order
    sorted_nums = sorted([num1, num2, num3])
    
    # If there are an even number of numbers, find the middle two and take the average
    if len(sorted_nums) % 2 == 0:
        middle_idx1 = len(sorted_nums) // 2 - 1
        middle_idx2 = len(sorted_nums) // 2
        median = (sorted_nums[middle_idx1] + sorted_nums[middle_idx2]) / 2
    # If there are an odd number of numbers, find the middle number
    else:
        middle_idx = len(sorted_nums) // 2
        median = sorted_nums[middle_idx]
    
    return median",0.844,-28.15573862511473
397,2,"

def solve(num1, num2, num3):
    nums = [num1, num2, num3]
    nums.sort()
    if len(nums) % 2 == 0:
        return (nums[len(nums)//2] + nums[(len(nums)//2)-1]) / 2
    else:
        return nums[len(nums)//2]",0.9246,-5.876416026103799
397,3,"

def solve(num1, num2, num3):
    nums = [num1, num2, num3]
    nums.sort()
    if len(nums) % 2 == 0:
        median = (nums[len(nums)//2] + nums[(len(nums)//2)-1])/2
    else:
        median = nums[len(nums)//2]
    return median",0.9231,-6.2404062977958015
397,4,"

def solve(a, b, c):
    nums = [a, b, c]
    nums.sort()
    if len(nums) % 2 == 0:
        median = (nums[len(nums)//2] + nums[len(nums)//2 - 1]) / 2
    else:
        median = nums[len(nums)//2]
    return median",0.9245,-5.810416534432497
397,5,"

def solve(a, b, c):
    nums = [a, b, c]
    nums.sort()
    if len(nums) % 2 == 0:
        return (nums[len(nums)//2] + nums[len(nums)//2 - 1]) / 2
    else:
        return nums[len(nums)//2]",0.9049,-6.891981061339498
398,1,"

def solve(lst):
    result = []
    for num in lst:
        sum = 0
        while num:
            sum += num % 10
            num //= 10
        result.append(sum)
    return result",0.8456,-7.8846673013
398,2,"

def solve(lst):
    result = []
    for num in lst:
        total = 0
        for digit in str(num):
            total += int(digit)
        result.append(total)
    return result",0.8794,-5.5239058192506985
398,3,"

def solve(nums):
    sums = []
    for num in nums:
        total = 0
        for digit in str(num):
            total += int(digit)
        sums.append(total)
    return sums",0.8844,-5.280270987185701
398,4,"

def solve(lst):
    result = []
    for num in lst:
        sum = 0
        while num > 0:
            digit = num % 10
            sum += digit
            num //= 10
        result.append(sum)
    return result",0.9115,-5.098022130145997
398,5,"

def solve(nums):
    result = []
    for num in nums:
        digits = [int(x) for x in str(num)]
        sum_digits = sum(digits)
        result.append(sum_digits)
    return result",0.8146,-9.020789428220498
399,1,"

def solve(tuples):
    result = tuples[0][0]
    for i in range(1, len(tuples)):
        result = result ^ tuples[i][0]
    return result",0.9074,-3.888132175928
399,2,"

def solve(*tuples):
    result = tuples[0]
    for i in range(1,len(tuples)):
        result = tuple(a^b for a,b in zip(result, tuples[i]))
    return result",0.7927,-10.456640626914702
399,3,"

def solve(tuples):
    result = 0
    for tup in tuples:
        result ^= tup
    return result",0.861,-3.891511497117
399,4,"

def solve(tuples):
    result = tuples[0][0]
    for i in range(1, len(tuples)):
        result = result ^ tuples[i][0]
    return result",0.9074,-3.888132175928
399,5,"

def solve(tuples):
    result = tuples[0][0] ^ tuples[1][0]
    for i in range(len(tuples)):
        for j in range(len(tuples[i])):
            result = result ^ tuples[i][j]
    return result",0.8853,-6.5805420732040005
400,1,"

def solve(lst):
    freq = {}
    for tpl in lst:
        if tpl in freq:
            freq[tpl] += 1
        else:
            freq[tpl] = 1
    return freq.values()",0.8638,-6.881666892832001
400,2,"

def solve(input_list):
    frequencies = {}
    for item in input_list:
        if item in frequencies:
            frequencies[item] += 1
        else:
            frequencies[item] = 1
    return frequencies",0.8265,-8.572344399177998
400,3,"

def solve(lst):
    freq = {}
    for tup in lst:
        if tup in freq:
            freq[tup] += 1
        else:
            freq[tup] = 1
    return freq",0.9266,-3.430199787835
400,4,"

def solve(lst):
    freq = {}
    for tup in lst:
        if tup in freq:
            freq[tup] += 1
        else:
            freq[tup] = 1
    return freq.values()",0.9087,-4.502356370835
400,5,"

def solve(lst):
    freq_dict = {}
    for tup in lst:
        if tup in freq_dict:
            freq_dict[tup] += 1
        else:
            freq_dict[tup] = 1
    return freq_dict",0.9175,-4.302988466751499
401,1,"

def solve(tuple1, tuple2):
    result = []
    for i in range(len(tuple1)):
        temp = []
        for j in range(len(tuple1[i])):
            temp.append(tuple1[i][j] + tuple2[i][j])
        result.append(tuple(temp))
    return tuple(result)",0.9533,-3.0101468311726007
401,2,"

def solve(tup1, tup2):
    result = ()
    for i in range(len(tup1)):
        temp = ()
        for j in range(len(tup1[i])):
            temp += (tup1[i][j] + tup2[i][j],)
        result += (temp,)
    return result",0.9514,-3.3357321919237015
401,3,"

def solve(tuple1, tuple2):
    result = []
    for i in range(len(tuple1)):
        temp = []
        for j in range(len(tuple1[i])):
            temp.append(tuple1[i][j] + tuple2[i][j])
        result.append(tuple(temp))
    return tuple(result)",0.9533,-3.0101468311726007
401,4,"

def solve(tup1, tup2):
    result = []
    for i in range(len(tup1)):
        temp = ()
        for j in range(len(tup1[i])):
            temp += (tup1[i][j] + tup2[i][j],)
        result.append(temp)
    return tuple(result)",0.9239,-5.385535707390201
401,5,"

def solve(tup1, tup2):
    result = ()
    for i in range(len(tup1)):
        temp = ()
        for j in range(len(tup1[i])):
            temp += (tup1[i][j] + tup2[i][j],)
        result += (temp,)
    return result",0.9514,-3.3357321919237015
402,1,"

def solve(n, r, p):
    # calculate factorial of n
    factorial_n = 1
    for i in range(1, n+1):
        factorial_n *= i
    
    # calculate factorial of r
    factorial_r = 1
    for i in range(1, r+1):
        factorial_r *= i
    
    # calculate factorial of n-r
    factorial_n_r = 1
    for i in range(1, n-r+1):
        factorial_n_r *= i
    
    # calculate nCr
    nCr = factorial_n // (factorial_r * factorial_n_r)
    
    # calculate nCr%p
    nCr_mod_p = nCr % p
    
    return nCr_mod_p",0.9158,-13.713717066049998
402,2,"
def solve(n, r, p):
    if n < r:
        return 0
    if r == 0 or r == n:
        return 1
    numerator = 1
    denominator = 1
    for i in range(1, r+1):
        numerator = (numerator * (n-i+1)) % p
        denominator = (denominator * i) % p
    return (numerator * pow(denominator, p-2, p)) % p",0.8939,-12.002838573439996
402,3,"

def solve(n, r, p):
    factorial_n = 1
    factorial_r = 1
    factorial_nr = 1
    for i in range(1, n+1):
        factorial_n *= i
    for i in range(1, r+1):
        factorial_r *= i
    for i in range(1, n-r+1):
        factorial_nr *= i
    ncr = factorial_n // (factorial_r * factorial_nr)
    return ncr % p",0.9063,-10.426511203868998
402,4,"

def solve(n, r, p):
    # initialize result
    result = 1
    # calculate factorial of n
    for i in range(1, n+1):
        result = (result * i) % p
    # calculate factorial of r
    for i in range(1, r+1):
        result = (result * pow(i, p-2, p)) % p
    # calculate factorial of (n-r)
    for i in range(1, n-r+1):
        result = (result * pow(i, p-2, p)) % p
    # return result
    return result",0.9055,-13.394646760841002
402,5,"

def solve(n, r, p):
    fact_n = 1
    fact_r = 1
    fact_nr = 1
    for i in range(1, n + 1):
        fact_n = (fact_n * i) % p
    for i in range(1, r + 1):
        fact_r = (fact_r * i) % p
    for i in range(1, n - r + 1):
        fact_nr = (fact_nr * i) % p
    return (fact_n // (fact_r * fact_nr)) % p",0.9235,-9.94807396466198
403,1,"

import re

def solve(url):
    regex = r""^(http|https)://[a-z0-9-]+(\.[a-z0-9-]+)+(:[0-9]+)?(/.*)?$""
    if re.match(regex, url):
        return True
    return False",0.7718,-16.3167929711645
403,2,"

import re

def solve(url):
    pattern = re.compile('^(https?://)?[a-z0-9]+(\.[a-z0-9]+)+([/?].*)?$')
    match = re.match(pattern, url)
    if match:
        return True
    else:
        return False",0.7698,-16.743300654732504
403,3,"

import re

def solve(url):
    regex = r""^(http|https):\/\/[a-z0-9]+([\-\.]{1}[a-z0-9]+)*\.[a-z]{2,5}$""
    if re.match(regex, url):
        return True
    else:
        return False",0.8693,-9.3856951029755
403,4,"

import re

def solve(url):
    pattern = r""^((http|https|ftp)\://)?([a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3}(:[a-zA-Z0-9]*)?/?([a-zA-Z0-9\-\._\?\,\'/\\\+&amp;%\$#\=~])*)$""
    if re.match(pattern, url):
        return True
    else:
        return False",0.8421,-16.6694435596845
403,5,"

import re

def solve(url):
    
    pattern = r'^https?://(?:[a-z0-9\-]+\.)+[a-z]{2,6}(?:/[^/#?]+)*\.(?:jpg|jpeg|gif|png|tiff|bmp)$'
    
    if re.match(pattern, url):
        return True
    else:
        return False",0.7248,-25.107928297461505
404,1,"

def solve(a, b):
    if a < b:
        return a
    else:
        return b",0.9256,-1.777200603917
404,2,"

def solve(num1, num2):
    if num1 < num2:
        return num1
    else:
        return num2",0.963,-1.0943510581879
404,3,"

def solve(num1, num2):
    if num1 < num2:
        return num1
    else:
        return num2",0.963,-1.0943510581879
404,4," 


def solve(num1, num2):
    if num1 < num2:
        return num1
    else:
        return num2",0.8263,-5.7232824244252996
404,5,"

def solve(num1, num2):
    if num1 < num2:
        return num1
    else:
        return num2",0.963,-1.0943510581879
405,1,"

def solve(element, tup):
    if element in tup:
        return True
    else:
        return False",0.8715,-3.1627945370240003
405,2,"

def solve(tup, element):
    if element in tup:
        return True
    else:
        return False",0.9043,-2.414494914024999
405,3,"

def solve(tup, elem):
    if elem in tup:
        return True
    else:
        return False",0.8799,-3.070689704140999
405,4,"

def solve(element, tuple):
    if element in tuple:
        return True
    else:
        return False",0.9298,-1.6735599843429998
405,5,"

def solve(element, tup):
    if element in tup:
        return True
    else:
        return False",0.8715,-3.1627945370240003
406,1,"

def solve(num):
    if num % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.9585,-1.1867679489840002
406,2,"

def solve(n):
    if n%2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.8718,-3.704382272937
406,3,"

def solve(num):
    if num % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.9585,-1.1867679489840002
406,4,"

def solve(num):
    if num % 2 == 0:
        print(""Even"")
    else:
        print(""Odd"")",0.8115,-5.84951496264
406,5,"

def solve(n):
    if n % 2 == 0:
        print(""Even"")
    else:
        print(""Odd"")",0.7965,-6.369886147631
407,1,"

def solve(num):
    digits = [int(x) for x in str(num)]
    for i in range(len(digits)-1, 0, -1):
        if digits[i] > digits[i-1]:
            min_idx = i
            for j in range(i+1, len(digits)):
                if digits[j] > digits[i-1] and digits[j] < digits[min_idx]:
                    min_idx = j
            digits[i-1], digits[min_idx] = digits[min_idx], digits[i-1]
            digits[i:] = sorted(digits[i:])
            return int(''.join(str(x) for x in digits))
    return -1",0.9125,-12.449814953291895
407,2,"

def solve(num):
    digits = list(str(num))
    # Find the first digit from the right that is smaller than the digit next to it
    for i in range(len(digits) - 2, -1, -1):
        if digits[i] < digits[i+1]:
            break
    else:
        # If no such digit is found, the number is already the largest possible
        return num
    
    # Find the smallest digit after the digit found in the previous step, but greater than it
    j = i+1
    while j < len(digits) and digits[j] > digits[i]:
        j += 1
    j -= 1
    
    # Swap the two digits found in the previous steps
    digits[i], digits[j] = digits[j], digits[i]
    
    # Reverse the order of the digits starting from the one next to the one found in the first step
    digits[i+1:] = digits[i+1:][::-1]
    
    # Convert the list of digits back to a number and return it
    return int("""".join(digits))",0.7944,-52.947190266732086
407,3,"

def solve(n):
    digits = [int(x) for x in str(n)]
    for i in range(len(digits)-1, 0, -1):
        if digits[i] > digits[i-1]:
            digits[i], digits[i-1] = digits[i-1], digits[i]
            return int(''.join(str(x) for x in digits))
    return -1",0.8762,-10.7085122557396
407,4,"

def solve(num):
    # convert number to string
    num_str = str(num)
    
    # convert string to list of digits
    digits = list(num_str)
    
    # initialize pivot index
    pivot_idx = -1
    
    # find pivot index
    for i in range(len(digits)-1, 0, -1):
        if digits[i-1] < digits[i]:
            pivot_idx = i-1
            break
    
    # if pivot index is not found, return -1
    if pivot_idx == -1:
        return -1
    
    # find the smallest digit on the right side of pivot index that is larger than the digit at pivot index
    smallest_idx = pivot_idx + 1
    for i in range(pivot_idx + 2, len(digits)):
        if digits[i] > digits[pivot_idx] and digits[i] < digits[smallest_idx]:
            smallest_idx = i
    
    # swap pivot digit with smallest digit on the right side
    digits[pivot_idx], digits[smallest_idx] = digits[smallest_idx], digits[pivot_idx]
    
    # sort the digits on the right side of pivot index in ascending order
    digits[pivot_idx+1:] = sorted(digits[pivot_idx+1:])
    
    # convert the list of digits back to a string and then to an integer
    next_bigger_num = int("""".join(digits))
    
    return next_bigger_num",0.8668,-43.452229756367736
407,5,"

def solve(number):
    digits = [int(d) for d in str(number)]
    for i in range(len(digits)-2, -1, -1):
        if digits[i] < digits[i+1]:
            break
    else:
        return -1
    pivot = digits[i]
    suffix = digits[i+1:]
    min_greater = min([x for x in suffix if x > pivot])
    suffix.remove(min_greater)
    suffix.sort()
    digits = digits[:i] + [min_greater] + suffix
    return int("""".join([str(d) for d in digits]))",0.8072,-26.982928899809508
408,1,"

def solve(arr1, arr2, k):
    pairs = []
    for i in range(len(arr1)):
        for j in range(len(arr2)):
            pairs.append((arr1[i], arr2[j]))
    return pairs[:k]",0.9569,-2.2472091164372996
408,2,"

def solve(arr1, arr2, k):
    pairs = []
    for i in range(len(arr1)):
        for j in range(len(arr2)):
            pairs.append((arr1[i], arr2[j]))
    return pairs[:k]",0.9569,-2.2472091164372996
408,3,"

def solve(arr1, arr2, k):
    pairs = []
    for i in range(len(arr1)):
        for j in range(len(arr2)):
            pairs.append((arr1[i], arr2[j]))
    return pairs[:k]",0.9569,-2.2472091164372996
408,4,"

def solve(arr1, arr2, k):
    pairs = []
    for i in range(len(arr1)):
        for j in range(len(arr2)):
            pairs.append((arr1[i], arr2[j]))
    pairs = sorted(pairs, key=lambda x: x[0] + x[1], reverse=True)
    return pairs[:k]",0.9177,-6.3582042873813
408,5,"

def solve(arr1, arr2, k):
    pairs = []
    for i in range(len(arr1)):
        for j in range(len(arr2)):
            pairs.append((arr1[i], arr2[j]))
            if len(pairs) == k:
                return pairs
    return pairs",0.9353,-4.0776489634493
409,1,"

def solve(tuples):
    min_product = float('inf')
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            product = tuples[i][0] * tuples[j][0]
            if product < min_product:
                min_product = product
    return min_product",0.9221,-5.430878704503501
409,2,"

def solve(lst):
    min_product = None
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            product = lst[i][0] * lst[j][0]
            if min_product is None or product < min_product:
                min_product = product
    return min_product",0.9476,-3.6075205347260018
409,3,"

def solve(lst):
    min_product = float('inf')
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            product = lst[i][0] * lst[j][0]
            if product < min_product:
                min_product = product
    return min_product",0.9587,-2.6981304206924985
409,4,"

def solve(lst):
    min_product = lst[0][0] * lst[0][1]
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            product = lst[i][0] * lst[j][0]
            if product < min_product:
                min_product = product
    return min_product",0.944,-4.210208583198999
409,5,"

def solve(lst):
    min_product = None
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            product = lst[i][0] * lst[j][0]
            if min_product is None or product < min_product:
                min_product = product
    return min_product",0.9476,-3.6075205347260018
410,1,"

def solve(list):
    min_val = float('inf')
    for element in list:
        if type(element) == int or type(element) == float:
            if element < min_val:
                min_val = element
    return min_val",0.8224,-9.774499542944596
410,2,"

def solve(lst):
    min_val = lst[0]
    for i in range(1, len(lst)):
        if lst[i] < min_val:
            min_val = lst[i]
    return min_val",0.9339,-3.0109856756532003
410,3,"

def solve(lst):
    min_val = lst[0]
    for i in range(1, len(lst)):
        if lst[i] < min_val:
            min_val = lst[i]
    return min_val",0.9339,-3.0109856756532003
410,4,"

def solve(lst):
    min_value = lst[0]
    for item in lst:
        if type(item) == int or type(item) == float:
            if item < min_value:
                min_value = item
    return min_value",0.8922,-5.701258911840501
410,5,"

def solve(lst):
    min_val = lst[0]
    for i in range(len(lst)):
        if lst[i] < min_val:
            min_val = lst[i]
    return min_val",0.8785,-5.310540423491299
411,1,"

def solve(str):
    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), str)",0.7542,-7.898588183626
411,2,"

def solve(s):
    return re.sub(r""_(\w)"", lambda m: m.group(1).upper(), s)",0.78,-6.709579725562001
411,3,"

def solve(s):
    return re.sub('_(.)', lambda m: m.group(1).upper(), s)",0.8035,-5.46853208039
411,4,"

import re

def solve(s):
    return re.sub(r'_([a-z])', lambda match: match.group(1).upper(), s)",0.8477,-5.120602117969
411,5,"

def solve(s):
    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), s)",0.8509,-4.519620231277
412,1,"

def solve(lst):
    return [x for x in lst if x % 2 == 0]",0.8872,-2.6341604117065
412,2,"

def solve(lst):
    return [num for num in lst if num % 2 == 0]",0.9238,-1.7447013342840003
412,3,"

def solve(lst):
    return [num for num in lst if num % 2 == 0]",0.9238,-1.7447013342840003
412,4,"

def solve(lst):
    return [num for num in lst if num % 2 == 0]",0.9238,-1.7447013342840003
412,5,"

def solve(lst):
    return [num for num in lst if num % 2 == 0]",0.9238,-1.7447013342840003
413,1,"

def solve(list_of_tuples, n):
    result = []
    for tup in list_of_tuples:
        result.append(tup[n])
    return result",0.8969,-3.372448606643
413,2,"


def solve(lst, n):
    return [tup[n-1] for tup in lst]",0.6556,-8.867124924759
413,3,"

def solve(list_of_tuples, n):
    result = []
    for tuple in list_of_tuples:
        result.append(tuple[n])
    return result",0.8849,-3.668082834933
413,4,"

def solve(lst, n):
    return [t[n] for t in lst]",0.866,-2.5891370369450004
413,5,"

def solve(lst, n):
    return [item[n] for item in lst]",0.8093,-3.808918063884
414,1,"

def solve(sequence, value):
    if value in sequence:
        return True
    else:
        return False",0.9344,-1.5615730152980003
414,2,"

def solve(sequence, value):
    if value in sequence:
        return True
    else:
        return False",0.9344,-1.5615730152980003
414,3,"

def solve(sequence, value):
    if value in sequence:
        return True
    else:
        return False",0.9344,-1.5615730152980003
414,4,"

def solve(value, sequence):
    if value in sequence:
        return True
    else:
        return False",0.9488,-1.209991135806
414,5,"

def solve(value, sequence):
    if value in sequence:
        return True
    else:
        return False",0.9488,-1.209991135806
415,1,"

def solve(arr):
    max1 = max(arr)
    arr.remove(max1)
    max2 = max(arr)
    return max1 * max2",0.8815,-4.036195108766999
415,2,"

def solve(arr):
    max1 = max2 = -float('inf')
    min1 = min2 = float('inf')
    for num in arr:
        if num > max1:
            max2 = max1
            max1 = num
        elif num > max2:
            max2 = num
        if num < min1:
            min2 = min1
            min1 = num
        elif num < min2:
            min2 = num
    if max1 * max2 > min1 * min2:
        return (max1, max2)
    else:
        return (min1, min2)",0.9329,-9.373712917110296
415,3,"

def solve(arr):
    max_product = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            product = arr[i] * arr[j]
            if product > max_product:
                max_product = product
                pair = (arr[i], arr[j])
    return pair",0.946,-3.7752083620296
415,4,"

def solve(arr):
    max_prod = float('-inf')
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            prod = arr[i] * arr[j]
            if prod > max_prod:
                max_prod = prod
    return max_prod",0.9019,-6.195655337285
415,5,"

def solve(arr):
    max_product = float('-inf')
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            product = arr[i] * arr[j]
            if product > max_product:
                max_product = product
                pair = (arr[i], arr[j])
    return pair",0.9426,-4.076183066375399
416,1,"

def solve(n):
    if n == 0:
        return 0
    else:
        return max(n, solve(n//2) + solve(n//3) + solve(n//4))",0.8871,-5.031002408929999
416,2,"

def solve(n):
    if n <= 0:
        return 0
    else:
        max_sum = n
        for i in range(1, n):
            max_sum = max(max_sum, solve(i) + solve(n-i))
        return max_sum",0.8718,-7.683167680967001
416,3,"

def solve(n):
    if n < 2:
        return n
    else:
        max_sum = n
        for i in range(1, n):
            max_sum = max(max_sum, solve(i) + solve(n - i))
        return max_sum",0.8422,-9.616645960394996
416,4,"

def solve(n):
    if n < 3:
        return n
    else:
        first = n // 3
        second = n // 2
        third = n - first - second
        return max(first + solve(first), second + solve(second), third + solve(third))",0.8319,-11.593037076133996
416,5,"

def solve(n):
    if n <= 0:
        return 0
    elif n <= 2:
        return n
    else:
        max_sum = 0
        for i in range(1, n//2 + 1):
            for j in range(i, n-i+1):
                k = n - i - j
                max_sum = max(max_sum, i + j + k, solve(i) + solve(j) + solve(k))
        return max_sum",0.8273,-19.524770323876997
417,1,"


def solve(lst):
    for tup in lst:
        if all(x == tup[0] for x in tup):
            return tup[0]",0.5994,-15.868972504833
417,2,"

def solve(tuples):
    first = tuples[0][0]
    for tup in tuples:
        if tup[0] != first:
            return None
    return first",0.809,-7.84357544734
417,3,"

def solve(lst):
    first_elements = [t[0] for t in lst]
    return list(set(first_elements))[0]",0.7217,-9.13245098865
417,4,"

def solve(lst):
    result = None
    for tup in lst:
        if result is None:
            result = set(tup)
        else:
            result = result.intersection(set(tup))
    if result:
        return list(result)[0]
    return result",0.8068,-11.807675714852
417,5,"

def solve(lst):
    first_element = lst[0][0] 
    for tup in lst:
        if first_element not in tup:
            return ""No common first element found""
    return first_element",0.6789,-16.652450849000708
418,1,"

def solve(lst):
    max_length = 0
    max_sublist = []

    for i in range(len(lst)):
        for j in range(i+1, len(lst)+1):
            if len(lst[i:j]) > max_length:
                max_length = len(lst[i:j])
                max_sublist = lst[i:j]

    return max_sublist",0.9201,-6.165614839304001
418,2,"

def solve(lst):
    max_len = 0
    max_sublist = []
    
    for i in range(len(lst)):
        for j in range(i+1, len(lst)+1):
            sublist = lst[i:j]
            if len(sublist) > max_len:
                max_len = len(sublist)
                max_sublist = sublist
    
    return max_sublist",0.9368,-5.0936530957410024
418,3,"

def solve(lst):
    max_len = 0
    max_sublist = []
    for i in range(len(lst)):
        for j in range(i+1, len(lst)+1):
            sublist = lst[i:j]
            if len(sublist) > max_len:
                max_len = len(sublist)
                max_sublist = sublist
    return max_sublist",0.9505,-3.9097620294116
418,4,"

def solve(lst):
    max_sublist = []
    max_length = 0
    
    for sublist in lst:
        if len(sublist) > max_length:
            max_sublist = sublist
            max_length = len(sublist)
            
    return max_sublist",0.8652,-7.963910379329298
418,5,"

def solve(lst):
    max_len = 0
    max_sublist = []
    for i in range(len(lst)):
        for j in range(i+1, len(lst)+1):
            sublist = lst[i:j]
            if len(sublist) > max_len:
                max_len = len(sublist)
                max_sublist = sublist
    return max_sublist",0.9505,-3.9097620294116
419,1,"

def solve(numbers):
    total = 0
    for num in numbers:
        total += round(num)
    return total * len(numbers)",0.9458,-1.6731366545265998
419,2,"

def solve(numbers):
    total = 0
    for num in numbers:
        total += round(num)
    return total * len(numbers)",0.9458,-1.6731366545265998
419,3,"

def solve(numbers):
    total = 0
    for num in numbers:
        total += round(num)
    return total * len(numbers)",0.9458,-1.6731366545265998
419,4,"

def solve(lst):
    total = 0
    for num in lst:
        total += round(num)
    return total * len(lst)",0.8971,-3.2562945812880004
419,5,"

def solve(numbers):
    total = 0
    for num in numbers:
        total += round(num)
    return total * len(numbers)",0.9458,-1.6731366545265998
420,1,"

def solve(n):
    return (n*(n+1)*(2*n+1))",0.7298,-5.98352477996
420,2,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i)**3
    return sum",0.9538,-1.6566175371079994
420,3,"

def solve(n):
    sum = 0
    for i in range(1,n+1):
        sum += (2*i)**3
    return sum",0.9228,-2.7301443472179994
420,4,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i)**3
    return sum",0.9538,-1.6566175371079994
420,5,"
def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i)**3
    return sum",0.8772,-4.585815125473999
421,1,"

def solve(tup, delimiter):
    return delimiter.join(str(x) for x in tup)",0.8293,-3.744314272221101
421,2,"

def solve(tuple, delimiter):
    result = ''
    for element in tuple:
        result += str(element) + delimiter
    return result[:-1]",0.8264,-6.1003796791500005
421,3,"

def solve(tup, delimiter):
    result = """"
    for elem in tup:
        result += str(elem) + str(delimiter)
    result = result[:-1]
    return result",0.7386,-11.81572131826
421,4,"

def solve(tup, delim):
    result = """"
    for element in tup:
        result += str(element) + delim
    return result[:-len(delim)]",0.8088,-7.426492447759001
421,5,"

def solve(tup, delimiter):
    return delimiter.join(str(i) for i in tup)",0.8222,-3.91563884737
422,1,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**3
    return sum/n",0.9452,-1.9148637330680005
422,2,"

def solve(n):
    sum = 0
    for i in range(1,n+1):
        sum += i**3
    return sum/n",0.933,-2.2874573178824997
422,3,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**3
    return sum/n",0.9452,-1.9148637330680005
422,4,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**3
    return sum/n",0.9452,-1.9148637330680005
422,5,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**3
    return sum/n",0.9452,-1.9148637330680005
423,1,"

def solve(grid):
    rows = len(grid)
    cols = len(grid[0])
    dp = [[0 for _ in range(cols)] for _ in range(rows)]

    for i in range(rows):
        dp[i][0] = grid[i][0]

    for j in range(1, cols):
        for i in range(rows):
            if i == 0:
                dp[i][j] = grid[i][j] + max(dp[i][j-1], dp[i+1][j-1])
            elif i == rows - 1:
                dp[i][j] = grid[i][j] + max(dp[i][j-1], dp[i-1][j-1])
            else:
                dp[i][j] = grid[i][j] + max(dp[i-1][j-1], dp[i][j-1], dp[i+1][j-1])

    max_gold = 0
    for i in range(rows):
        max_gold = max(max_gold, dp[i][cols-1])

    return max_gold",0.9461,-12.34881135102401
423,2,"

def solve(matrix):
    n = len(matrix)
    m = len(matrix[0])
    dp = [[0 for j in range(m)] for i in range(n)]
    for i in range(n):
        dp[i][0] = matrix[i][0]
    for j in range(1, m):
        for i in range(n):
            if i == 0:
                dp[i][j] = max(dp[i][j-1], dp[i+1][j-1]) + matrix[i][j]
            elif i == n-1:
                dp[i][j] = max(dp[i][j-1], dp[i-1][j-1]) + matrix[i][j]
            else:
                dp[i][j] = max(dp[i][j-1], dp[i-1][j-1], dp[i+1][j-1]) + matrix[i][j]
    max_gold = 0
    for i in range(n):
        max_gold = max(max_gold, dp[i][m-1])
    return max_gold",0.9485,-11.748763344651593
423,3,"

def solve(matrix):
    m = len(matrix)
    n = len(matrix[0])
    
    dp = [[0 for i in range(n)] for j in range(m)]
    
    for i in range(m):
        dp[i][0] = matrix[i][0]
        
    for j in range(1, n):
        for i in range(m):
            if i == 0:
                dp[i][j] = max(dp[i][j-1], dp[i+1][j-1]) + matrix[i][j]
            elif i == m-1:
                dp[i][j] = max(dp[i][j-1], dp[i-1][j-1]) + matrix[i][j]
            else:
                dp[i][j] = max(dp[i-1][j-1], dp[i][j-1], dp[i+1][j-1]) + matrix[i][j]
                
    max_gold = 0
    for i in range(m):
        max_gold = max(max_gold, dp[i][n-1])
        
    return max_gold",0.9481,-12.087344212697802
423,4,"

def solve(grid):
    m = len(grid)
    n = len(grid[0])
    for col in range(n-2,-1,-1):
        for row in range(m):
            right = grid[row][col+1]
            right_up = grid[row-1][col+1] if row-1 >= 0 else 0
            right_down = grid[row+1][col+1] if row+1 < m else 0
            grid[row][col] += max(right, right_up, right_down)
    return max(grid[row][0] for row in range(m))",0.8716,-17.3114366047334
423,5,"

def solve(grid):
    rows = len(grid)
    cols = len(grid[0])
    dp = [[0 for _ in range(cols)] for _ in range(rows)]
    
    for col in range(cols-1, -1, -1):
        for row in range(rows):
            if col == cols-1:
                dp[row][col] = grid[row][col]
            elif row == 0:
                dp[row][col] = grid[row][col] + max(dp[row][col+1], dp[row+1][col+1])
            elif row == rows-1:
                dp[row][col] = grid[row][col] + max(dp[row][col+1], dp[row-1][col+1])
            else:
                dp[row][col] = grid[row][col] + max(dp[row][col+1], dp[row-1][col+1], dp[row+1][col+1])
    
    max_gold = 0
    for row in range(rows):
        max_gold = max(max_gold, dp[row][0])
    
    return max_gold",0.9532,-10.973151401978798
424,1,"

def solve(input_tuple):
    rear_index_elements = []
    for string in input_tuple:
        rear_index_elements.append(string[-1])
    return rear_index_elements",0.8115,-6.8934460017760015
424,2,"

def solve(input_tuple):
    result = []
    for string in input_tuple:
        result.append(string[-1])
    return result",0.8216,-5.305404458576999
424,3,"

def solve(tup):
    result = []
    for string in tup:
        result.append(string[-1])
    return tuple(result)",0.9017,-2.895860012742999
424,4,"

def solve(tup):
    result = []
    for string in tup:
        result.append(string[-1])
    return tuple(result)",0.9017,-2.895860012742999
424,5,"

def solve(tup):
    result = []
    for string in tup:
        result.append(string[-1])
    return result",0.8997,-2.749469458657999
425,1,"

def solve(lst, element):
    count = 0
    for sublst in lst:
        if element in sublst:
            count += 1
    return count",0.9435,-2.0934077329871
425,2,"

def solve(lst, element):
    count = 0
    for sublist in lst:
        if element in sublist:
            count += 1
    return count ",0.8687,-4.9248274311046
425,3,"

def solve(lst, element):
    count = 0
    for sublist in lst:
        if element in sublist:
            count += 1
    return count",0.9657,-1.1853510311045998
425,4,"

def solve(lst, element):
    count = 0
    for sublist in lst:
        if element in sublist:
            count += 1
    return count",0.9657,-1.1853510311045998
425,5,"

def solve(lst, elem):
    count = 0
    for sublst in lst:
        if elem in sublst:
            count += 1
    return count",0.9109,-3.3583414277209007
426,1,"

def solve(numbers):
    return list(filter(lambda x: x % 2 != 0, numbers))",0.9099,-2.0779862289690003
426,2,"

def solve(nums):
    return list(filter(lambda x: x % 2 != 0, nums))",0.8873,-2.630936783813
426,3,"

def solve(nums):
    return list(filter(lambda x: x%2 != 0, nums))",0.8764,-2.7705459608639997
426,4,"

def solve(numbers):
    return list(filter(lambda x: x%2 != 0, numbers))",0.8924,-2.390650122612
426,5,"

def solve(numbers):
    return list(filter(lambda x: x % 2 != 0, numbers))",0.9099,-2.0779862289690003
427,1,"

import re
def solve(date):
    pattern = r'(\d{4})-(\d{2})-(\d{2})'
    match = re.search(pattern, date)
    if match:
        year = match.group(1)
        month = match.group(2)
        day = match.group(3)
        return day + '-' + month + '-' + year
    else:
        return ""Invalid date format.""",0.8841,-11.089796681094905
427,2,"

def solve(date):
    pattern = r'(\d{4})-(\d{2})-(\d{2})'
    match = re.match(pattern, date)
    if match:
        year = match.group(1)
        month = match.group(2)
        day = match.group(3)
        return f'{day}-{month}-{year}'
    else:
        return 'Invalid date format'",0.903,-8.677471878877201
427,3,"

def solve(date):
    pattern = r'^(\d{4})-(\d{2})-(\d{2})$'
    match = re.match(pattern, date)
    if match:
        year = match.group(1)
        month = match.group(2)
        day = match.group(3)
        return day + '-' + month + '-' + year
    else:
        return None",0.9,-8.850433271911902
427,4,"

def solve(date):
  pattern = r""(\d{4})-(\d{2})-(\d{2})""
  match = re.match(pattern, date)
  if match:
    year = match.group(1)
    month = match.group(2)
    day = match.group(3)
    return f""{day}-{month}-{year}""
  else:
    return ""Invalid date format.""",0.897,-9.127713523405202
427,5,"

def solve(date):
    pattern = r""(\d{4})-(\d{2})-(\d{2})""
    match = re.match(pattern, date)
    if match:
        return match.group(3) + ""-"" + match.group(2) + ""-"" + match.group(1)
    else:
        return ""Invalid date format.""",0.9068,-7.1451912533167
428,1,"

def solve(arr):
    gap = len(arr) // 2
    while gap > 0:
        for i in range(gap, len(arr)):
            temp = arr[i]
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        gap //= 2
    return arr",0.9825,-1.5723425003614997
428,2,"

def solve(arr):
    n = len(arr)
    gap = n // 2
    
    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            
            arr[j] = temp
        gap //= 2
    
    return arr",0.9246,-7.2148917750007
428,3,"

def solve(arr):
    gap = len(arr) // 2
    while gap > 0:
        for i in range(gap, len(arr)):
            temp = arr[i]
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        gap //= 2
    return arr",0.9825,-1.5723425003614997
428,4,"

def solve(arr):
    n = len(arr)
    gap = n // 2
    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        gap //= 2
    return arr",0.9704,-2.768911649364901
428,5,"

def solve(arr):
    gap = len(arr) // 2
    while gap > 0:
        for i in range(gap, len(arr)):
            temp = arr[i]
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        gap //= 2
    return arr",0.9825,-1.5723425003614997
429,1,"

def solve(tup1, tup2):
    elementwise = ()
    tuples = ()
    for i in range(len(tup1)):
        elementwise += (tup1[i], tup2[i])
        tuples += ((tup1[i], tup2[i]),)
    return elementwise, tuples",0.9,-6.636814741692001
429,2,"


def solve(tuple1, tuple2):
    elementwise = []
    for i in range(len(tuple1)):
        elementwise.append((tuple1[i], tuple2[i]))
    tuples = [tuple1, tuple2]
    return elementwise, tuples",0.7392,-15.711272150301998
429,3,"


def solve(tuple1, tuple2):
    elementwise = []
    tuples = []
    for i in range(min(len(tuple1), len(tuple2))):
        if type(tuple1[i]) == type(tuple2[i]):
            if isinstance(tuple1[i], tuple):
                tuples.append((tuple1[i], tuple2[i]))
            else:
                elementwise.append(tuple1[i] + tuple2[i])
    return (elementwise, tuples)",0.7776,-22.63759463523899
429,4,"

def solve(tup1, tup2):
    elementwise = []
    tuples = []
    for i in range(len(tup1)):
        elementwise.append(tup1[i])
        elementwise.append(tup2[i])
        tuples.append((tup1[i], tup2[i]))
    return elementwise, tuples",0.9223,-5.336919047335002
429,5,"

def solve(tup1, tup2):
    elementwise = []
    tuples = []
    for i in range(len(tup1)):
        elementwise.append(tup1[i] + tup2[i])
        tuples.append((tup1[i], tup2[i]))
    return elementwise, tuples",0.9418,-3.719725646888499
430,1,"

def solve(a, b, c):
    return -b / (2 * a)",0.8019,-4.194407932830001
430,2,"

def solve(a, b, c):
    directrix = -b / (2 * a)
    return directrix",0.875,-3.33852976108
430,3,"

def solve(a, b, c):
    if a == 0:
        return ""The given equation is not a parabola.""
    else:
        directrix = -(b**2 - 4*a*c)/(4*a)
        return ""The directrix of the parabola is x = {}"".format(directrix)",0.8284,-12.988858243889402
430,4,"

def solve(a, b, c):
    directrix = -b / (2 * a)
    return directrix",0.875,-3.33852976108
430,5,"

def solve(a, b, c):
    D = (b**2 - 4*a*c)/4*a
    return (-b/(2*a), D)",0.613,-17.126538894743
431,1,"

def solve(list1, list2):
    for i in list1:
        if i in list2:
            return True
    return False",0.9018,-3.0999343881970005
431,2,"

def solve(list1, list2):
    for element in list1:
        if element in list2:
            return True
    return False",0.9674,-0.9953575279919998
431,3,"

def solve(list1, list2):
    for elem1 in list1:
        for elem2 in list2:
            if elem1 == elem2:
                return True
    return False",0.9137,-3.6085893239596016
431,4,"

def solve(list1, list2):
    for element in list1:
        if element in list2:
            return True
    return False",0.9674,-0.9953575279919998
431,5,"

def solve(list1, list2):
    for element in list1:
        if element in list2:
            return True
    return False",0.9674,-0.9953575279919998
432,1,"

def solve(trapezium):
    trapezium.sort()
    length = len(trapezium)
    if length % 2 == 0:
        median1 = trapezium[length//2]
        median2 = trapezium[length//2 - 1]
        median = (median1 + median2) / 2
    else:
        median = trapezium[length//2]
    return median",0.8823,-11.521961522224297
432,2,"

def solve(trapezium):
    trapezium.sort()
    n = len(trapezium)
    if n % 2 == 0:
        median = (trapezium[n//2] + trapezium[n//2 - 1]) / 2
    else:
        median = trapezium[n//2]
    return median",0.9242,-6.2251997188798995
432,3,"

def solve(trapezium):
    sides = [trapezium[0], trapezium[1], trapezium[2], trapezium[3]]
    sides.sort()
    median = (sides[1] + sides[2]) / 2
    return median",0.9353,-4.344618193087099
432,4,"

def solve(a, b, h):
    return (a + b)/2 * h",0.7069,-6.589400624140001
432,5,"

def solve(trapezium):
    sorted_sides = sorted(trapezium)
    if len(sorted_sides) % 2 == 0:
        median = (sorted_sides[len(sorted_sides)//2] + sorted_sides[len(sorted_sides)//2-1]) / 2
    else:
        median = sorted_sides[len(sorted_sides)//2]
    return median",0.9021,-8.555635288679404
433,1,"

def solve(num, arr):
    for elem in arr:
        if num <= elem:
            return False
    return True",0.8691,-3.646409086251998
433,2,"

def solve(num, arr):
    return num > max(arr)",0.7754,-3.5604521002140004
433,3,"

def solve(num, arr):
    for element in arr:
        if num <= element:
            return False
    return True",0.9407,-1.5898818238709995
433,4,"

def solve(num, arr):
    for element in arr:
        if num <= element:
            return False
    return True",0.9407,-1.5898818238709995
433,5,"

def solve(number, array):
    for element in array:
        if number <= element:
            return False
    return True",0.8919,-2.975674813103999
434,1,"

def solve(string):
    import re
    pattern = ""ab+""
    if re.search(pattern, string):
        return True
    else:
        return False",0.8994,-3.6046359980219993
434,2,"

def solve(string):
    import re
    pattern = r'a+b+'
    match = re.search(pattern, string)
    if match:
        return True
    else:
        return False",0.9107,-3.743041320887
434,3,"
def solve(string):
    import re
    pattern = r'a+b+'
    if re.match(pattern, string):
        return True
    else:
        return False",0.8115,-7.310207387231001
434,4,"

def solve(string):
    import re
    pattern = ""ab+""
    match = re.search(pattern, string)
    if match:
        return True
    else:
        return False",0.9094,-3.702913454515
434,5,"

def solve(string):
    import re
    if re.search('ab+', string):
        return True
    else:
        return False",0.8378,-4.955803675665998
435,1,"

def solve(num):
    return num % 10",0.9283,-0.817880181333
435,2,"

def solve(number):
    return number % 10",0.8204,-2.17799888148
435,3,"

def solve(number):
    return number % 10",0.8204,-2.17799888148
435,4,"

def solve(n):
    return n % 10",0.7929,-2.552014062679999
435,5,"

def solve(num):
    return num % 10",0.9283,-0.817880181333
436,1,"

def solve(lst):
    for num in lst:
        if num < 0:
            print(num)",0.9572,-0.962761912345
436,2,"

def solve(lst):
    for num in lst:
        if num < 0:
            print(num)",0.9572,-0.962761912345
436,3,"

def solve(lst):
    for num in lst:
        if num < 0:
            print(num)",0.9572,-0.962761912345
436,4,"

def solve(lst):
    for num in lst:
        if num < 0:
            print(num)",0.9572,-0.962761912345
436,5,"

def solve(lst):
    for num in lst:
        if num < 0:
            print(num)",0.9572,-0.962761912345
437,1,"

def solve(string):
    result = """"
    for i in range(len(string)):
        if i % 2 == 0:
            result += string[i]
    return result",0.945,-2.0376370975419995
437,2,"

def solve(string):
    result = """"
    for i in range(len(string)):
        if i % 2 == 0:
            result += string[i]
    return result",0.945,-2.0376370975419995
437,3,"

def solve(string):
    new_string = """"
    for i in range(len(string)):
        if i % 2 == 0:
            new_string += string[i]
    return new_string",0.9508,-1.9687765607699996
437,4,"

def solve(string):
    new_string = """"
    for i in range(len(string)):
        if i % 2 == 0:
            new_string += string[i]
    return new_string",0.9508,-1.9687765607699996
437,5,"

def solve(string):
    new_string = """"
    for i in range(len(string)):
        if i%2 == 0:
            new_string += string[i]
    return new_string",0.8931,-4.296445237727
438,1,"

def solve(tuples):
    count = 0
    for tup in tuples:
        if (tup[1], tup[0]) in tuples:
            count += 1
    return count",0.8939,-4.711047628992
438,2,"

def solve(tuples):
    count = 0
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            if tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]:
                count += 1
    return count",0.9712,-1.9852210417249991
438,3,"

def solve(tuples):
    count = 0
    for tup in tuples:
        if tup[::-1] in tuples:
            count += 1
    return count",0.9011,-3.748950020811301
438,4,"

def solve(tuples):
    count = 0
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            if tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]:
                count += 1
    return count",0.9712,-1.9852210417249991
438,5,"

def solve(tuples):
    count = 0
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            if tuples[i] == tuples[j][::-1]:
                count += 1
    return count",0.9545,-2.561569477347601
439,1,"

def solve(lst):
    result = """"
    for num in lst:
        result += str(num)
    return int(result)",0.8672,-3.704974844392
439,2,"

def solve(list):
    num = 0
    for i in range(len(list)):
        num += list[i] * (10 ** (len(list) - 1 - i))
    return num",0.7665,-11.168668596402998
439,3,"

def solve(lst):
    result = 0
    for num in lst:
        result = result * 10 + num
    return result",0.9041,-3.023699418144
439,4,"

def solve(int_list):
    result = 0
    for num in int_list:
        result = result * 10 + num
    return result",0.878,-4.162575108506
439,5,"

def solve(lst):
    num = """"
    for i in lst:
        num += str(i)
    return int(num)",0.8663,-3.7319804948759994
440,1,"

def solve(sentence):
    adverbs = []
    words = sentence.split()
    for i in range(len(words)):
        if words[i].endswith(""ly""):
            adverbs.append((words[i], i+1))
    return adverbs",0.9441,-2.8773454463114994
440,2,"

def solve(sentence):
    adverbs = []
    words = sentence.split()
    for i in range(len(words)):
        if words[i].endswith('ly'):
            adverbs.append((words[i], i+1))
    return adverbs",0.9267,-3.805706002395001
440,3,"

def solve(sentence):
    adverbs = []
    words = sentence.split()
    for i, word in enumerate(words):
        if word.endswith('ly'):
            adverbs.append((word, i))
    return adverbs",0.8806,-5.720831287866
440,4,"

def solve(sentence):
    adverbs = []
    words = sentence.split()
    for i in range(len(words)):
        if words[i].endswith(""ly""):
            adverbs.append((words[i], i+1))
    return adverbs",0.9441,-2.8773454463114994
440,5,"

def solve(sentence):
    adverbs = []
    for word in sentence.split():
        if word.endswith(""ly""):
            adverbs.append((word, sentence.index(word)))
    return adverbs",0.8795,-5.00804530568
441,1,"

def solve(side):
    return 6 * (side ** 2)",0.9079,-1.545185239464
441,2,"

def solve(side):
    return 6 * (side ** 2)",0.9079,-1.545185239464
441,3,"

def solve(side):
    return 6 * (side ** 2)",0.9079,-1.545185239464
441,4,"

def solve(side):
    return 6*side**2",0.7366,-3.974662485904
441,5,"

def solve(side):
    return 6 * (side ** 2)",0.9079,-1.545185239464
442,1,"

def solve(arr):
    count = 0
    for num in arr:
        if num > 0:
            count += 1
    return count / len(arr)",0.9475,-1.9970495162143995
442,2,"

def solve(arr):
    count = 0
    for num in arr:
        if num > 0:
            count += 1
    return count / len(arr)",0.9475,-1.9970495162143995
442,3,"

def solve(arr):
    count_pos = 0
    for num in arr:
        if num > 0:
            count_pos += 1
    ratio = count_pos / len(arr)
    return ratio",0.884,-5.422836179717102
442,4,"

def solve(arr):
    count = 0
    for num in arr:
        if num > 0:
            count += 1
    return count / len(arr)",0.9475,-1.9970495162143995
442,5,"

def solve(arr):
    count = 0
    for num in arr:
        if num > 0:
            count += 1
    return count/len(arr)",0.9381,-2.3650596209123993
443,1,"

def solve(nums):
    largest_neg = None
    for num in nums:
        if num < 0:
            if largest_neg is None or num > largest_neg:
                largest_neg = num
    return largest_neg",0.9304,-3.3161941349019997
443,2,"

def solve(nums):
    largest_neg = None
    for num in nums:
        if num < 0:
            if largest_neg is None or num > largest_neg:
                largest_neg = num
    return largest_neg",0.9304,-3.3161941349019997
443,3,"

def solve(lst):
    neg_lst = [i for i in lst if i < 0]
    if len(neg_lst) == 0:
        return None
    else:
        return max(neg_lst)",0.8461,-7.6897801014178
443,4,"

def solve(lst):
    largest = None
    for num in lst:
        if num < 0 and (largest is None or num > largest):
            largest = num
    return largest",0.8896,-4.798342564675298
443,5,"

def solve(lst):
    largest_neg = None
    for num in lst:
        if num < 0:
            if largest_neg is None or num > largest_neg:
                largest_neg = num
    return largest_neg",0.9366,-3.0114704358660007
444,1,"

def solve(tuples, k):
    return [(t[0]+k, t[1]-k) for t in tuples]",0.8067,-6.015156441071001
444,2,"

def solve(tuple_list, k):
    trimmed_tuple_list = []
    for tup in tuple_list:
        trimmed_tuple = tup[k:]
        trimmed_tuple_list.append(trimmed_tuple)
    return trimmed_tuple_list",0.8713,-5.787813893437001
444,3,"

def solve(tuples, k):
    result = []
    for tup in tuples:
        trimmed_tup = tup[:-k]
        result.append(trimmed_tup)
    return result",0.8067,-8.161365906749996
444,4,"

def solve(tuples, k):
    trimmed_tuples = []
    for t in tuples:
        trimmed_tuples.append(t[:k])
    return trimmed_tuples",0.7884,-7.370922572675002
444,5,"

def solve(tuple_list, k):
    trimmed_list = []
    for tup in tuple_list:
        trimmed_tup = tup[k:]
        trimmed_list.append(trimmed_tup)
    return trimmed_list",0.8982,-4.401910540305499
445,1,"

def solve(tup1, tup2):
    result = ()
    for i in range(len(tup1)):
        result += (tup1[i] * tup2[i],)
    return result",0.947,-2.2892619748719993
445,2,"

def solve(tuple1, tuple2):
    result = []
    for i in range(len(tuple1)):
        result.append(tuple1[i] * tuple2[i])
    return tuple(result)",0.929,-2.8713372883083004
445,3,"

def solve(tuple1, tuple2):
    result = ()
    for i in range(len(tuple1)):
        result += (tuple1[i] * tuple2[i],)
    return result",0.9535,-1.8580192762003005
445,4,"

def solve(tuple1, tuple2):
    result = ()
    for i in range(len(tuple1)):
        result += (tuple1[i] * tuple2[i],)
    return result",0.9535,-1.8580192762003005
445,5,"

def solve(tuple1, tuple2):
    result = ()
    for i in range(len(tuple1)):
        result += (tuple1[i] * tuple2[i],)
    return result",0.9535,-1.8580192762003005
446,1,"

def solve(lst, tup):
    counts = {}
    for item in lst:
        counts[item] = tup.count(item)
    return counts",0.8498,-4.720424795845
446,2,"

def solve(lst, tup):
    count = {}
    for i in lst:
        if i in tup:
            if i in count:
                count[i] += 1
            else:
                count[i] = 1
    return count",0.8993,-5.4139682507083995
446,3,"

def solve(lst, tup):
    result = {}
    for item in lst:
        result[item] = tup.count(item)
    return result",0.844,-4.919400892802
446,4,"

def solve(lst, tup):
    count_dict = {}

    for i in lst:
        count = 0
        for j in tup:
            if i == j:
                count += 1
        count_dict[i] = count

    return count_dict",0.8441,-9.1511216018125
446,5,"

def solve(list, tuple):
    count_dict = {}
    for element in list:
        count_dict[element] = tuple.count(element)
    return count_dict",0.8626,-4.731094668770999
447,1,"

def solve(lst):
    return list(map(lambda x: x**3, lst))",0.9712,-0.5257848311950001
447,2,"

def solve(lst):
    return list(map(lambda x: x**3, lst))",0.9712,-0.5257848311950001
447,3,"

def solve(nums):
    return list(map(lambda x: x**3, nums))",0.8571,-2.7746206680640007
447,4,"

def solve(lst):
    return list(map(lambda x: x**3, lst))",0.9712,-0.5257848311950001
447,5,"

def solve(lst):
    return list(map(lambda x: x**3, lst))",0.9712,-0.5257848311950001
448,1,"

def solve(n):
    if n == 0:
        return 0
    elif n == 1 or n == 2:
        return 1
    else:
        a, b, c = 1, 1, 2
        for i in range(3, n + 1):
            d = a + b
            a = b
            b = c
            c = d
        return c",0.8772,-11.925734638205997
448,2,"

def solve(n):
    perrin = [3, 0, 2]
    if n <= 2:
        return perrin[n]
    else:
        for i in range(3, n + 1):
            perrin.append(perrin[i - 2] + perrin[i - 3])
        return sum(perrin)",0.9055,-7.7447223795553
448,3,"

def solve(n):
    if n == 0:
        return 0
    elif n == 1 or n == 2:
        return 1
    else:
        perrin = [0, 1, 2]
        for i in range(3, n+1):
            perrin.append(perrin[i-2] + perrin[i-3])
        return sum(perrin)",0.9227,-7.238787600296598
448,4,"

def solve(n):
    perrin = [3, 0, 2]
    if n < 3:
        return perrin[n]
    else:
        for i in range(3, n+1):
            new_num = perrin[i-3] + perrin[i-2]
            perrin.append(new_num)
    return perrin[n]",0.8184,-16.4317350284525
448,5,"

def solve(num):
    if num == 0:
        return 3
    elif num == 1:
        return 0
    elif num == 2:
        return 2
    else:
        return solve(num-2) + solve(num-3)",0.8706,-7.8964653842280015
449,1,"

def solve(a,b,c):
    if a+b>c and b+c>a and c+a>b:
        return True
    else:
        return False",0.7284,-9.825818958886002
449,2,"

def solve(x1,y1,x2,y2,x3,y3):
    a = ((x1-x2)**2 + (y1-y2)**2)**0.5
    b = ((x1-x3)**2 + (y1-y3)**2)**0.5
    c = ((x2-x3)**2 + (y2-y3)**2)**0.5
    if (a + b > c) and (a + c > b) and (b + c > a):
        return True
    else:
        return False",0.9196,-10.052811707161291
449,3,"

def solve(x1, y1, x2, y2, x3, y3):
    side1 = ((x1-x2)**2 + (y1-y2)**2)**0.5
    side2 = ((x2-x3)**2 + (y2-y3)**2)**0.5
    side3 = ((x3-x1)**2 + (y3-y1)**2)**0.5
    if (side1 + side2 > side3 and side2 + side3 > side1 and side3 + side1 > side2):
        return True
    else:
        return False",0.9112,-12.372536447884702
449,4,"

def solve(point1, point2, point3):
    x1, y1 = point1
    x2, y2 = point2
    x3, y3 = point3
    
    # Calculate the length of each side
    side1 = ((x2-x1)**2 + (y2-y1)**2)**0.5
    side2 = ((x3-x2)**2 + (y3-y2)**2)**0.5
    side3 = ((x3-x1)**2 + (y3-y1)**2)**0.5
    
    # Check if the sum of any two sides is greater than the third side
    if side1 + side2 > side3 and side2 + side3 > side1 and side1 + side3 > side2:
        return True
    else:
        return False",0.9323,-12.55673626235759
449,5,"

def solve(p1,p2,p3):
    x1,y1 = p1
    x2,y2 = p2
    x3,y3 = p3
    if ((x1-x2)*(y1-y3)) == ((x1-x3)*(y1-y2)):
        return False
    else:
        return True",0.7894,-17.02612079370101
450,1,"

def solve(list_of_strings, size):
    extracted_strings = []
    for string in list_of_strings:
        extracted_string = string[:size]
        extracted_strings.append(extracted_string)
    return extracted_strings",0.8505,-6.800191723650601
450,2,"

def solve(list_of_strings, size):
    return [string[:size] for string in list_of_strings]",0.8353,-4.138763811652
450,3,"

def solve(lst, size):
  result = []
  for string in lst:
    if len(string) == size:
      result.append(string)
  return result",0.8308,-6.118200301888999
450,4,"

def solve(string_list, size):
    result = []
    for string in string_list:
        if len(string) == size:
            result.append(string)
    return result",0.9031,-3.5668408750145004
450,5,"

def solve(strings, size):
    result = []
    for s in strings:
        if len(s) == size:
            result.append(s)
    return result",0.86,-4.976807416478001
451,1,"

import re

def solve(string):
    return re.sub(r""\s+"", """", string)",0.8809,-2.4087289265100003
451,2,"

import re

def solve(string):
    return re.sub(r'\s+', '', string)",0.861,-2.844082907658
451,3,"

def solve(string):
    return re.sub(r""\s+"", """", string)",0.8906,-1.8533299758919997
451,4,"

def solve(string):
  return re.sub(r'\s+', '', string)",0.7484,-4.637755217783
451,5,"

import re

def solve(string):
    return re.sub(r""\s+"", """", string)
",0.74,-5.72215025651
452,1,"

def solve(amount):
    if amount < 0:
        return None
    else:
        return amount * -1",0.8754,-3.3261433809
452,2,"

def solve(amount):
    if amount < 0:
        return None
    elif amount > 0:
        return amount * (-1)
    else:
        return 0",0.8523,-5.9152337423239985
452,3,"

def solve(amount):
    if amount < 0:
        return None
    else:
        return amount * -1",0.8754,-3.3261433809
452,4,"

def solve(amount):
    if amount > 0:
        return None
    else:
        return abs(amount)",0.8614,-3.579902064596
452,5,"

def solve(amount):
    if amount < 0:
        return None
    elif amount > 0:
        return amount * -1
    else:
        return 0",0.9055,-3.67299775857
453,1,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        if n % i == 0 and i % 2 == 0:
            sum += i
    return sum",0.96,-1.9585568682736
453,2,"

def solve(num):
    sum = 0
    for i in range(1, num+1):
        if num % i == 0 and i % 2 == 0:
            sum += i
    return sum",0.9595,-1.9845626720325005
453,3,"

def solve(num):
    sum = 0
    for i in range(1,num+1):
        if num % i == 0 and i % 2 == 0:
            sum += i
    return sum",0.9143,-4.2100443283908
453,4,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        if n % i == 0 and i % 2 == 0:
            sum += i
    return sum",0.96,-1.9585568682736
453,5,"

def solve(number):
    sum = 0
    for i in range(1, number+1):
        if number % i == 0 and i % 2 == 0:
            sum += i
    return sum",0.9137,-4.333978451635099
454,1,"

def solve(word):
    if ""z"" in word:
        return True
    else:
        return False",0.9276,-1.7275442486520007
454,2,"

def solve(word):
    if 'z' in word:
        return True
    else:
        return False",0.9664,-0.785734754633
454,3,"

def solve(word):
  if 'z' in word:
    return True
  else:
    return False",0.8651,-3.331883088635
454,4,"

def solve(word):
    if 'z' in word:
        return True
    else:
        return False",0.9664,-0.785734754633
454,5,"

def solve(word):
    if 'z' in word:
        return True
    else:
        return False",0.9664,-0.785734754633
455,1,"

def solve(month):
    if month in [1, 3, 5, 7, 8, 10, 12]:
        return True
    else:
        return False",0.9706,-1.194097592958
455,2,"

def solve(month):
    if month in [1, 3, 5, 7, 8, 10, 12]:
        return True
    else:
        return False",0.9706,-1.194097592958
455,3,"

def solve(month):
    if month in [1, 3, 5, 7, 8, 10, 12]:
        return True
    else:
        return False",0.9706,-1.194097592958
455,4,"

def solve(month):
    if month in [1, 3, 5, 7, 8, 10, 12]:
        return True
    else:
        return False",0.9706,-1.194097592958
455,5,"

def solve(month):
    if month in [1, 3, 5, 7, 8, 10, 12]:
        return True
    else:
        return False",0.9706,-1.194097592958
456,1,"

def solve(strings):
    reversed_strings = []
    for string in strings:
        reversed_strings.append(string[::-1])
    return reversed_strings",0.8904,-3.2500425460385
456,2,"

def solve(lst):
    return [s[::-1] for s in lst]",0.8281,-3.2067616263649987
456,3,"

def solve(lst):
    for i in range(len(lst)):
        lst[i] = lst[i][::-1]
    return lst",0.8991,-2.8723455535846987
456,4,"

def solve(lst):
    return [s[::-1] for s in lst]",0.8281,-3.2067616263649987
456,5,"

def solve(list_of_strings):
    reversed_strings = []
    for string in list_of_strings:
        reversed_strings.append(string[::-1])
    return reversed_strings",0.8591,-4.860636882857701
457,1,"

def solve(lst):
    min_length = len(lst[0])
    min_sublist = lst[0]
    for i in range(1, len(lst)):
        if len(lst[i]) < min_length:
            min_length = len(lst[i])
            min_sublist = lst[i]
    return min_sublist",0.9247,-5.0895146389207
457,2,"
def solve(list):
    min_len = len(list[0])
    min_sublist = list[0]

    for sublist in list:
        if len(sublist) < min_len:
            min_len = len(sublist)
            min_sublist = sublist

    return min_sublist",0.8339,-10.718825218897994
457,3,"

def solve(lst):
    min_len = float('inf')
    min_sub = []
    for i in range(len(lst)):
        for j in range(i+1, len(lst)+1):
            if len(lst[i:j]) < min_len:
                min_len = len(lst[i:j])
                min_sub = lst[i:j]
    return min_sub",0.8977,-7.766574032109398
457,4,"

def solve(lst):
    min_length = len(lst[0])
    min_sublist = lst[0]
    for sublst in lst:
        if len(sublst) < min_length:
            min_length = len(sublst)
            min_sublist = sublst
    return min_sublist",0.9265,-4.654871814410701
457,5,"

def solve(list_of_lists):
    min_length = float('inf')
    min_sublist = []
    for sublist in list_of_lists:
        if len(sublist) < min_length:
            min_length = len(sublist)
            min_sublist = sublist
    return min_sublist",0.913,-5.3700136802654015
458,1,"

def solve(length, width):
    area = length * width
    return area",0.968,-0.5521501641300002
458,2,"

def solve(length, width):
    area = length * width
    return area",0.968,-0.5521501641300002
458,3,"

def solve(length, width):
    area = length * width
    return area",0.968,-0.5521501641300002
458,4,"

def solve(length, width):
    area = length * width
    return area",0.968,-0.5521501641300002
458,5,"

def solve(length, width):
    return length * width",0.892,-1.3719746753029998
459,1,"

def solve(string):
    return re.sub(r'[A-Z]+', '', string)",0.8201,-3.570776180991
459,2,"

import re

def solve(string):
    return re.sub(r'[A-Z]+', '', string)",0.9068,-2.0554640559025
459,3,"

import re

def solve(string):
    regex = r'[A-Z]+'
    return re.sub(regex, '', string)",0.8162,-5.280429423335998
459,4,"
import re

def solve(string):
    return re.sub(r'[A-Z]+', '', string)",0.7818,-5.169756037450002
459,5,"

import re

def solve(string):
  return re.sub(r'[A-Z]+', '', string)",0.8271,-3.987326295556
460,1,"
def solve(lst):
    return [sublist[0] for sublist in lst]",0.7441,-5.3199734683152995
460,2,"

def solve(sublists):
    first_elements = []
    for sublist in sublists:
        first_elements.append(sublist[0])
    return first_elements",0.8921,-3.5399520581418007
460,3,"

def solve(lst):
    return [sublist[0] for sublist in lst]",0.8883,-2.1311090848282
460,4,"

def solve(lst):
    result = []
    for sublist in lst:
        result.append(sublist[0])
    return result",0.9074,-2.5251001448993984
460,5,"

def solve(lst):
    return [sublst[0] for sublst in lst]",0.8623,-2.8138398440356003
461,1,"

def solve(string):
    count = 0
    for char in string:
        if char.isupper():
            count += 1
    return count",0.9805,-0.6285371176092999
461,2,"

def solve(s):
    upper_count = 0
    for char in s:
        if char.isupper():
            upper_count += 1
    return upper_count",0.855,-5.483680457942002
461,3,"

def solve(string):
    count = 0
    for character in string:
        if character.isupper():
            count += 1
    return count",0.8576,-4.915704611032599
461,4,"

def solve(string):
    count = 0
    for char in string:
        if char.isupper():
            count += 1
    return count",0.9805,-0.6285371176092999
461,5,"

def solve(string):
    count = 0
    for char in string:
        if char.isupper():
            count += 1

    return count",0.8191,-6.385647341087299
462,1,"

def solve(lst):
    combinations = []
    n = len(lst)
    for i in range(1, 2**n):
        combination = []
        for j in range(n):
            if (i >> j) & 1:
                combination.append(lst[j])
        combinations.append(combination)
    return combinations",0.8436,-11.056564831487504
462,2,"

def solve(lst):
    res = [[]]
    for i in lst:
        res += [x+[i] for x in res]
    return res[1:]",0.7978,-7.904368183933
462,3,"
def solve(lst):
    combinations = [[]]
    for element in lst:
        for i in range(len(combinations)):
            new_combination = list(combinations[i])
            new_combination.append(element)
            combinations.append(new_combination)
    return combinations[1:]",0.7492,-15.882698234958305
462,4,"

def solve(lst):
    result = []
    for i in range(2**len(lst)):
        combo = []
        for j in range(len(lst)):
            if i & (1 << j):
                combo.append(lst[j])
        result.append(combo)
    return result",0.8334,-10.202980056349908
462,5,"

def solve(lst):
    if len(lst) == 0:
        return [[]]
    else:
        res = []
        for i in range(len(lst)):
            rest = lst[:i] + lst[i+1:]
            for j in solve(rest):
                res.append([lst[i]] + j)
        return res",0.8762,-8.7253572660743
463,1,"
def solve(nums):
    max_product = nums[0]
    max_so_far = nums[0]
    min_so_far = nums[0]
    
    for i in range(1, len(nums)):
        temp_max = max(max_so_far*nums[i], min_so_far*nums[i], nums[i])
        temp_min = min(max_so_far*nums[i], min_so_far*nums[i], nums[i])
        
        max_so_far = temp_max
        min_so_far = temp_min
        
        max_product = max(max_product, max_so_far)
        
    return max_product",0.8883,-14.328904160321605
463,2,"

def solve(nums):
    if not nums:
        return 0
    max_so_far = nums[0]
    max_ending_here = nums[0]
    min_ending_here = nums[0]
    for i in range(1, len(nums)):
        max_so_far = max(max_so_far*nums[i], min_ending_here*nums[i], nums[i])
        min_ending_here = min(max_ending_here*nums[i], min_ending_here*nums[i], nums[i])
        max_ending_here = max_so_far
    return max_so_far",0.8685,-16.925087875452604
463,3,"

def solve(nums):
    max_prod = nums[0]
    curr_prod = nums[0]
    for i in range(1, len(nums)):
        curr_prod = max(nums[i], curr_prod * nums[i])
        max_prod = max(max_prod, curr_prod)
    return max_prod",0.8878,-7.260662625585498
463,4,"

def solve(nums):
    max_prod = nums[0]
    min_prod = nums[0]
    result = nums[0]
    for i in range(1, len(nums)):
        temp_max = max(nums[i], max_prod * nums[i], min_prod * nums[i])
        temp_min = min(nums[i], max_prod * nums[i], min_prod * nums[i])
        max_prod = temp_max
        min_prod = temp_min
        result = max(result, max_prod)
    return result",0.9161,-9.202311457571804
463,5,"

def solve(nums):
    max_so_far = nums[0]
    max_ending_here = nums[0]
    min_ending_here = nums[0]

    for i in range(1, len(nums)):
        curr_num = nums[i]
        temp_max = max(curr_num, max_ending_here * curr_num, min_ending_here * curr_num)
        min_ending_here = min(curr_num, max_ending_here * curr_num, min_ending_here * curr_num)
        max_ending_here = temp_max
        max_so_far = max(max_so_far, max_ending_here)

    return max_so_far",0.9222,-10.608709146561807
464,1,"

def solve(dictionary):
  first_value = list(dictionary.values())[0]
  for value in dictionary.values():
    if value != first_value:
      return False
  return True",0.8446,-6.080397980455997
464,2,"

def solve(dic):
    values = list(dic.values())
    if len(values) == 0:
        return False
    else:
        return all(x == values[0] for x in values)",0.7519,-11.974046506901
464,3,"

def solve(dictionary):
    values = list(dictionary.values())
    if len(values) > 0:
        first_value = values[0]
        for value in values:
            if value != first_value:
                return False
        return True
    else:
        return False",0.8676,-7.954458330395
464,4,"

def solve(dictionary):
    values = dictionary.values()
    if len(set(values)) == 1:
        return True
    else:
        return False",0.8557,-4.829881579226999
464,5,"

def solve(dictionary):
    values = list(dictionary.values())
    first_value = values[0]
    for value in values:
        if value != first_value:
            return False
    return True",0.9251,-3.1121442433614996
465,1,"

def solve(dictionary):
    return {key: value for key, value in dictionary.items() if value}",0.881,-2.787312852010001
465,2,"

def solve(d):
    return {k: v for k, v in d.items() if v}",0.8411,-3.807252763784
465,3,"

def solve(input_dict):
    output_dict = {}
    for key, value in input_dict.items():
        if value:
            output_dict[key] = value
    return output_dict",0.8891,-4.349453996165001
465,4,"

def solve(dictionary):
    for key in list(dictionary.keys()):
        if not dictionary[key]:
            dictionary.pop(key)
    return dictionary",0.8639,-3.949005275929
465,5,"

def solve(d):
    return {k: v for k, v in d.items() if v is not None and v != ''}",0.8179,-5.8301190832900005
466,1,"

def solve(arr):
    left = 0
    right = len(arr) - 1
    
    while left < right:
        mid = (left + right) // 2
        
        if arr[mid] > arr[mid+1]:
            right = mid
        else:
            left = mid + 1
    
    return arr[left]",0.9294,-5.1982999716939995
466,2,"

def solve(arr): 
    low = 0
    high = len(arr) - 1
    while low < high: 
        mid = (low + high) // 2
        if arr[mid] > arr[mid + 1]: 
            high = mid
        else: 
            low = mid + 1
    return arr[low] ",0.809,-16.528732301471997
466,3,"

def solve(nums):
    left = 0
    right = len(nums) - 1
    
    while left < right:
        mid = (left + right) // 2
        if nums[mid] > nums[mid + 1]:
            right = mid
        else:
            left = mid + 1
    
    return left",0.9125,-6.410644831271
466,4,"

def solve(nums):
    if len(nums) == 1:
        return nums[0]
    left = 0
    right = len(nums) - 1
    while left < right:
        mid = (left + right) // 2
        if nums[mid] > nums[mid+1]:
            right = mid
        else:
            left = mid + 1
    return nums[left]",0.9321,-6.050006347119497
466,5,"

def solve(nums):
    left = 0
    right = len(nums) - 1
    
    while left < right:
        mid = (left + right) // 2
        
        if nums[mid] < nums[mid+1]:
            left = mid + 1
        else:
            right = mid
        
    return nums[left]",0.8878,-8.448442715412002
467,1,"

def solve(dec):
    octal = """"
    while dec > 0:
        rem = dec % 8
        octal = str(rem) + octal
        dec = dec // 8
    return octal",0.8837,-6.058403935654002
467,2,"

def solve(decimal): 
    octal = """" 
    while decimal > 0: 
        octal = str(decimal % 8) + octal 
        decimal = decimal // 8 
    return octal",0.8675,-6.539192921288
467,3,"

def solve(decimal):
    octal = """"
    while decimal > 0:
        remainder = decimal % 8
        octal = str(remainder) + octal
        decimal = decimal // 8
    return octal",0.936,-3.2412958175659994
467,4,"

def solve(decimal):
    octal = """"
    while decimal > 0:
        rem = decimal % 8
        octal = str(rem) + octal
        decimal = decimal // 8
    return octal",0.9058,-4.848547582942
467,5,"

def solve(num):
    octal = """"
    while num > 0:
        octal = str(num % 8) + octal
        num //= 8
    return octal",0.8661,-5.895084305848002
468,1,"

def solve(nums):
    if not nums:
        return 0

    dp = [0] * len(nums)
    dp[0] = nums[0]
    max_prod = dp[0]

    for i in range(1, len(nums)):
        max_val = 0
        for j in range(i):
            if nums[i] > nums[j]:
                max_val = max(max_val, dp[j])
        dp[i] = nums[i] * max_val
        max_prod = max(max_prod, dp[i])

    return max_prod",0.8618,-17.100108705595403
468,2,"

def solve(nums):
    # Initialize a variable to store the maximum product
    max_product = 0
    
    # Loop through the array
    for i in range(len(nums)):
        # Initialize a variable to store the current product
        current_product = 1
        
        # Loop through the subsequence starting from index i
        for j in range(i, len(nums)):
            # Check if the current number is greater than the previous number
            if nums[j] > nums[j-1]:
                # Update the current product by multiplying the number
                current_product *= nums[j]
                
                # Check if the current product is greater than the maximum product
                if current_product > max_product:
                    # Update the maximum product
                    max_product = current_product
                    
    # Return the maximum product
    return max_product",0.8384,-29.7953467266321
468,3,"

def solve(arr):
    if len(arr) < 2:
        return 0
    max_prod = arr[0] * arr[1]
    for i in range(len(arr)-1):
        for j in range(i+1, len(arr)):
            if arr[j] > arr[i]:
                max_prod = max(max_prod, arr[i] * arr[j])
    return max_prod",0.859,-12.461388048851
468,4,"

def solve(nums):
    dp = [1] * len(nums)
    for i in range(1, len(nums)):
        for j in range(i):
            if nums[j] < nums[i]:
                dp[i] = max(dp[i], dp[j] * nums[i])
    return max(dp)",0.9112,-5.860598603871999
468,5,"

def solve(nums):
    n = len(nums)
    dp = [1] * n
    max_product = 1
    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] * nums[i])
        max_product = max(max_product, dp[i])
        
    return max_product",0.8394,-14.882565290857
469,1,"

def solve(prices, k):
    n = len(prices)
    if n == 0 or k == 0:
        return 0
    dp = [[0 for _ in range(n)] for _ in range(k+1)]
    for i in range(1, k+1):
        maxdiff = -prices[0]
        for j in range(1, n):
            dp[i][j] = max(dp[i][j-1], maxdiff + prices[j])
            maxdiff = max(maxdiff, dp[i-1][j] - prices[j])
    return dp[k][n-1]",0.9062,-12.899562799539696
469,2,"

def solve(prices, k):
    n = len(prices)
    dp = [[0 for _ in range(k+1)] for _ in range(n)]
    for i in range(1, n):
        for j in range(1, k+1):
            max_profit = dp[i-1][j]
            for m in range(i):
                max_profit = max(max_profit, dp[m][j-1] + prices[i] - prices[m])
            dp[i][j] = max_profit
    return dp[n-1][k]",0.9051,-11.572342465781002
469,3,"

def solve(prices, k):
    n = len(prices)
    if n <= 1 or k <= 0:
        return 0
    if k > n // 2:
        max_profit = 0
        for i in range(1, n):
            if prices[i] > prices[i - 1]:
                max_profit += prices[i] - prices[i - 1]
        return max_profit
    else:
        dp = [[0 for _ in range(n)] for _ in range(k + 1)]
        for i in range(1, k + 1):
            max_diff = -prices[0]
            for j in range(1, n):
                max_diff = max(max_diff, dp[i - 1][j - 1] - prices[j - 1])
                dp[i][j] = max(dp[i][j - 1], prices[j] + max_diff)
        return dp[k][n - 1]",0.9158,-17.857686355188996
469,4,"

def solve(prices, k):
    n = len(prices)
    if k >= n // 2:
        profit = 0
        for i in range(1, n):
            if prices[i] > prices[i-1]:
                profit += prices[i] - prices[i-1]
        return profit
    else:
        dp = [[0 for _ in range(n)] for _ in range(k+1)]
        for i in range(1, k+1):
            max_diff = -prices[0]
            for j in range(1, n):
                dp[i][j] = max(dp[i][j-1], prices[j] + max_diff)
                max_diff = max(max_diff, dp[i-1][j] - prices[j])
        return dp[k][n-1]",0.9438,-9.83338880565
469,5,"

def solve(prices, k):
    if len(prices) <= 1 or k == 0:
        return 0
    if k >= len(prices) // 2:
        profit = 0
        for i in range(1, len(prices)):
            if prices[i] > prices[i-1]:
                profit += prices[i] - prices[i-1]
        return profit
    dp = [[0 for j in range(len(prices))] for i in range(k+1)]
    for i in range(1, k+1):
        for j in range(1, len(prices)):
            dp[i][j] = max(dp[i][j-1], prices[j] + max(dp[i-1][m] - prices[m] for m in range(j)))
    return dp[-1][-1]",0.8818,-22.019697783074488
470,1,"

def solve(tup1, tup2):
    result = []
    for i in range(len(tup1)):
        result.append(tup1[i] + tup2[i])
    return tuple(result)",0.9557,-1.9047335688863
470,2,"

def solve(tup1, tup2):
    result = ()
    for i in range(len(tup1)):
        result += (tup1[i]+tup2[i],)
    return result",0.8564,-6.5083989932025
470,3,"

def solve(tup1, tup2):
    result = []
    for i in range(len(tup1)):
        result.append(tup1[i] + tup2[i])
    return tuple(result)",0.9557,-1.9047335688863
470,4,"

def solve(tup1, tup2):
    result = []
    for i in range(len(tup1)):
        result.append(tup1[i] + tup2[i])
    return tuple(result)",0.9557,-1.9047335688863
470,5,"

def solve(tup1, tup2):
    result = []
    for i in range(len(tup1)):
        result.append(tup1[i] + tup2[i])
    return tuple(result)",0.9557,-1.9047335688863
471,1,"

def solve(arr, n):
    prod = 1
    for num in arr:
        prod = (prod * num) % n
    return prod",0.8966,-3.6003648364857
471,2,"

def solve(arr, n):
    prod = 1
    for num in arr:
        prod *= num
    return prod % n",0.8976,-3.1333178677757005
471,3,"

def solve(arr, n):
    result = 1
    for num in arr:
        result = (result * num) % n
    return result",0.9421,-1.9669022736008008
471,4,"

def solve(arr, n):
    result = 1
    for num in arr:
        result *= num
    return result % n",0.8795,-3.7227398159978007
471,5,"

def solve(arr, n):
    product = 1
    for num in arr:
        product *= num
    remainder = product % n
    return remainder",0.9027,-3.4798532208124
472,1,"

def solve(lst):
    sorted_lst = sorted(lst)
    for i in range(len(sorted_lst)-1):
        if sorted_lst[i+1] - sorted_lst[i] != 1:
            return False
    return True",0.9283,-3.4981248987769997
472,2,"

def solve(lst):
    for i in range(len(lst)-1):
        if lst[i] + 1 != lst[i+1]:
            return False
    return True",0.8615,-5.365082918218
472,3,"

def solve(nums):
    sorted_nums = sorted(nums)
    for i in range(len(sorted_nums)-1):
        if sorted_nums[i+1] != sorted_nums[i] + 1:
            return False
    return True",0.8611,-7.028696200021996
472,4,"

def solve(lst):
    lst.sort()
    for i in range(len(lst)-1):
        if lst[i+1] != lst[i] + 1:
            return False
    return True",0.909,-3.910422156237999
472,5,"

def solve(lst):
    lst.sort()
    for i in range(len(lst)-1):
        if lst[i+1] - lst[i] != 1:
            return False
    return True",0.9405,-2.516683115601
473,1,"

def solve(tuples):
    result = set(tuples[0])
    for i in range(1, len(tuples)):
        result = result.intersection(set(tuples[i]))
    return tuple(result)",0.8957,-4.624262496092502
473,2,"

def solve(tuple_list):
    intersection = tuple_list[0]
    for i in range(1, len(tuple_list)):
        intersection = set(intersection).intersection(tuple_list[i])
    return tuple(intersection)",0.8837,-5.439839159624302
473,3,"

def solve(tuple_list):
    result = tuple_list[0]
    for i in range(1, len(tuple_list)):
        result = tuple(set(result).intersection(tuple_list[i]))
    return result",0.8864,-4.944095936120999
473,4,"

def solve(tuple_list):
    # Convert tuple list to a list of sets
    sets_list = [set(t) for t in tuple_list]

    # Find the intersection of all sets in the list
    intersection = set.intersection(*sets_list)

    # Convert the intersection set back to a tuple
    return tuple(intersection)",0.7713,-17.918390422526002
473,5,"

def solve(tuple_list):
    intersection = tuple_list[0]
    for i in range(1, len(tuple_list)):
        intersection = tuple(set(intersection) & set(tuple_list[i]))
    return intersection",0.8998,-4.5387402586363015
474,1,"
def solve(string, old_char, new_char):
    new_string = """"
    for char in string:
        if char == old_char:
            new_string += new_char
        else:
            new_string += char
    return new_string",0.9088,-4.686904321293904
474,2,"

def solve(string, old_char, new_char):
    new_string = """"
    for char in string:
        if char == old_char:
            new_string += new_char
        else:
            new_string += char
    return new_string",0.9539,-2.3140493007119
474,3,"

def solve(string, old_char, new_char):
    return string.replace(old_char, new_char)",0.9247,-1.6439920272353
474,4,"

def solve(string, old_char, new_char):
    return string.replace(old_char, new_char)",0.9247,-1.6439920272353
474,5,"

def solve(string, old_char, new_char):
    new_string = """"
    for char in string:
        if char == old_char:
            new_string += new_char
        else:
            new_string += char
    return new_string",0.9539,-2.3140493007119
475,1,"

def solve(counter):
    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))
    return sorted_counter",0.9104,-2.723038514800001
475,2,"

def solve(counter):
    sorted_counter = {k: v for k, v in sorted(counter.items(), key=lambda item: item[1], reverse=True)}
    return sorted_counter",0.9233,-2.9515331525590005
475,3,"

def solve(counter):
    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)
    return sorted_counter",0.9101,-2.638307464145001
475,4,"

def solve(counter):
    sorted_counter = {k: v for k, v in sorted(counter.items(), key=lambda item: item[1])}
    return sorted_counter",0.8499,-5.692884681139001
475,5,"

def solve(counter):
    sorted_counter = {k: v for k, v in sorted(counter.items(), key=lambda item: item[1], reverse=True)}
    return sorted_counter",0.9233,-2.9515331525590005
476,1,"

def solve(arr):
    largest = arr[0]
    smallest = arr[0]
    for num in arr:
        if num > largest:
            largest = num
        if num < smallest:
            smallest = num
    return largest + smallest",0.9262,-3.988928373239799
476,2,"

def solve(arr):
   largest = arr[0]
   smallest = arr[0]
   for i in range(len(arr)):
      if arr[i] > largest:
         largest = arr[i]
      if arr[i] < smallest:
         smallest = arr[i]
   return largest + smallest",0.8645,-8.733065364031495
476,3,"

def solve(arr):
   smallest = arr[0]
   largest = arr[0]
   for num in arr:
      if num < smallest:
         smallest = num
      if num > largest:
         largest = num
   return smallest + largest",0.8556,-8.107441894208502
476,4,"

def solve(arr):
    # sort the array in ascending order
    arr.sort()
    # get the first element (smallest value) and last element (largest value)
    smallest = arr[0]
    largest = arr[-1]
    # return the sum of the smallest and largest value
    return smallest + largest",0.8472,-11.279126300099804
476,5,"

def solve(arr):
    return max(arr) + min(arr)",0.8867,-1.683012834634
477,1,"

def solve(string):
    return string.lower()",0.9461,-0.553741161755
477,2,"

def solve(string):
    return string.lower()",0.9461,-0.553741161755
477,3,"

def solve(string):
    return string.lower()",0.9461,-0.553741161755
477,4,"

def solve(string):
    return string.lower()",0.9461,-0.553741161755
477,5,"

def solve(string):
    return string.lower()",0.9461,-0.553741161755
478,1,"

def solve(string):
    new_string = """"
    for char in string:
        if not char.islower():
            new_string += char
    return new_string",0.9063,-3.2457880859249992
478,2,"

def solve(string):
    upper = """"
    for char in string:
        if char.isupper():
            upper += char
    return upper",0.7363,-8.878216237023999
478,3,"

def solve(string):
    result = """"
    for char in string:
        if char.isupper():
            result += char
    return result",0.9151,-2.5737739656269993
478,4,"

def solve(string):
    result = ''
    for char in string:
        if char.islower():
            continue
        else:
            result += char
    return result",0.8429,-5.979921407262299
478,5,"

def solve(string):
    result = ''
    for char in string:
        if not char.islower():
            result += char
    return result",0.8799,-3.8374150588392992
479,1,"

def solve(num):
    num_str = str(num)
    first_digit = num_str[0]
    return int(first_digit)",0.8449,-4.5505458534183
479,2,"

def solve(num):
    num_str = str(num)
    first_digit = num_str[0]
    return int(first_digit)",0.8449,-4.5505458534183
479,3,"

def solve(num):
    while num >= 10:
        num = num // 10
    return num",0.9153,-2.035064000836
479,4,"

def solve(n):
    while n >= 10:
        n = n // 10
    return n",0.8486,-3.77624778697
479,5,"

def solve(num):
    while num >= 10:
        num = num // 10
    return num",0.9153,-2.035064000836
480,1,"

def solve(string):
    max_count = 0
    max_char = ''
    # create a dictionary to store the count of each character
    char_count = {}

    # loop through the string and update the count of each character in the dictionary
    for char in string:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1

    # loop through the dictionary to find the character with the maximum count
    for char in char_count:
        if char_count[char] > max_count:
            max_count = char_count[char]
            max_char = char

    # return the character with the maximum count
    return max_char",0.8766,-19.23151070081739
480,2,"
def solve(string):
    char_count = {}
    max_char = ''
    max_count = 0
    
    for char in string:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    
    for char, count in char_count.items():
        if count > max_count:
            max_count = count
            max_char = char
    
    return max_char",0.8799,-11.390852671936605
480,3,"

def solve(string):
    char_count = {}
    for char in string:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    max_count = 0
    max_char = ''
    for char in char_count:
        if char_count[char] > max_count:
            max_count = char_count[char]
            max_char = char
    return max_char",0.9359,-6.028733381020897
480,4,"

def solve(string):
    # convert string to lowercase for case-insensitive comparison
    string = string.lower()

    # create a dictionary to store character counts
    char_counts = {}

    # loop through the string and update the character counts
    for char in string:
        if char in char_counts:
            char_counts[char] += 1
        else:
            char_counts[char] = 1

    # initialize variables to store the maximum occurring character and its count
    max_char = None
    max_count = 0

    # loop through the dictionary to find the maximum occurring character
    for char, count in char_counts.items():
        if count > max_count:
            max_char = char
            max_count = count
    
    # return the maximum occurring character
    return max_char",0.8468,-27.438304981459694
480,5,"

def solve(string):
    char_dict = {}
    for char in string:
        if char in char_dict:
            char_dict[char] += 1
        else:
            char_dict[char] = 1
    max_count = 0
    max_char = ''
    for key, value in char_dict.items():
        if value > max_count:
            max_count = value
            max_char = key
    return max_char",0.9231,-7.123640753361397
481,1,"

def solve(nums, target):
    if not nums:
        return False
    n = len(nums)
    dp = [[False for i in range(target+1)] for j in range(n+1)]
    for i in range(n+1):
        dp[i][0] = True
    for i in range(1, n+1):
        for j in range(1, target+1):
            if j < nums[i-1]:
                dp[i][j] = dp[i-1][j]
            else:
                dp[i][j] = dp[i-1][j] or dp[i-1][j-nums[i-1]]
    return dp[n][target]",0.9291,-10.669934564812802
481,2,"

def solve(nums, target):
    if target == 0:
        return True
    elif len(nums) == 0:
        return False
    elif nums[0] > target:
        return solve(nums[1:], target)
    else:
        return solve(nums[1:], target - nums[0]) or solve(nums[1:], target)",0.8965,-7.9796549056057
481,3,"

def solve(set, sum):
    if sum == 0:
        return True
    if len(set) == 0 and sum != 0:
        return False
    if set[0] > sum:
        return solve(set[1:], sum)
    return solve(set[1:], sum-set[0]) or solve(set[1:], sum)",0.9259,-5.693448044149
481,4,"

def solve(nums, target):
    dp = [False for _ in range(target+1)]
    dp[0] = True
    for num in nums:
        for i in range(target, num-1, -1):
            dp[i] = dp[i] or dp[i-num]
    return dp[target]",0.8891,-7.759777193458999
481,5,"

def solve(nums, target):
    dp = [False] * (target + 1)
    dp[0] = True

    for num in nums:
        for j in range(target, num - 1, -1):
            dp[j] = dp[j] or dp[j - num]

    return dp[target]",0.8639,-9.949070796488998
482,1,"

import re

def solve(input_string):
    pattern = ""[A-Z][a-z]+""
    matches = re.findall(pattern, input_string)
    return matches",0.8453,-5.547710800824703
482,2,"

import re

def solve(string):
    pattern = r'[A-Z][a-z]+'
    matches = re.findall(pattern, string)
    return matches",0.9044,-3.2149519404296005
482,3,"

import re

def solve(string):
    pattern = ""[A-Z][a-z]+""
    matches = re.findall(pattern, string)
    return matches",0.935,-2.0848475393103
482,4,"

import re

def solve(string):
    pattern = r""[A-Z][a-z]+""
    matches = re.findall(pattern, string)
    return matches",0.9162,-2.8017616232865996
482,5,"

import re

def solve(string):
    pattern = r""[A-Z][a-z]+""
    matches = re.findall(pattern, string)
    return matches",0.9162,-2.8017616232865996
483,1,"

def solve(x):
    n = 1
    fact = 1
    while fact % x != 0:
        n += 1
        fact *= n
    return n",0.8769,-5.255454106040998
483,2,"

def solve(x):
  num = 1
  while True:
    factorial = 1
    for i in range(1, num+1):
      factorial *= i
    if factorial % x == 0:
      return num
    num += 1",0.8941,-6.269900284772
483,3,"

def solve(x):
    factorial = 1
    num = 1
    while True:
        factorial *= num
        if factorial % x == 0:
            return num
        num += 1",0.8804,-5.606847074765001
483,4,"

def solve(x):
    num = 1
    factorial = 1
    while factorial % x != 0:
        num += 1
        factorial *= num
    return num",0.91,-3.77102942169
483,5,"

def solve(x):
    n = 1
    factorial = 1
    while True:
        if factorial % x == 0:
            return n
        else:
            n += 1
            factorial *= n",0.9167,-4.086269826943
484,1,"

def solve(tuple1, tuple2):
    for t in tuple2:
        if t in tuple1:
            tuple1 = tuple1[:tuple1.index(t)] + tuple1[tuple1.index(t)+1:]
    return tuple1",0.8812,-6.322843826924002
484,2,"

def solve(tuple1, tuple2):
    for t1 in tuple1:
        if t1 in tuple2:
            tuple1 = tuple1[:tuple1.index(t1)] + tuple1[tuple1.index(t1)+1:]
    return tuple1",0.8377,-9.5656153782727
484,3,"

def solve(tuple1, tuple2):
    new_tuple = tuple(t for t in tuple1 if t not in tuple2)
    return new_tuple",0.8379,-5.484285172995601
484,4,"

def solve(tup1, tup2):
    return tuple(x for x in tup1 if x not in tup2)",0.8391,-4.5624036897356
484,5,"

def solve(tup1, tup2):
    new_tup = []
    for i in tup1:
        if i not in tup2:
            new_tup.append(i)
    return tuple(new_tup)",0.877,-5.906031821552601
485,1,"

def solve(arr):
    largest_palindrome = 0
    for num in arr:
        if str(num) == str(num)[::-1]:
            if num > largest_palindrome:
                largest_palindrome = num
    return largest_palindrome",0.9531,-2.4483320507429993
485,2,"

def solve(arr):
    largest_palindrome = 0
    for num in arr:
        if str(num) == str(num)[::-1] and num > largest_palindrome:
            largest_palindrome = num
    return largest_palindrome",0.9477,-2.6834744159182993
485,3,"

def solve(arr):
    largest_palindrome = 0
    for num in arr:
        if str(num) == str(num)[::-1]:
            if num > largest_palindrome:
                largest_palindrome = num
    return largest_palindrome",0.9531,-2.4483320507429993
485,4,"

def solve(arr):
    largest_palindrome = 0
    for num in arr:
        if str(num) == str(num)[::-1]: # check if number is palindrome
            if num > largest_palindrome:
                largest_palindrome = num
    return largest_palindrome",0.8748,-7.757034223112299
485,5,"

def solve(arr):
    largest_palindrome = 0
    for num in arr:
        # check if num is a palindrome
        if str(num)[::-1] == str(num):
            # check if num is larger than current largest palindrome
            if num > largest_palindrome:
                largest_palindrome = num
    return largest_palindrome",0.8155,-14.686323233752203
486,1,"

import math

def solve(n, p, k):
    return (math.factorial(n) / (math.factorial(k) * math.factorial(n - k))) * (p ** k) * ((1 - p) ** (n - k))",0.8729,-7.2024221234625
486,2,"

from math import factorial

def solve(n, k, p):
    """"""
    n: total number of trials
    k: number of successes
    p: probability of success
    """"""
    # calculate the binomial coefficient
    coeff = factorial(n) / (factorial(k) * factorial(n-k))
    
    # calculate the probability
    prob = coeff * (p**k) * ((1-p)**(n-k))
    
    return prob",0.85,-15.444399389797498
486,3,"

from math import factorial

def solve(n, k, p):
    # n: total number of trials
    # k: number of successful trials
    # p: probability of success in each trial
    
    # Compute binomial coefficient
    coeff = factorial(n) / (factorial(k) * factorial(n-k))
    
    # Compute binomial probability
    prob = coeff * (p**k) * ((1-p)**(n-k))
    
    return prob",0.86,-14.782839714230596
486,4,"

def solve(n, k, p):
    def factorial(x):
        if x == 0:
            return 1
        else:
            return x * factorial(x - 1)

    return (factorial(n) / (factorial(k) * factorial(n - k))) * (p ** k) * ((1 - p) ** (n - k))",0.8766,-10.011108531005805
486,5,"

from math import factorial

def solve(n, k, p):
    return (factorial(n) / (factorial(k) * factorial(n-k))) * (p**k) * ((1-p)**(n-k))",0.9177,-4.034506975612
487,1,"

def solve(lst):
    return sorted(lst, key=lambda x: x[-1])",0.9246,-1.4112878390265997
487,2,"

def solve(lst):
    return sorted(lst, key=lambda x: x[-1])",0.9246,-1.4112878390265997
487,3,"

def solve(tuples):
    return sorted(tuples, key=lambda x: x[-1])",0.8958,-2.2001378905826012
487,4,"

def solve(lst):
    return sorted(lst, key=lambda x: x[-1])",0.9246,-1.4112878390265997
487,5,"

def solve(lst):
  return sorted(lst, key=lambda x: x[-1])",0.8013,-3.986705543302
488,1,"

def solve(side):
    area = (1/4) * (5 * (5 + 2 * (5**0.5))) * side**2
    return area",0.8096,-8.027017265863996
488,2,"

def solve(side):
    return (1/4) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) * (side ** 2)",0.8423,-6.176533053367001
488,3,"

def solve(side_length):
    return (1/4)*((5*(5+2*(5**(1/2))))**(1/2))*side_length**2",0.8096,-7.391548344048002
488,4,"

def solve(side):
    import math
    area = (1/4)*(math.sqrt(5*(5+2*math.sqrt(5))))*side**2
    return area",0.7828,-9.303355466086
488,5,"

def solve(side):
    return (1/4) * (5 * (5 + 2 * (5**0.5))) * (side**2)",0.8338,-6.363198270844999
489,1,"

def solve(arr):
    max_val = max(arr)
    freq = arr.count(max_val)
    return freq",0.8924,-2.617091326265
489,2,"

def solve(arr):
    largest = max(arr)
    count = 0
    for num in arr:
        if num == largest:
            count += 1
    return count",0.9075,-3.688937288138
489,3,"

def solve(arr):
    frequency = 0
    largest = max(arr)
    for num in arr:
        if num == largest:
            frequency += 1
    return frequency",0.8606,-5.704127079066899
489,4,"

def solve(arr):
    max_freq = 0
    max_val = max(arr)
    for num in arr:
        if num == max_val:
            max_freq += 1
    return max_freq",0.9155,-3.794209868634001
489,5,"

def solve(arr):
    freq = {}
    max_value = max(arr)
    
    for num in arr:
        if num == max_value:
            freq[num] = freq.get(num, 0) + 1
    
    return freq[max_value]",0.8052,-11.265742014934002
490,1,"

def solve(tuples):
    pairs = []
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            if tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]:
                pairs.append((tuples[i], tuples[j]))
    return pairs",0.9185,-6.038878575797501
490,2,"

def solve(tuple_list):
    symmetric_pairs = []
    
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            if tuple_list[i][0] == tuple_list[j][1] and tuple_list[i][1] == tuple_list[j][0]:
                symmetric_pairs.append((tuple_list[i], tuple_list[j]))
                
    return symmetric_pairs",0.9139,-7.2925792702073
490,3,"

def solve(tuple_list):
    symmetric_pairs = []
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            if tuple_list[i][0] == tuple_list[j][1] and tuple_list[i][1] == tuple_list[j][0]:
                symmetric_pairs.append(tuple_list[i])
                symmetric_pairs.append(tuple_list[j])
    return symmetric_pairs",0.966,-2.8404488173070015
490,4,"

def solve(tuple_list):
    result = []
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            if tuple_list[i][0] == tuple_list[j][1] and tuple_list[i][1] == tuple_list[j][0]:
                result.append(tuple_list[i])
                result.append(tuple_list[j])
    return result",0.9613,-3.0789002013289988
490,5,"

def solve(tuple_list):
    pairs = []
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            if tuple_list[i][0] == tuple_list[j][1] and tuple_list[i][1] == tuple_list[j][0]:
                pairs.append(tuple_list[i])
                pairs.append(tuple_list[j])
    return pairs",0.9526,-3.787556642595002
491,1,"

def solve(a, r, n):
    sum = a
    for i in range(1, n):
        sum += a * (r ** i)
    return sum",0.8843,-4.549217959292999
491,2,"

def solve(first_term, common_ratio, num_terms):
    sum = 0
    for i in range(num_terms):
        sum += first_term * (common_ratio**i)
    return sum",0.8297,-7.652430015775002
491,3,"

def solve(a, r, n):
    sum = a
    for i in range(n-1):
        sum += a * r**(i+1)
    return sum",0.7969,-8.400970536347002
491,4,"

def solve(a, r, n):
    return a * (1 - r ** n) / (1 - r)",0.8766,-3.4255785896549993
491,5,"

def solve(a, r, n):
    return a * (1 - r**n) / (1 - r)",0.8952,-2.878541913603999
492,1,"

def solve(arr, target):
    low = 0
    high = len(arr) - 1
    
    while low <= high:
        mid = (low + high) // 2
        
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    
    return -1",0.9475,-4.53161387392
492,2,"

def solve(arr, key):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == key:
            return mid
        elif arr[mid] < key:
            low = mid + 1
        else:
            high = mid - 1
    return -1",0.9329,-5.838540905272
492,3,"

def solve(arr, target):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return True
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
    return False",0.9505,-4.20994684555
492,4,"
def solve(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2
        if arr[mid] < target:
            low = mid + 1
        elif arr[mid] > target:
            high = mid - 1
        else:
            return mid

    return -1",0.8914,-9.658140991892
492,5,"

def solve(arr, target):
    low = 0
    high = len(arr) - 1
    
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1
            
    return -1",0.9409,-5.114990418834999
493,1,"

def solve(num_rows, num_cols, side_length, origin_x=0, origin_y=0):
    grid = []
    for row in range(num_rows):
        row_coords = []
        for col in range(num_cols):
            x = origin_x + 3 * side_length * col
            y = origin_y + 2 * side_length * row + side_length * col
            row_coords.append((x, y))
        grid.append(row_coords)
    return grid",0.7953,-22.44633091991499
493,2,"

def solve(n):
    grid = []
    for i in range(n):
        row = []
        for j in range(n):
            x = i*3 + j%3
            y = j*2
            if i%2 == 0:
                y += 1
            row.append((x,y))
        grid.append(row)
    return grid",0.7899,-17.691637178096
493,3,"

def solve(n):
    hex_grid = []
    for i in range(n):
        row = []
        for j in range(n):
            if i%2 == 0:
                row.append((i, j*2))
            else:
                row.append((i, j*2+1))
        hex_grid.append(row)
    return hex_grid",0.7955,-16.471053650421503
493,4,"

def solve(rows, columns, size):
    grid = []
    for row in range(rows):
        grid.append([])
        for column in range(columns):
            x = size * (3/2 * column)
            y = size * (row * (3**0.5) + (3**0.5)/2 * column)
            grid[row].append([(x, y + size/2), (x + size/2, y + (3**0.5)/2 * size), (x + size, y + size/2), (x + size, y - size/2), (x + size/2, y - (3**0.5)/2 * size), (x, y - size/2)])
    return grid",0.862,-23.456073147804
493,5,"

def solve(num_rows, num_cols, side_length):
    hex_grid = []
    for i in range(num_rows):
        row = []
        for j in range(num_cols):
            x = j * side_length * 1.5
            y = i * side_length * (3 ** 0.5)
            if i % 2 == 1:
                x += side_length * 0.75
            row.append([(x + side_length * k, y) for k in range(6)])
        hex_grid.append(row)
    return hex_grid",0.8654,-16.919192140072
494,1,"

def solve(binary_tuple):
    result = 0
    for i in range(len(binary_tuple)):
        result += binary_tuple[i] * 2**(len(binary_tuple) - i - 1)
    return result",0.8661,-6.4708579552410015
494,2,"

def solve(binary_tuple):
    result = 0
    for i in range(len(binary_tuple)):
        result += binary_tuple[i] * 2**(len(binary_tuple) - i - 1)
    return result",0.8661,-6.4708579552410015
494,3,"

def solve(binary_tuple):
    binary = ''.join(str(i) for i in binary_tuple)
    return int(binary, 2)",0.8223,-5.478464910774002
494,4,"

def solve(binary_tuple):
    binary_str = ''.join(str(i) for i in binary_tuple)
    return int(binary_str, 2)",0.8752,-3.999951148221
494,5,"

def solve(binary_tuple):
    binary_string = """".join(str(bit) for bit in binary_tuple)
    return int(binary_string, 2)",0.8318,-5.525346328006401
495,1,"

import re

def solve(string):
  return re.sub('[a-z]+', '', string)",0.7742,-5.1189197781023
495,2,"

import re

def solve(string):
    return re.sub('[a-z]+', '', string)",0.8554,-3.1247070659800005
495,3,"

import re

def solve(string):
    return re.sub('[a-z]', '', string)",0.841,-3.289294364530001
495,4,"

import re

def solve(string):
    return re.sub('[a-z]', '', string)",0.841,-3.289294364530001
495,5,"

import re

def solve(string):
    return re.sub(""[a-z]"", """", string)",0.8159,-3.866131465235001
496,1,"

def solve(nums):
    import heapq
    heapq.heapify(nums)
    return heapq.nsmallest(2, nums)",0.832,-4.7818365680129995
496,2,"

def solve(nums):
    import heapq
    return heapq.nsmallest(1, nums)[0]",0.7461,-6.443312357555
496,3,"

def solve(nums):
    import heapq
    heap = []
    for num in nums:
        heapq.heappush(heap,num)
    return heapq.heappop(heap)",0.7763,-8.8621253836712
496,4,"

import heapq

def solve(numbers):
  heapq.heapify(numbers)
  smallest = heapq.heappop(numbers)
  return smallest",0.7803,-6.451135222244
496,5,"

def solve(nums):
    import heapq
    heapq.heapify(nums)
    return heapq.nsmallest(2, nums)",0.832,-4.7818365680129995
497,1,"

import math

def solve(radius, height):
    base_area = math.pi * (radius ** 2)
    side_area = math.pi * radius * math.sqrt((radius ** 2) + (height ** 2))
    surface_area = base_area + side_area
    return surface_area",0.9327,-4.247320186023
497,2,"

import math

def solve(radius, height):
    base_area = math.pi * radius**2
    side_area = math.pi * radius * math.sqrt(radius**2 + height**2)
    surface_area = base_area + side_area
    return surface_area",0.9421,-3.2228232920800006
497,3,"

def solve(radius, height):
    import math
    return math.pi * radius * (radius + math.sqrt(height ** 2 + radius ** 2))",0.757,-9.188856109492502
497,4,"

def solve(radius, height):
    base_area = math.pi * radius ** 2
    side_area = math.pi * radius * math.sqrt(radius ** 2 + height ** 2)
    surface_area = base_area + side_area
    return surface_area",0.8983,-5.788771213936001
497,5,"

def solve(radius, height):
    from math import pi, sqrt
    base_area = pi * (radius ** 2)
    side_area = pi * radius * sqrt((height ** 2) + (radius ** 2))
    surface_area = base_area + side_area
    return surface_area",0.8929,-7.136048511768
498,1,"

def solve(a, b):
    if a == 0:
        return b
    else:
        return solve(b % a, a)",0.8448,-5.060807426708
498,2,"

def solve(a, b):
    while(a != b):
        if(a > b):
            a = a - b
        else:
            b = b - a
    return a",0.8093,-8.249559891129998
498,3,"

def solve(num1, num2):
    while(num2):
        temp = num2
        num2 = num1 % num2
        num1 = temp
    return num1",0.8812,-5.057886888384001
498,4,"

def solve(a, b):
    if b == 0:
        return a
    else:
        return solve(b, a % b)",0.9046,-3.008904917188999
498,5,"

def solve(num1, num2):
    if num1 == 0:
        return num2
    else:
        return solve(num2 % num1, num1)",0.8729,-5.030119060694
499,1,"

def solve(radius):
    return 2 * radius",0.8598,-1.66169252426
499,2,"

def solve(radius):
    return 2 * radius",0.8598,-1.66169252426
499,3,"

def solve(radius):
    diameter = 2 * radius
    return diameter",0.925,-1.24718953923
499,4,"

def solve(radius):
    return radius * 2",0.8494,-1.7959245055359998
499,5,"

def solve(radius):
    return radius * 2",0.8494,-1.7959245055359998
500,1,"

def solve(lst):
    return ''.join(str(e) for e in lst)",0.7618,-4.6246134409440005
500,2,"

def solve(lst):
    return ''.join(str(x) for x in lst)",0.78,-4.223943568075401
500,3,"

def solve(lst):
    return """".join(str(item) for item in lst)",0.728,-5.397521556125299
500,4,"

def solve(lst):
    string = """"
    for elem in lst:
        string += str(elem)
    return string",0.8728,-3.2656563733439996
500,5,"

def solve(lst):
    string = """"
    for element in lst:
        string += str(element)
    return string",0.9051,-2.392734277684798
501,1,"

def solve(pair):
    num1 = pair[0]
    num2 = pair[1]
    common_divisors = []
    for i in range(1, min(num1, num2)+1):
        if num1 % i == 0 and num2 % i == 0:
            common_divisors.append(i)
    return common_divisors",0.9521,-3.628789927930301
501,2,"

def solve(pair):
    num1 = pair[0]
    num2 = pair[1]
    common_divisors = []
    
    for i in range(1, min(num1, num2) + 1):
        if num1 % i == 0 and num2 % i == 0:
            common_divisors.append(i)
            
    return common_divisors",0.9135,-7.056909724225101
501,3,"

def solve(pair):
    a = pair[0]
    b = pair[1]
    c = min(a,b)
    common_divisors = []
    for i in range(1,c+1):
        if a%i == 0 and b%i == 0:
            common_divisors.append(i)
    return common_divisors",0.8678,-9.785909484233796
501,4,"

def solve(pair):
    a = pair[0]
    b = pair[1]
    common_divisors = []
    for i in range(1, min(a, b) + 1):
        if a % i == 0 and b % i == 0:
            common_divisors.append(i)
    return common_divisors",0.9424,-4.149536151935303
501,5,"

def solve(pair):
    a = pair[0]
    b = pair[1]
    common_divisors = []
    for i in range(1, min(a, b)+1):
        if a % i == 0 and b % i == 0:
            common_divisors.append(i)
    return common_divisors",0.9388,-4.292198013007999
502,1,"

def solve(a, b):
    return a % b",0.8993,-1.27329718443
502,2,"

def solve(a, b):
    return a % b",0.8993,-1.27329718443
502,3,"

def solve(num1, num2):
    remainder = num1 % num2
    return remainder",0.8877,-2.502057211428
502,4,"

def solve(num1, num2):
    return num1 % num2",0.9175,-1.378419566377
502,5,"

def solve(a, b):
    return a % b",0.8993,-1.27329718443
503,1,"

def solve(lst):
    sum = 0
    for i in range(len(lst)):
        sum += lst[i]
    return sum",0.9092,-2.664797952720999
503,2,"

def solve(lst):
    total = 0
    for i in range(len(lst)):
        total += lst[i]
    return total",0.9325,-1.956095552517
503,3,"

def solve(lst):
    total = 0
    for i in range(len(lst)-1):
        total += lst[i] + lst[i+1]
    return total",0.9204,-2.9869723950569997
503,4,"

def solve(lst):
    total = 0
    for i in range(len(lst)):
        total += lst[i]
    return total",0.9325,-1.956095552517
503,5,"

def solve(lst):
    sum = 0
    for i in range(len(lst)):
        sum += lst[i]
    return sum",0.9092,-2.664797952720999
504,1,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**3
    return sum",0.9538,-1.561961265797
504,2,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum = sum + i**3
    return sum",0.8629,-5.1624254081970005
504,3,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**3
    return sum",0.9538,-1.561961265797
504,4,"

def solve(n):
    return sum([i**3 for i in range(1,n+1)])",0.769,-5.779348729604001
504,5,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**3
    return sum",0.9538,-1.561961265797
505,1,"

def solve(arr):
    i = 0
    while i < len(arr):
        if arr[i] == 0:
            arr.pop(i)
            arr.append(0)
        else:
            i += 1
    return arr",0.8927,-5.6772741139699985
505,2,"

def solve(arr):
    zero_count = 0
    for i in range(len(arr)):
        if arr[i] == 0:
            zero_count += 1
        else:
            arr[i-zero_count] = arr[i]
    for i in range(len(arr)-zero_count,len(arr)):
        arr[i] = 0",0.8799,-8.8315047244295
505,3,"

def solve(array):
    zeroes = []
    non_zeroes = []
    for i in range(len(array)):
        if array[i] == 0:
            zeroes.append(array[i])
        else:
            non_zeroes.append(array[i])
    return non_zeroes + zeroes",0.8259,-10.713900624516992
505,4,"

def solve(arr):
    non_zero = [x for x in arr if x != 0]
    zeros = [x for x in arr if x == 0]
    return non_zero + zeros",0.8531,-6.6709256994565
505,5,"

def solve(nums):
    zeros = []
    non_zeros = []
    
    for num in nums:
        if num == 0:
            zeros.append(num)
        else:
            non_zeros.append(num)
    
    return non_zeros + zeros",0.8631,-7.2160898386803
506,1,"

def solve(n, k):
    if n < 0 or k < 0:
        return ""Invalid input""
    if k > n:
        return ""Invalid input""
    if k == 0:
        return 1
    return (n * solve(n-1, k-1))",0.8135,-13.002031661568004
506,2,"

def solve(n, k):
    if k > n:
        return 0
    else:
        perm = 1
        for i in range(n, n-k, -1):
            perm *= i
        return perm",0.9026,-4.916361557143999
506,3,"

def solve(n, k):
    if k > n:
        return 0
    else:
        result = 1
        for i in range(n, n-k, -1):
            result *= i
        return result",0.908,-4.631866470339999
506,4,"

def solve(n, k):
    result = 1
    for i in range(n, n - k, -1):
        result *= i
    return result",0.8276,-6.621791031147001
506,5,"

def solve(n, k):
    if k > n:
        return 0
    else:
        p = 1
        for i in range(k):
            p = p * (n-i)
        return p",0.799,-10.3194737635805
507,1,"

def solve(word_list, remove_list):
    for word in remove_list:
        while word in word_list:
            word_list.remove(word)
    return word_list",0.8997,-3.489520077036
507,2,"

def solve(word_list, words_to_remove):
    for word in words_to_remove:
        if word in word_list:
            word_list.remove(word)
    return word_list",0.9203,-2.908626187071
507,3,"

def solve(word_list, words_to_remove):
    for word in words_to_remove:
        if word in word_list:
            word_list.remove(word)
    return word_list",0.9203,-2.908626187071
507,4,"

def solve(word_list, remove_list):
    for word in remove_list:
        while word in word_list:
            word_list.remove(word)
    return word_list",0.8997,-3.489520077036
507,5,"

def solve(words, to_remove):
    for word in to_remove:
        if word in words:
            words.remove(word)
    return words",0.8405,-5.039717692385999
508,1,"

def solve(list1, list2):
    common_elements = []
    for element in list1:
        if element in list2:
            common_elements.append(element)
    if common_elements == list1[:len(common_elements)]:
        return True
    else:
        return False",0.91,-5.374225976404998
508,2,"

def solve(list1, list2):
    common_elements = []
    for element in list1:
        if element in list2:
            common_elements.append(element)
    if common_elements == list1:
        return True
    else:
        return False",0.8908,-6.015089382255001
508,3,"

def solve(list1, list2):
    i = 0
    j = 0
    while i < len(list1) and j < len(list2):
        if list1[i] == list2[j]:
            i += 1
            j += 1
        else:
            i += 1
    if j == len(list2):
        return True
    else:
        return False",0.9533,-4.1165152095495
508,4,"

def solve(list1, list2):
    common = []
    for i in range(len(list1)):
        if list1[i] in list2:
            common.append(list1[i])
    if common == list2:
        return True
    else:
        return False",0.9028,-5.729251369651002
508,5,"

def solve(list1, list2):
    common_items = []
    for item in list1:
        if item in list2:
            common_items.append(item)
    
    if common_items == list2:
        return True
    else:
        return False",0.8091,-11.226810924700002
509,1,"

def solve(num):
    sum = 0
    count = 0
    for i in range(1, num+1, 2):
        sum += i
        count += 1
    return sum / count",0.923,-3.846709392586
509,2,"

def solve(n):
    sum = 0
    count = 0
    for i in range(1, n+1, 2):
        sum += i
        count += 1
    return sum/count",0.9459,-2.6137398899784996
509,3,"

def solve(num):
    sum = 0
    count = 0
    for i in range(1, num+1, 2):
        sum += i
        count += 1
    avg = sum/count
    return avg",0.9186,-4.415827792005999
509,4,"

def solve(odd_num):
    sum = 0
    count = 0
    for i in range(1, odd_num+1, 2):
        sum += i
        count += 1
    return sum/count",0.9049,-4.996776331032001
509,5,"

def solve(n):
    sum = 0
    count = 0
    for i in range(1, n+1, 2):
        sum += i
        count += 1
    return sum/count",0.9459,-2.6137398899784996
510,1,"

def solve(arr, k):

    count = 0
    n = len(arr)

    for i in range(1, (1 << n)):
        product = 1

        for j in range(n):
            if i & (1 << j):
                product *= arr[j]

        if product < k:
            count += 1

    return count",0.8496,-12.222048469248003
510,2,"

def solve(arr, k):
    n = len(arr)
    dp = [[1 for i in range(k + 1)] for j in range(n + 1)]

    for i in range(1, n + 1):
        for j in range(1, k + 1):
            if arr[i - 1] > j:
                dp[i][j] = dp[i - 1][j]
            else:
                dp[i][j] = dp[i - 1][j] + dp[i - 1][j // arr[i - 1]]

    return dp[n][k]",0.911,-11.9354412770835
510,3,"

def solve(arr, k):
    count = 0
    n = len(arr)
    
    for i in range(1, (1 << n)):
        prod = 1
        for j in range(n):
            if i & (1 << j):
                prod *= arr[j]
        if prod < k:
            count += 1
    
    return count",0.8811,-9.624249654935005
510,4,"

def solve(arr, k):
    count = 0
    n = len(arr)
    for i in range(1, 2**n):
        product = 1
        for j in range(n):
            if i & (1 << j):
                product *= arr[j]
        if product < k:
            count += 1
    return count",0.9213,-6.150043106612003
510,5,"

def solve(arr, k):
    count = 0
    n = len(arr)
    for i in range(1 << n):
        product = 1
        for j in range(n):
            if i & (1 << j):
                product *= arr[j]
        if product < k:
            count += 1
    return count",0.9103,-6.767921155391002
511,1,"

def solve(num):
    factors = []
    for i in range(1, num+1):
        if num % i == 0:
            factors.append(i)
    min_sum = sum(factors)
    return min_sum",0.9233,-3.7482507163085006
511,2,"

def solve(n):
    min_sum = 0
    i = 1
    while i * i <= n:
        if n % i == 0:
            min_sum += i
            if i != n // i:
                min_sum += n // i
        i += 1
    return min_sum",0.8794,-8.613337298063998
511,3,"

def solve(n):
    factors = []
    for i in range(1, n+1):
        if n % i == 0:
            factors.append(i)
    min_sum = sum(factors)
    return min_sum",0.9326,-3.281332241153001
511,4,"

def solve(num):
    min_sum = num + 1
    for i in range(1, int(num**(0.5)) + 1):
        if num % i == 0:
            min_sum = min(min_sum, i + num//i)
    return min_sum",0.8427,-10.271918958463292
511,5,"

def solve(n):
    factors = []
    for i in range(1, n+1):
        if n % i == 0:
            factors.append(i)
    min_sum = sum(factors)
    return min_sum",0.9326,-3.281332241153001
512,1,"

def solve(mixed_tuple):
    freq_dict = {}
    for elem in mixed_tuple:
        if isinstance(elem, tuple):
            for nested_elem in elem:
                if nested_elem in freq_dict:
                    freq_dict[nested_elem] += 1
                else:
                    freq_dict[nested_elem] = 1
        else:
            if elem in freq_dict:
                freq_dict[elem] += 1
            else:
                freq_dict[elem] = 1
    return freq_dict",0.9187,-8.7343417588089
512,2,"

def solve(nested_tuple):
    freq_dict = {}
    for i in nested_tuple:
        if type(i) == tuple:
            for j in i:
                if j in freq_dict:
                    freq_dict[j] += 1
                else:
                    freq_dict[j] = 1
        else:
            if i in freq_dict:
                freq_dict[i] += 1
            else:
                freq_dict[i] = 1
    return freq_dict",0.9272,-7.259058102226304
512,3,"

def solve(tup):
    freq_dict = {}
    for element in tup:
        if type(element) == tuple:
            for nested_element in element:
                if nested_element in freq_dict:
                    freq_dict[nested_element] += 1
                else:
                    freq_dict[nested_element] = 1
        else:
            if element in freq_dict:
                freq_dict[element] += 1
            else:
                freq_dict[element] = 1
    return freq_dict",0.9097,-9.460552785745802
512,4,"

def solve(nested_tuple):
    frequency = {}
    for i in nested_tuple:
        if isinstance(i, tuple):
            for j in i:
                if j in frequency:
                    frequency[j] += 1
                else:
                    frequency[j] = 1
        else:
            if i in frequency:
                frequency[i] += 1
            else:
                frequency[i] = 1
    return frequency",0.925,-6.781395239013703
512,5,"

def solve(tup):
    freq = {}
    for i in tup:
        if isinstance(i, tuple):
            for j in i:
                if j in freq:
                    freq[j] += 1
                else:
                    freq[j] = 1
        else:
            if i in freq:
                freq[i] += 1
            else:
                freq[i] = 1
    return freq",0.9539,-4.0097266886181995
513,1,"

def solve(tuple, string):
    list = []
    for element in tuple:
        list.append(element)
        list.append(string)
    return list",0.8871,-3.5950620973815997
513,2,"

def solve(tup, string):
    listt = list(tup)
    for i in range(len(listt)):
        listt[i] = str(listt[i]) + string
    return listt",0.8279,-8.119746495777003
513,3,"

def solve(tuple, string):
    return [x + string for x in tuple]",0.6843,-6.82824736424
513,4,"

def solve(tup, string):
    lst = list(tup)
    for i in range(len(lst)):
        lst[i] = lst[i] + string
    return lst",0.9457,-2.065492855002
513,5,"

def solve(tup, string):
    lst = list(tup)
    for i in range(len(lst)):
        lst[i] = lst[i] + string
    return lst",0.9457,-2.065492855002
514,1,"

def solve(tuple_list):
    sum = 0
    for t in tuple_list:
        for e in t:
            sum += e
    return sum",0.8016,-7.297109165045501
514,2,"

def solve(tuple_list):
    total = 0
    for tup in tuple_list:
        total += sum(tup)
    return total",0.9266,-2.2098998237645
514,3,"

def solve(tuple_list):
    result = 0
    for tup in tuple_list:
        for num in tup:
            result += num
    return result",0.8841,-4.065195724116498
514,4,"

def solve(tuple_list):
    sum = 0
    for tup in tuple_list:
        sum += sum(tup)
    return sum",0.8704,-4.025242363678001
514,5,"

def solve(tuple_list):
    summation = 0
    for tup in tuple_list:
        for num in tup:
            summation += num
    return summation",0.898,-3.872967888995499
515,1,"

def solve(nums, m):
    if sum(nums) % m == 0:
        return True
    else:
        for i in range(1, len(nums)):
            for j in range(len(nums)-i+1):
                if sum(nums[j:j+i]) % m == 0:
                    return True
    return False",0.8562,-10.715243887853
515,2,"

def solve(arr, m):
    n = len(arr)
    dp = [[False for i in range(m)] for j in range(n + 1)]
    dp[0][0] = True
    for i in range(1, n + 1):
        for j in range(m):
            if dp[i - 1][j]:
                dp[i][j] = True
                dp[i][(j + arr[i - 1]) % m] = True
    return dp[n][0]",0.9289,-7.885967579156006
515,3,"

def solve(nums, m):
    for i in range(1, len(nums) + 1):
        for subset in itertools.combinations(nums, i):
            if sum(subset) % m == 0:
                return True
    return False",0.862,-7.724281306064
515,4,"

def solve(nums, m):
    if m == 0:
        return False
    n = len(nums)
    dp = [[False for i in range(m)] for j in range(n + 1)]
    for i in range(n + 1):
        dp[i][0] = True
    for i in range(1, n + 1):
        for j in range(1, m):
            if dp[i - 1][j]:
                dp[i][j] = True
            else:
                if j >= nums[i - 1]:
                    dp[i][j] = dp[i - 1][j - nums[i - 1]]
    return dp[n][m - 1]",0.8987,-15.92032137730099
515,5,"

def solve(arr, m):
    n = len(arr)
    dp = [False] * (m + 1)
    dp[0] = True
    for i in range(n):
        for j in range(m, arr[i] - 1, -1):
            dp[j] |= dp[j - arr[i]]
    return dp[m]",0.8959,-8.137101933042999
516,1,"

def solve(nums):
    RADIX = 10
    maxLength = False
    tmp, placement = -1, 1

    while not maxLength:
        maxLength = True
        buckets = [list() for _ in range(RADIX)]
        for i in nums:
            tmp = i // placement
            buckets[tmp % RADIX].append(i)
            if maxLength and tmp > 0:
                maxLength = False
        a = 0
        for b in range(RADIX):
            buck = buckets[b]
            for i in buck:
                nums[a] = i
                a += 1
        placement *= RADIX
    return nums",0.946,-7.6676308177889965
516,2,"

def solve(arr):
    max_num = max(arr)
    exp = 1
    while max_num//exp > 0:
        count = [0] * 10
        for i in arr:
            count[(i//exp)%10] += 1
        for i in range(1, 10):
            count[i] += count[i-1]
        output = [0] * len(arr)
        for i in range(len(arr)-1, -1, -1):
            output[count[(arr[i]//exp)%10]-1] = arr[i]
            count[(arr[i]//exp)%10] -= 1
        for i in range(len(arr)):
            arr[i] = output[i]
        exp *= 10
    return arr",0.9391,-10.183668187467006
516,3,"

def solve(arr):
    # find the maximum value in the array
    max_val = max(arr)
    
    # get the number of digits in the maximum value
    max_digits = len(str(max_val))
    
    # create 10 buckets for each digit (0-9)
    buckets = [[] for i in range(10)]
    
    # loop through each digit from right to left
    for digit in range(1, max_digits+1):
        # place each element in the appropriate bucket based on the current digit
        for num in arr:
            # get the digit at the current position
            curr_digit = (num // (10 ** (digit-1))) % 10
            # append the number to the correct bucket
            buckets[curr_digit].append(num)
        
        # update the array with the elements from the buckets
        arr = [num for bucket in buckets for num in bucket]
        
        # clear the buckets for the next iteration
        buckets = [[] for i in range(10)]
        
    return arr",0.8033,-47.32040921857249
516,4,"

def solve(lst):
    radix = 10
    max_num = max(lst)
    exp = 1
    while max_num // exp > 0:
        count = [0] * radix
        output = [0] * len(lst)
        for i in range(len(lst)):
            count[(lst[i] // exp) % radix] += 1
        for i in range(1, radix):
            count[i] += count[i - 1]
        for i in range(len(lst) - 1, -1, -1):
            output[count[(lst[i] // exp) % radix] - 1] = lst[i]
            count[(lst[i] // exp) % radix] -= 1
        for i in range(len(lst)):
            lst[i] = output[i]
        exp *= radix
    return lst",0.9305,-12.758852876398189
516,5,"

def solve(nums):
    max_num = max(nums)
    exp = 1
    while max_num // exp > 0:
        buckets = [[] for _ in range(10)]
        for num in nums:
            buckets[(num // exp) % 10].append(num)
        nums = [num for bucket in buckets for num in bucket]
        exp *= 10
    return nums",0.9238,-6.496264435207499
517,1,"

def solve(lst):
    max_num = 0
    for num in lst:
        if num > 0 and num > max_num:
            max_num = num
    return max_num",0.9012,-4.1591795887163014
517,2,"

def solve(list):
    largest = 0
    for num in list:
        if num > largest:
            largest = num
    return largest",0.8502,-5.0308535903703
517,3,"

def solve(lst):
    largest = 0
    for num in lst:
        if num > largest:
            largest = num
    return largest",0.9152,-2.7480517419919996
517,4,"

def solve(lst):
    max_num = 0
    for num in lst:
        if num > 0 and num > max_num:
            max_num = num
    return max_num",0.9012,-4.1591795887163014
517,5,"

def solve(numbers):
    largest = 0
    for num in numbers:
        if num > largest:
            largest = num
    return largest",0.9003,-3.254354698726
518,1,"

def solve(n):
    return n ** (1/2)",0.7459,-4.10483144576
518,2,"

def solve(n):
    return n**0.5",0.7569,-3.341515427956
518,3,"

def solve(n):
    return int(n ** 0.5)",0.8005,-3.3373664214580003
518,4,"

def solve(n):
    return n ** 0.5",0.8195,-2.587917671321
518,5,"

def solve(n):
    return n ** 0.5 ",0.6678,-5.653683271321
519,1,"

import math 
  
def solve(side): 
    volume = (side**3) / (6 * math.sqrt(2)) 
    return volume",0.7002,-10.693114705734
519,2,"

def solve(a):
    return (a**3)/(6*(2**0.5))",0.8295,-3.739657546783
519,3,"

def solve(a):
    return (a ** 3) / (6 * (2 ** 0.5))",0.89,-2.912321632846999
519,4,"

import math 

def solve(a):
    volume = (math.sqrt(2)/12) * (a**3)
    return volume",0.7287,-8.861569189349002
519,5,"

def solve(a):
    return (a**3)/(6*(2**(1/2)))",0.8349,-3.609093625815
520,1,"

def solve(arr):
    lcm = 1
    for i in range(len(arr)):
        lcm = (lcm * arr[i]) // gcd(lcm, arr[i])
    return lcm

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a",0.873,-8.826570164401
520,2,"

def solve(arr):
    lcm = 1
    for num in arr:
        lcm = lcm * num // gcd(lcm, num)
    return lcm

def gcd(x, y):
    while y:
        x, y = y, x % y
    return x",0.867,-8.277368561685998
520,3,"

def solve(arr):
    lcm = arr[0]
    for i in range(1, len(arr)):
        lcm = (lcm * arr[i]) // gcd(lcm, arr[i])
    return lcm

def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)",0.9364,-4.8597718643246
520,4,"

def solve(arr):
    lcm = arr[0]
    for i in range(1, len(arr)):
        lcm = (lcm * arr[i]) // gcd(lcm, arr[i])
    return lcm

def gcd(a, b):
    if b == 0:
        return a
    return gcd(b, a % b)",0.9299,-5.162448325891599
520,5,"

def solve(arr):
    lcm = arr[0]
    for i in range(1, len(arr)):
        gcd = math.gcd(lcm, arr[i])
        lcm = (lcm * arr[i]) // gcd
    return lcm",0.9314,-3.626536158825599
521,1,"

def solve(a, b, c):
    if a != b and a != c and b != c:
        print(""The triangle is scalene."")
    else:
        print(""The triangle is not scalene."")",0.9282,-3.3515386692204014
521,2,"

def solve(a, b, c):
    if a == b or b == c or a == c:
        return ""Triangle is not scalene""
    else:
        return ""Triangle is scalene""",0.8244,-8.304260745866598
521,3,"

def solve(side1, side2, side3):
    if side1 == side2 or side1 == side3 or side2 == side3:
        return False
    else:
        return True",0.8698,-5.859186536765001
521,4,"

def solve(a,b,c):
    if a!=b and b!=c and a!=c:
        print(""The triangle is scalene"")
    else:
        print(""The triangle is not scalene"")",0.8866,-5.174497289552001
521,5,"

def solve(side1, side2, side3):
    if side1 == side2 or side1 == side3 or side2 == side3:
        return False
    else:
        return True",0.8698,-5.859186536765001
522,1,"

def solve(arr):
    n = len(arr)
    lis = [1]*n
    lds = [1]*n
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and lis[i] < lis[j] + 1:
                lis[i] = lis[j] + 1
    for i in range(n-2, -1, -1):
        for j in range(n-1, i, -1):
            if arr[i] > arr[j] and lds[i] < lds[j] + 1:
                lds[i] = lds[j] + 1
    max_length = 0
    for i in range(n):
        max_length = max(max_length, lis[i] + lds[i] - 1)
    return max_length",0.9484,-9.651176720945996
522,2,"

def solve(nums):
    n = len(nums)
    inc = [1] * n
    dec = [1] * n

    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j] and inc[i] < inc[j] + 1:
                inc[i] = inc[j] + 1

    for i in range(n-2, -1, -1):
        for j in range(n-1, i, -1):
            if nums[i] > nums[j] and dec[i] < dec[j] + 1:
                dec[i] = dec[j] + 1

    longest = 0
    for i in range(n):
        longest = max(longest, inc[i] + dec[i] - 1)

    return longest",0.9453,-9.851927682859
522,3,"

def solve(arr):
    n = len(arr)
    inc = [1] * n
    dec = [1] * n

    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and inc[i] < inc[j] + 1:
                inc[i] = inc[j] + 1

    for i in range(n-2, -1, -1):
        for j in range(n-1, i, -1):
            if arr[i] > arr[j] and dec[i] < dec[j] + 1:
                dec[i] = dec[j] + 1

    max_len = 0
    for i in range(n):
        cur_len = inc[i] + dec[i] - 1
        max_len = max(max_len, cur_len)

    return max_len",0.9367,-12.099149044258
522,4,"

def solve(arr):
    n = len(arr)
    # Compute longest increasing subsequence
    lis = [1] * n
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and lis[i] < lis[j] + 1:
                lis[i] = lis[j] + 1
    # Compute longest decreasing subsequence
    lds = [1] * n
    for i in range(n-2, -1, -1):
        for j in range(n-1, i, -1):
            if arr[i] > arr[j] and lds[i] < lds[j] + 1:
                lds[i] = lds[j] + 1
    # Compute longest bitonic subsequence
    lbs = [0] * n
    for i in range(n):
        lbs[i] = lis[i] + lds[i] - 1
    return max(lbs)",0.9351,-14.0981606844816
522,5,"

def solve(arr):
    n = len(arr)
    inc = [1] * n
    dec = [1] * n
    for i in range(n):
        for j in range(i):
            if arr[i] > arr[j]:
                inc[i] = max(inc[i], inc[j] + 1)
    for i in range(n-1, -1, -1):
        for j in range(i+1, n):
            if arr[i] > arr[j]:
                dec[i] = max(dec[i], dec[j] + 1)
    max_len = 0
    for i in range(n):
        max_len = max(max_len, inc[i] + dec[i] - 1)
    return max_len",0.9357,-10.441272710773005
523,1,"

def solve(string, length):
    check = lambda x: any(char.isupper() for char in x) and any(char.islower() for char in x) and any(char.isdigit() for char in x) and len(x) == length
    return check(string)",0.9189,-4.739070026211998
523,2,"

def solve(string, length):
    return lambda x: any(x.isupper() for x in string) and any(x.islower() for x in string) and any(x.isdigit() for x in string) and len(string) == length",0.8795,-6.293372429738001
523,3,"

def solve(string, length):
    return lambda x: any(c.isupper() for c in x) and any(c.islower() for c in x) and any(c.isdigit() for c in x) and len(x) == length",0.9093,-4.6577329844660005
523,4,"

def solve(s, length):
    return lambda s: any(char.isupper() for char in s) and any(char.islower() for char in s) and any(char.isdigit() for char in s) and len(s) == length",0.91,-4.618935442121999
523,5,"

def solve(string, length):
    return lambda x: any(char.isupper() for char in x) and any(char.islower() for char in x) and any(char.isdigit() for char in x) and len(x) == length",0.9223,-3.96509410903
524,1,"

def solve(arr):
    n = len(arr)
    max_sum = 0
    for i in range(n):
        curr_sum = arr[i]
        for j in range(i+1, n):
            if arr[j] > arr[j-1]:
                curr_sum += arr[j]
            else:
                break
        if curr_sum > max_sum:
            max_sum = curr_sum
    return max_sum",0.9095,-8.154705202358302
524,2,"

def solve(arr):
    dp = [1] * len(arr)
    for i in range(1, len(arr)):
        for j in range(i):
            if arr[i] > arr[j]:
                dp[i] = max(dp[i], dp[j] + 1)
    return sum(dp)",0.9259,-4.85290716701
524,3,"

def solve(arr):
    n = len(arr)
    dp = [0] * n
    dp[0] = arr[0]
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and dp[i] < dp[j] + arr[i]:
                dp[i] = dp[j] + arr[i]
    return max(dp)",0.9237,-6.743051476704598
524,4,"
def solve(nums):
    if not nums:
        return 0
    
    dp = [1] * len(nums)
    for i in range(1, len(nums)):
        for j in range(i):
            if nums[j] < nums[i]:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return sum(max(dp[i] for i in range(len(nums)) if dp[i] == dp[-1] - i))",0.7951,-21.784713835323988
524,5,"

def solve(arr):
    dp = [0] * len(arr)
    dp[0] = arr[0]
    for i in range(1, len(arr)):
        dp[i] = arr[i]
        for j in range(i):
            if arr[i] > arr[j]:
                dp[i] = max(dp[i], dp[j] + arr[i])
    return max(dp)",0.9276,-6.0886392582131
525,1,"

def solve(line1, line2):
    slope1 = (line1[1][1] - line1[0][1]) / (line1[1][0] - line1[0][0])
    slope2 = (line2[1][1] - line2[0][1]) / (line2[1][0] - line2[0][0])
    if slope1 == slope2:
        return True
    else:
        return False",0.9684,-3.242324921436302
525,2,"

def solve(line1, line2):
    # line1 and line2 are lists of two points representing the start and end points of each line
    # check if slopes are equal
    slope1 = (line1[1][1] - line1[0][1]) / (line1[1][0] - line1[0][0])
    slope2 = (line2[1][1] - line2[0][1]) / (line2[1][0] - line2[0][0])
    
    if slope1 == slope2: # parallel
        return True
    else:
        return False",0.7812,-33.33517644816369
525,3,"
def solve(line1, line2):
    if line1[0]/line1[1] == line2[0]/line2[1]:
        return True
    else:
        return False",0.861,-6.2877784335218
525,4,"

def solve(line1, line2):
    slope1 = (line1[1][1] - line1[0][1]) / (line1[1][0] - line1[0][0])
    slope2 = (line2[1][1] - line2[0][1]) / (line2[1][0] - line2[0][0])
    if slope1 == slope2:
        return True
    else:
        return False",0.9684,-3.242324921436302
525,5,"

def solve(line1, line2):
    if line1[0]/line1[1] == line2[0]/line2[1]:
        return True
    else:
        return False",0.9225,-3.385849147147801
526,1,"

def solve(string):
    words = string.split()
    new_words = []
    for word in words:
        if len(word) > 1:
            new_word = word[0].upper() + word[1:-1] + word[-1].upper()
        else:
            new_word = word.upper()
        new_words.append(new_word)
    return ' '.join(new_words)",0.9176,-6.8809505096304475
526,2,"

def solve(s):
    words = s.split("" "")
    new_words = []
    
    for word in words:
        if len(word) >= 2:
            new_word = word[0].upper() + word[1:-1] + word[-1].upper()
        else:
            new_word = word[0].upper()
            
        new_words.append(new_word)
        
    return "" "".join(new_words)",0.8196,-17.3062302858347
526,3,"

def solve(string):
    words = string.split()
    result = []
    
    for word in words:
        new_word = word[0].upper() + word[1:-1] + word[-1].upper()
        result.append(new_word)
    
    return ' '.join(result)",0.8602,-9.0331648193041
526,4,"

def solve(s):
    words = s.split()
    result = """"
    for word in words:
        if len(word) > 1:
            new_word = word[0].upper() + word[1:-1] + word[-1].upper()
        else:
            new_word = word.upper()
        result += new_word + "" ""
    return result.strip()",0.8636,-11.294108229567348
526,5,"

def solve(string):
    new_string = """"
    words = string.split()
    for word in words:
        new_word = word[0].upper() + word[1:-1] + word[-1].upper()
        new_string += new_word + "" ""
    return new_string.strip()",0.907,-5.952848318975599
527,1,"

def solve(arr, target):
    result = []
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] + arr[j] == target:
                result.append((arr[i], arr[j]))
    return result",0.9451,-3.1610541833979986
527,2,"

def solve(arr, target):
    pairs = []
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] + arr[j] == target:
                pairs.append([arr[i], arr[j]])
    return pairs",0.9466,-3.0718240470845
527,3,"

def solve(arr, target):
    result = []
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] + arr[j] == target:
                result.append((arr[i], arr[j]))
    return result",0.9451,-3.1610541833979986
527,4,"

def solve(arr, num):
    result = []
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] + arr[j] == num:
                result.append((arr[i], arr[j]))
    return result",0.9005,-5.868734948498703
527,5,"

def solve(arr, target):
    pairs = []
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if (arr[i] + arr[j] == target):
                pairs.append((arr[i], arr[j]))
    return pairs",0.8899,-6.6508608545535
528,1,"

def solve(lists):
    min_len = float('inf')
    min_len_lists = []
    for lst in lists:
        if len(lst) < min_len:
            min_len = len(lst)
            min_len_lists = [lst]
        elif len(lst) == min_len:
            min_len_lists.append(lst)
    return min_len_lists",0.8875,-8.471270869827995
528,2,"

def solve(lists):
    min_len = float('inf')
    min_lists = []
    for lst in lists:
        if len(lst) < min_len:
            min_len = len(lst)
            min_lists = [lst]
        elif len(lst) == min_len:
            min_lists.append(lst)
    return min_lists",0.9338,-4.587576437809999
528,3,"

def solve(lists):
    min_len = len(lists[0])
    min_lists = [lists[0]]
    for l in lists[1:]:
        if len(l) < min_len:
            min_len = len(l)
            min_lists = [l]
        elif len(l) == min_len:
            min_lists.append(l)
    return min_lists",0.9076,-7.270298300478
528,4,"

def solve(lists):
    min_length = min(len(l) for l in lists)
    return [l for l in lists if len(l) == min_length]",0.8937,-3.9347173657515
528,5,"

def solve(lists):
    min_length = min(len(lst) for lst in lists)
    return [lst for lst in lists if len(lst) == min_length]",0.894,-3.922170381726
529,1,"

def solve(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        return solve(n-1) + 2*solve(n-2)",0.9749,-1.220652473755
529,2,"

def solve(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        return solve(n-1) + 2*solve(n-2)",0.9749,-1.220652473755
529,3,"

def solve(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        return solve(n-1) + 2*solve(n-2)",0.9749,-1.220652473755
529,4,"

def solve(n):
    if n == 0:
        return 0
    elif n == 1:
        return 2
    else:
        return solve(n-1) + 2*solve(n-2)",0.9099,-4.533111621462
529,5,"

def solve(n):
    if n == 0:
        return 2
    if n == 1:
        return 1
    return solve(n-1) + 2*solve(n-2)",0.9414,-2.7161178402849995
530,1,"

def solve(arr):
    count = 0
    for num in arr:
        if num < 0:
            count += 1
    return count / len(arr)",0.9518,-1.8268406639248
530,2,"

def solve(arr):
    count = 0
    for num in arr:
        if num < 0:
            count += 1
    return count/len(arr)",0.9466,-2.0287456778998
530,3,"

def solve(arr):
    count = 0
    for num in arr:
        if num < 0:
            count += 1
    return count/len(arr)",0.9466,-2.0287456778998
530,4,"

def solve(arr):
    count = 0
    for num in arr:
        if num < 0:
            count += 1
    return count/len(arr)",0.9466,-2.0287456778998
530,5,"

def solve(arr):
    count = 0
    for num in arr:
        if num < 0:
            count += 1
    return count/len(arr)",0.9466,-2.0287456778998
531,1,"

def solve(coins, value):
    min_coins = [0] * (value + 1)
    
    for i in range(1, value + 1):
        min_coins[i] = float('inf')
        
        for coin in coins:
            if i - coin >= 0:
                min_coins[i] = min(min_coins[i], min_coins[i - coin] + 1)
                
    return min_coins[value]",0.8764,-12.663039543721002
531,2,"

def solve(coins, value):
    if value == 0:
        return 0
    min_coins = [float('inf')] * (value+1)
    min_coins[0] = 0
    for coin in coins:
        for i in range(coin, value+1):
            min_coins[i] = min(min_coins[i], min_coins[i-coin] + 1)
    return min_coins[value] if min_coins[value] != float('inf') else -1",0.9113,-10.216713554140297
531,3,"

def solve(value):
    coins = [1, 5, 10, 25]
    count = 0
    for coin in coins[::-1]:
        count += value // coin
        value = value % coin
    return count",0.8465,-8.499715657016598
531,4,"

def solve(coins, value):
    min_coins = [float('inf')] * (value + 1)
    min_coins[0] = 0
    for i in range(1, value + 1):
        for coin in coins:
            if (i - coin) >= 0:
                min_coins[i] = min(min_coins[i], min_coins[i - coin] + 1)

    return min_coins[value] if min_coins[value] != float('inf') else -1",0.8729,-15.089984197015
531,5,"

def solve(value):
    coins = [1, 5, 10, 25] # available coin denominations
    num_coins = 0
    for coin in reversed(coins):
        num_coins += value // coin
        value = value % coin
    return num_coins",0.8051,-13.658127704862002
532,1,"

def solve(string1, string2):
    if len(string1) != len(string2):
        return False
    
    count1 = {}
    count2 = {}
    
    for char in string1:
        count1[char] = count1.get(char, 0) + 1
        
    for char in string2:
        count2[char] = count2.get(char, 0) + 1
        
    return count1 == count2",0.8872,-11.011590748425895
532,2,"

def solve(str1, str2):
    if len(str1) != len(str2):
        return False
    else:
        sorted_str1 = sorted(str1)
        sorted_str2 = sorted(str2)
        if sorted_str1 == sorted_str2:
            return True
        else:
            return False",0.9578,-2.8052675223139003
532,3,"

def solve(str1, str2):
    if len(str1) != len(str2):
        return False
    else:
        return sorted(str1) == sorted(str2)",0.9184,-3.2328453825999004
532,4,"

def solve(str1, str2):
    if len(str1) != len(str2):
        return False
    else:
        count1 = {}
        count2 = {}
        for i in range(len(str1)):
            if str1[i] in count1:
                count1[str1[i]] += 1
            else:
                count1[str1[i]] = 1
            if str2[i] in count2:
                count2[str2[i]] += 1
            else:
                count2[str2[i]] = 1
        if count1 == count2:
            return True
        else:
            return False",0.9416,-8.0685644209849
532,5,"

def solve(str1, str2):
    if len(str1) != len(str2):
        return False
    
    str1_list = list(str1)
    str2_list = list(str2)
    
    str1_list.sort()
    str2_list.sort()
    
    for i in range(len(str1)):
        if str1_list[i] != str2_list[i]:
            return False
    
    return True",0.8948,-9.446245772844204
533,1,"

def solve(input_tuple, data_type):
    output_tuple = tuple()
    for element in input_tuple:
        if type(element) != data_type:
            output_tuple += (element,)
    return output_tuple",0.8287,-7.891607408944003
533,2,"

def solve(tup, data_type):
    new_tup = ()
    for elem in tup:
        if not isinstance(elem, data_type):
            new_tup += (elem,)
    return new_tup",0.8564,-6.666646175244002
533,3,"

def solve(tup, data_type):
    new_tup = ()
    for element in tup:
        if type(element) != data_type:
            new_tup = new_tup + (element,)
    return new_tup",0.8621,-6.973527162706
533,4,"

def solve(input_tuple, data_type):
    output_tuple = tuple(element for element in input_tuple if not isinstance(element, data_type))
    return output_tuple",0.82,-6.348603271953001
533,5,"

def solve(data_type, tup):
    new_tup = ()
    for i in tup:
        if type(i) != data_type:
            new_tup = new_tup + (i,)
    return new_tup",0.8548,-7.219197901756999
534,1,"

def solve(pattern, string):
    index = string.find(pattern)
    if index == -1:
        return ""Pattern not found""
    else:
        return ""Pattern found at index "" + str(index)",0.8867,-5.170400950465001
534,2,"

def solve(literals, string):
    index = string.find(literals)
    if index == -1:
        return ""Pattern not found""
    else:
        return ""Pattern found at index "" + str(index)",0.8683,-6.354236364547001
534,3,"

def solve(str1, str2):
    if str1 in str2:
        return ""The literal string is present in the original string at index: "" + str(str2.index(str1))
    else:
        return ""The literal string is not present in the original string.""

#Example:
solve(""world"", ""hello world"") #Output: The literal string is present in the original string at index: 6",0.7149,-28.866922405171
534,4,"

def solve(pattern, string):
    if pattern in string:
        location = string.find(pattern)
        return ""Pattern found at index "" + str(location)
    else:
        return ""Pattern not found""",0.7892,-9.944980019125005
534,5,"

def solve(str, pattern):
    if pattern in str:
        return str.find(pattern)
    else:
        return -1",0.7034,-9.148203057781004
535,1,"

def solve(radius, height, top=True):
    if top:
        return 3.14 * (radius**2)
    else:
        return 2 * 3.14 * radius * height",0.8377,-7.440337520660998
535,2,"

def solve(height, radius, is_top):
    if is_top:
        return radius * radius * 3.14159
    else:
        return 2 * radius * 3.14159 * height",0.7489,-12.719703998669
535,3,"

def solve(radius, height, top_or_bottom):
    if top_or_bottom == 'top':
        return 3.14159 * (radius**2)
    elif top_or_bottom == 'bottom':
        return 3.14159 * (radius**2)
    else:
        print(""Please specify 'top' or 'bottom' for top_or_bottom argument."")",0.8046,-16.519530127576996
535,4,"

def solve(r, h, top = True):
    if top:
        return 2 * 3.14 * r**2
    else:
        return 2 * 3.14 * r * h",0.8193,-8.967391234098
535,5,"

def solve(radius, height, top=True):
    if top:
        return 3.14 * radius**2
    else:
        return 3.14 * radius**2 + 2 * 3.14 * radius * height",0.8316,-9.221689025306
536,1,"

def solve(lst, n):
    return lst[n-1]",0.9558,-0.6323217970189999
536,2,"

def solve(lst, n):
    return lst[n-1]",0.9558,-0.6323217970189999
536,3,"

def solve(lst,n):
    return lst[n-1]",0.7339,-4.022625205768
536,4,"

def solve(lst, n):
    return lst[n-1]",0.9558,-0.6323217970189999
536,5,"

def solve(lst, n):
    return lst[n-1]",0.9558,-0.6323217970189999
537,1,"

def solve(s):
    words = s.split()
    seen = set()
    for word in words:
        if word in seen:
            return word
        seen.add(word)
    return None",0.9037,-4.051498032962499
537,2,"

def solve(s):
    words = s.split()
    seen = set()
    for word in words:
        if word in seen:
            return word
        seen.add(word)",0.8448,-6.238472174802499
537,3,"

def solve(string):
    words = string.split()
    seen = set()
    for word in words:
        if word in seen:
            return word
        else:
            seen.add(word)
    return None",0.9238,-3.4095941419083005
537,4,"

def solve(s):
    words = s.split()
    seen = set()
    for word in words:
        if word in seen:
            return word
        seen.add(word)
    return None",0.9037,-4.051498032962499
537,5,"

def solve(string):
    words = string.split()
    seen = set()
    for word in words:
        if word in seen:
            return word
        else:
            seen.add(word)",0.8751,-5.3359351087283
538,1,"

def solve(string_list):
    return tuple(string_list)",0.9252,-0.93296324797
538,2,"

def solve(string_list):
    return tuple(string_list)",0.9252,-0.93296324797
538,3,"

def solve(string_list):
    return tuple(string_list)",0.9252,-0.93296324797
538,4,"

def solve(string_list):
    return tuple(string_list)",0.9252,-0.93296324797
538,5,"

def solve(string_list):
    return tuple(string_list)",0.9252,-0.93296324797
539,1,"

def solve(base, powers):
    return list(map(lambda x: base**x, powers))",0.7193,-6.58923586713
539,2,"

def solve(number, bases):
    return list(map(lambda base, index: base**index, bases, range(len(bases))))",0.8087,-5.733701371342
539,3,"

def solve(base, n):
    powers = list(map(lambda x: base**x, range(n+1)))
    return powers",0.8111,-5.651842545609999
539,4,"

def solve(number, bases):
    powers = list(map(lambda x, y: x**y, bases, range(len(bases))))
    return [number**power for power in powers]",0.8365,-6.961093534530001
539,5,"

def solve(n):
    num_list = list(range(1, n+1))
    power_list = list(map(lambda x,y: x**y, num_list, num_list))
    return power_list",0.7475,-12.220111916252
540,1,"

def solve(arr):
    freq = {}
    for i in arr:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    max_freq = max(freq.values())
    min_freq = min(freq.values())
    return max_freq - min_freq",0.9315,-4.4692067889379
540,2,"

def solve(arr):
    freq = {}
    for num in arr:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1
    values = list(freq.values())
    return max(values) - min(values)",0.9193,-4.711278117521098
540,3,"

def solve(arr):
    freq = {}
    for num in arr:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1
    highest = max(freq.values())
    least = min(freq.values())
    return highest - least",0.9218,-4.804841138536101
540,4,"

def solve(arr):
    freq = {}
    for num in arr:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1
    values = list(freq.values())
    return max(values) - min(values)",0.9193,-4.711278117521098
540,5,"

def solve(arr):
    freq = {}
    for num in arr:
        if num in freq:
            freq[num] += 1
        else:
            freq[num] = 1
    highest = max(freq.values())
    least = min(freq.values())
    return highest - least",0.9218,-4.804841138536101
541,1,"

def solve(num):
    sum = 0
    for i in range(1, num):
        if num % i == 0:
            sum += i
    if sum > num:
        return True
    else:
        return False",0.9468,-2.7869596358565
541,2,"

def solve(num):
    sum = 0
    for i in range(1, num):
        if num % i == 0:
            sum += i
    if sum > num:
        return True
    else:
        return False",0.9468,-2.7869596358565
541,3,"

def solve(num):
    factors = []
    for i in range(1, num):
        if num % i == 0:
            factors.append(i)
    if sum(factors) > num:
        return True
    else:
        return False",0.912,-4.789957603053001
541,4,"
def solve(n):
    sum = 0
    for i in range(1, n):
        if n % i == 0:
            sum += i
    if sum > n:
        return True
    else:
        return False",0.9099,-4.816705560267702
541,5,"

def solve(n):
    sum = 0
    for i in range(1, n):
        if n % i == 0:
            sum += i
    if sum > n:
        return True
    return False ",0.8298,-9.139273044582
542,1,"

import re

def solve(string):
    return re.sub('[\s,.]', ':', string)",0.7526,-5.969950032384999
542,2,"

import re
def solve(string):
    pattern = r""[ ,\.]"" #regex pattern to match spaces, commas and dots
    replacement = "":"" #replacement string
    new_string = re.sub(pattern, replacement, string) #using re.sub() to replace all occurrences
    return new_string #return the new string with replaced characters",0.6901,-25.594561855378995
542,3,"

import re

def solve(string):
    pattern = r""[ ,.]""
    replacement = "":""
    result = re.sub(pattern, replacement, string)
    return result",0.8314,-6.461021410722
542,4,"

import re

def solve(string):
    return re.sub(""[ ,.]"", "":"", string)",0.8488,-3.2791212437404007
542,5,"

import re

def solve(string):
    return re.sub(""[ ,.]"", "":"", string)",0.8488,-3.2791212437404007
543,1,"

def solve(num1, num2):
    sum = num1 + num2
    print(len(str(sum)))",0.93,-1.7409063005985
543,2,"

def solve(num1, num2):
    sum = num1 + num2
    count = len(str(sum))
    print(count)",0.8406,-5.0369664701785
543,3,"

def solve(num1, num2):
    sum = num1 + num2
    print(len(str(sum)))",0.93,-1.7409063005985
543,4,"

def solve(num1, num2):
    sum = num1 + num2
    digits = len(str(sum))
    print(digits)",0.8969,-3.1547284123215
543,5,"

def solve(num1, num2):
    sum = num1 + num2
    print(len(str(sum)))",0.93,-1.7409063005985
544,1,"

def solve(tuple_list):
    flatten = [item for sublist in tuple_list for item in sublist]
    return ''.join(flatten)",0.7283,-8.8781579418337
544,2,"

def solve(tup):
    result = """"
    for i in tup:
        if type(i) == tuple:
            result += solve(i)
        else:
            result += str(i) + "" ""
    return result

# Example
tup = (1, 2, (3, 4), (5, (6, 7)))
print(solve(tup))
# Output: 1 2 3 4 5 6 7",0.778,-24.098599065222604
544,3,"

def solve(tuple_list):
    flat_list = []
    for tup in tuple_list:
        flat_list.extend(tup)
    return ''.join(flat_list)",0.8368,-5.881420670977499
544,4,"

def solve(tuple_list):
    flatten_tuple = []
    for tup in tuple_list:
        for item in tup:
            flatten_tuple.append(item)
    return ''.join(flatten_tuple)",0.7542,-10.721067157463002
544,5,"

def solve(tuple_list):
    flat_string = """"
    for tuple in tuple_list:
        for element in tuple:
            flat_string += str(element)
    return flat_string",0.8349,-6.3141653208445
545,1,"

def solve(num):
    mask = 1
    # toggle first bit
    num = num ^ mask
    # toggle last bit
    num = num ^ (mask << (len(bin(num))-3))
    return num",0.7981,-10.825818321631004
545,2,"

def solve(n):
    mask = 1 << (n.bit_length() - 1)
    return n ^ mask ^ 1",0.8335,-5.100432393685
545,3,"

def solve(num):
    first_bit = 1 << (num.bit_length() - 1)
    last_bit = 1
    return num ^ (first_bit | last_bit)",0.8446,-6.587892066579
545,4,"

def solve(num):
    mask = 1 << (len(bin(num))-3)
    return num ^ mask",0.8232,-4.47386228353
545,5,"

def solve(num):
    mask = 1 << (len(bin(num))-3)
    return num ^ (1 | mask)",0.837,-4.8056165165300015
546,1,"

def solve(string, char):
  index = -1
  for i in range(len(string)):
    if string[i] == char:
      index = i
  return index",0.8914,-4.254333497500999
546,2,"

def solve(string, char):
    last_index = -1
    for i in range(len(string)):
        if string[i] == char:
            last_index = i
    return last_index",0.9276,-3.0076476719472995
546,3,"

def solve(string, char):
    index = -1
    for i in range(len(string)):
        if string[i] == char:
            index = i
    return index",0.9593,-1.5390550297183
546,4,"

def solve(s, c):
    for i in range(len(s)-1, -1, -1):
        if s[i] == c:
            return i
    return -1",0.8954,-4.310998418356001
546,5,"

def solve(string, char):
    index = -1
    for i in range(len(string)):
        if string[i] == char:
            index = i
    return index",0.9593,-1.5390550297183
547,1,"

def solve(n):
    sum = 0
    for i in range(0, n):
        sum += bin(i).count(""1"")
    return sum",0.8238,-6.588549020686001
547,2,"

def solve(n):
    sum = 0
    for i in range(n+1):
        if i == n:
            break
        else:
            diff = bin(i)[2:].zfill(len(bin(n)[2:])) #convert numbers to binary and pad them with zeros to have equal length
            next_diff = bin(i+1)[2:].zfill(len(bin(n)[2:]))
            for j in range(len(diff)):
                if diff[j] != next_diff[j]:
                    sum += 1
    return sum",0.7637,-29.917013177842403
547,3,"

def solve(n):
    total = 0
    for i in range(n):
        total += bin(i).count('1')
    return total",0.8796,-3.9754769007580006
547,4,"

def solve(n):
    total = 0
    for i in range(n):
        total += bin(i).count('1')
    return total",0.8796,-3.9754769007580006
547,5,"

def solve(n):
    total = 0
    for i in range(n):
        total += bin(i).count('1') ^ bin(i+1).count('1')
    return total",0.8294,-7.667539935512001
548,1,"

def solve(sequence):
    if not sequence:
        return 0
    dp = [1] * len(sequence)
    for i in range(1, len(sequence)):
        for j in range(i):
            if sequence[i] > sequence[j]:
                dp[i] = max(dp[i], dp[j] + 1)
    return max(dp)",0.9285,-5.414725334033
548,2,"

def solve(seq):
    if not seq:
        return 0
    
    n = len(seq)
    dp = [1] * n
    
    for i in range(1, n):
        for j in range(i):
            if seq[j] < seq[i]:
                dp[i] = max(dp[i], dp[j] + 1)
                
    return max(dp)",0.8808,-9.899911169378004
548,3,"

def solve(sequence):
    n = len(sequence)
    dp = [1] * n
    for i in range(1, n):
        for j in range(i):
            if sequence[i] > sequence[j] and dp[i] < dp[j] + 1:
                dp[i] = dp[j] + 1
    return max(dp) if n else 0",0.8629,-11.792583848036
548,4,"

def solve(sequence):
    dp = [1] * len(sequence)
    for i in range(1, len(sequence)):
        for j in range(i):
            if sequence[j] < sequence[i]:
                dp[i] = max(dp[i], dp[j] + 1)
    return max(dp)",0.9203,-5.229380578407999
548,5,"

def solve(sequence):
    length = len(sequence)
    dp = [1] * length
    for i in range(1, length):
        for j in range(i):
            if sequence[i] > sequence[j]:
                dp[i] = max(dp[i], dp[j] + 1)
    return max(dp)",0.9016,-6.937134843138001
549,1,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i-1)**5
    return sum",0.9222,-2.995746373046998
549,2,"

def solve(n):
    total = 0
    for i in range(1, 2*n, 2):
        total += i**5
    return total",0.8901,-4.189591362683001
549,3,"

def solve(n):
    sum = 0
    for i in range(1, n + 1):
        sum += (2*i - 1) ** 5
    return sum",0.8236,-7.955800947626998
549,4,"

def solve(n):
    sum = 0
    for i in range(1, 2*n, 2):
        sum += i**5
    return sum",0.9596,-1.486094607578
549,5,"

def solve(n):
    sum = 0
    for i in range(1, 2*n, 2):
        sum += i**5
    return sum",0.9596,-1.486094607578
550,1,"

def solve(arr):
    start = 0
    end = len(arr) - 1
    while start <= end:
        mid = (start + end) // 2
        if arr[mid] > arr[mid + 1]:
            return arr[mid]
        elif arr[mid] < arr[mid - 1]:
            return arr[mid - 1]
        elif arr[start] > arr[mid]:
            end = mid - 1
        else:
            start = mid + 1",0.9141,-9.255914599906005
550,2,"

def solve(arr):
    start = 0
    end = len(arr) - 1
    while start < end:
        mid = (start + end) // 2
        if arr[mid] > arr[mid+1]:
            return arr[mid]
        elif arr[mid] > arr[end]:
            start = mid + 1
        else:
            end = mid
    return arr[start]",0.9155,-7.502506944052
550,3,"

def solve(arr):
    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2
        # If mid element is the maximum element
        if arr[mid] > arr[mid + 1] and arr[mid] > arr[mid - 1]:
            return arr[mid]
        # If mid element is smaller than its previous element, then the maximum element must be on the left side
        elif arr[mid] < arr[mid - 1]:
            right = mid - 1
        # If mid element is larger than its next element, then the maximum element must be on the right side
        else:
            left = mid + 1",0.8444,-25.873888803244007
550,4,"

def solve(arr):
    start = 0
    end = len(arr) - 1
    while start < end:
        mid = (start + end) // 2
        if arr[mid] > arr[end]:
            start = mid + 1
        else:
            end = mid
    return arr[start]",0.9365,-4.530419017675
550,5,"

def solve(arr):
    if len(arr) == 0:
        return None
    
    start = 0
    end = len(arr) - 1
    
    while start < end:
        mid = (start + end) // 2
        if arr[mid] > arr[end]:
            start = mid + 1
        else:
            end = mid
            
    return arr[start]",0.8784,-10.635902787650004
551,1,"

def solve(nested_list, col_index):
    result = []
    for row in nested_list:
        result.append(row[col_index])
    return result",0.8501,-5.0354646069380005
551,2,"

def solve(nested_list, column_index):
    column = []
    for sublist in nested_list:
        column.append(sublist[column_index])
    return column",0.8996,-3.3844132495480004
551,3,"

def solve(nested_list, column):
    extracted_column = []
    for sublist in nested_list:
        extracted_column.append(sublist[column])
    return extracted_column",0.8819,-4.147633757897998
551,4,"

def solve(nested_list, column_index):
    result = []
    for sublist in nested_list:
        result.append(sublist[column_index])
    return result",0.8682,-4.522912011596998
551,5,"

def solve(nested_list, col):
    return [row[col] for row in nested_list]",0.8506,-3.3976981856329993
552,1,"

def solve(seq):
    if len(seq) < 2:
        return True
    diff = seq[1] - seq[0]
    for i in range(2, len(seq)):
        if seq[i] - seq[i-1] != diff:
            return False
    return True",0.9308,-4.4432460288145
552,2,"

def solve(sequence):
    difference = sequence[1] - sequence[0]
    for i in range(1, len(sequence)):
        if sequence[i] - sequence[i-1] != difference:
            return False
    return True",0.9231,-3.922337536433499
552,3,"

def solve(seq):
    diff = seq[1] - seq[0]
    for i in range(1, len(seq)):
        if seq[i] - seq[i-1] != diff:
            return False
    return True",0.9428,-2.8882686701714997
552,4,"

def solve(sequence):
    diff = sequence[1] - sequence[0]
    for i in range(len(sequence)-1):
        if sequence[i+1] - sequence[i] != diff:
            return False
    return True",0.8993,-5.093801675216597
552,5,"

def solve(seq):
    diff = seq[1] - seq[0]
    for i in range(1, len(seq)):
        if seq[i] - seq[i-1] != diff:
            return False
    return True",0.9428,-2.8882686701714997
553,1,"

def solve(tuple):
    return float(tuple[0])",0.8061,-2.58716573952
553,2,"

def solve(tup):
    return float(tup[0])",0.8365,-2.499864025618
553,3,"

def solve(tuple):
    num = float(''.join(str(i) for i in tuple))
    return num",0.753,-6.524387946753999
553,4,"

def solve(tup):
    return float(tup[0])",0.8365,-2.499864025618
553,5,"

def solve(tup):
    return float(''.join(str(i) for i in tup))",0.8239,-3.875117883454
554,1,"

def solve(lst):
    odd_lst = []
    for num in lst:
        if num % 2 != 0:
            odd_lst.append(num)
    return odd_lst",0.9321,-2.5302375177078016
554,2,"

def solve(lst):
    odd_numbers = []
    for num in lst:
        if num % 2 != 0:
            odd_numbers.append(num)
    return odd_numbers",0.9375,-2.3222131205114995
554,3,"

def solve(lst):
    odd_numbers = []
    for num in lst:
        if num % 2 != 0:
            odd_numbers.append(num)
    return odd_numbers",0.9375,-2.3222131205114995
554,4,"

def solve(lst):
    odd_nums = []
    for num in lst:
        if num % 2 != 0:
            odd_nums.append(num)
    return odd_nums",0.943,-2.1135991998213
554,5,"

def solve(lst):
    odd_lst = []
    for num in lst:
        if num % 2 != 0:
            odd_lst.append(num)
    return odd_lst",0.9321,-2.5302375177078016
555,1,"

def solve(n):
    sum_cubes = 0
    sum_numbers = 0
    for i in range(1, n+1):
        sum_cubes += i**3
        sum_numbers += i
    return sum_cubes - sum_numbers",0.9341,-3.7489368842495994
555,2,"

def solve(n):
    sum_of_cubes = 0
    sum_of_nums = 0
    
    for i in range(1, n+1):
        sum_of_cubes += i**3
        sum_of_nums += i
        
    return sum_of_cubes - sum_of_nums**2",0.8828,-7.8534434552604
555,3,"

def solve(n):
    sum_of_cubes = 0
    sum_of_numbers = 0
    for i in range(1,n+1):
        sum_of_cubes += (i**3)
        sum_of_numbers += i
    return sum_of_cubes - (sum_of_numbers**2)",0.8846,-7.9683472330736995
555,4,"

def solve(n):
    sum_natural = (n*(n+1))/2
    sum_cubes = (n*(n+1)*(2*n+1))/6
    return (sum_cubes - sum_natural)",0.7857,-11.816631700252994
555,5,"

def solve(n):
    sum_of_cubes = 0
    sum_of_numbers = 0
    for i in range(1,n+1):
        sum_of_cubes += i**3
        sum_of_numbers += i
    return sum_of_cubes - sum_of_numbers**2",0.913,-5.643180583427402
556,1,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if (arr[i] ^ arr[j]) % 2 == 1:
                count += 1
    return count",0.9703,-1.7209963770126
556,2,"

def solve(arr):
  count = 0
  for i in range(len(arr)):
    for j in range(i+1, len(arr)):
      if (arr[i] ^ arr[j]) % 2 == 1:
        count += 1
  return count",0.9243,-4.485052178467499
556,3,"

def solve(arr):
    count = 0
    for i in range(len(arr)-1):
        for j in range(i+1, len(arr)):
            if (arr[i] ^ arr[j]) % 2 != 0:
                count += 1
    return count",0.9102,-5.550654425414399
556,4,"

def solve(lst):
    count = 0
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if (lst[i] ^ lst[j]) % 2 != 0:
                count += 1
    return count",0.9181,-4.869435844952398
556,5,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] ^ arr[j] % 2 != 0:
                count += 1
    return count",0.9253,-4.347268769333599
557,1,"

def solve(s):
    result = """"
    for c in s:
        if c.isupper():
            result += c.lower()
        else:
            result += c.upper()
    return result",0.8944,-4.352730847262
557,2,"

def solve(s):
    result = """"
    for char in s:
        if char.islower():
            result += char.upper()
        else:
            result += char.lower()
    return result",0.8931,-4.408569308804999
557,3,"

def solve(string):
    new_string = """"
    for char in string:
        if char.isupper():
            new_string += char.lower()
        else:
            new_string += char.upper()
    return new_string",0.9346,-2.906620323554
557,4,"

def solve(string):
    result = ''
    for char in string:
        if char.isupper():
            result += char.lower()
        else:
            result += char.upper()
    return result",0.8875,-4.653043781034999
557,5,"

def solve(string):
    result = """"
    for char in string:
        if char.isupper():
            result += char.lower()
        else:
            result += char.upper()
    return result",0.9337,-2.6734795962310005
558,1,"

def solve(num1, num2):
    #convert the integers to strings
    num1_str = str(num1)
    num2_str = str(num2)
    
    #initialize a variable to keep track of the digit distance
    digit_distance = 0
    
    #loop through the digits in the first number
    for i in range(len(num1_str)):
        #calculate the absolute difference between the current digit in num1 and num2
        distance = abs(int(num1_str[i]) - int(num2_str[i]))
        
        #add the distance to the total digit distance
        digit_distance += distance
    
    #return the final digit distance
    return digit_distance",0.8342,-25.562858960567304
558,2,"

def solve(x, y):
    diff = 0
    while x > 0 and y > 0:
        digit_x = x % 10
        digit_y = y % 10
        diff += abs(digit_x - digit_y)
        x = x // 10
        y = y // 10
    while x > 0:
        diff += x % 10
        x = x // 10
    while y > 0:
        diff += y % 10
        y = y // 10
    return diff",0.9071,-11.602656203686406
558,3,"

def solve(num1, num2):
    dist = 0
    while num1 > 0 or num2 > 0:
        digit1 = num1 % 10
        digit2 = num2 % 10
        dist += abs(digit1 - digit2)
        num1 //= 10
        num2 //= 10
    return dist",0.9447,-4.3786641807227005
558,4,"

def solve(x, y):
    x_str = str(x)
    y_str = str(y)
    diff = 0
    for i in range(len(x_str)):
        diff += abs(int(x_str[i]) - int(y_str[i]))
    return diff",0.8728,-7.345612258054497
558,5,"

def solve(int1, int2):
    int1 = str(int1)
    int2 = str(int2)
    distance = 0
    for i in range(len(int1)):
        distance += abs(int(int1[i]) - int(int2[i]))
    return distance",0.8788,-7.495932532552696
559,1,"

def solve(arr):
    max_sum = arr[0]
    current_sum = arr[0]
    
    for i in range(1, len(arr)):
        current_sum = max(arr[i], current_sum + arr[i])
        max_sum = max(max_sum, current_sum)
    
    return max_sum",0.9235,-5.0154698335014
559,2,"

def solve(arr):
    max_sum = arr[0]
    current_sum = 0
    for num in arr:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
    return max_sum",0.8842,-6.521406349759998
559,3,"

def solve(arr):
    max_sum = float('-inf')
    curr_sum = 0
    for num in arr:
        curr_sum = max(curr_sum + num, num)
        max_sum = max(max_sum, curr_sum)
    return max_sum",0.9062,-5.222024648933999
559,4,"

def solve(nums):
    max_so_far = nums[0]
    max_ending_here = nums[0]
    
    for i in range(1, len(nums)):
        max_ending_here = max(nums[i], max_ending_here + nums[i])
        max_so_far = max(max_so_far, max_ending_here)
    
    return max_so_far",0.9049,-7.494905530818197
559,5,"

def solve(arr):
    max_sum = arr[0]
    curr_sum = arr[0]
    
    for i in range(1, len(arr)):
        curr_sum = max(curr_sum + arr[i], arr[i])
        max_sum = max(max_sum, curr_sum)
        
    return max_sum",0.9183,-5.369258972576597
560,1,"

def solve(t1, t2):
    union = t1 + t2
    return tuple(set(union))",0.7451,-7.354744449365501
560,2,"

def solve(tup1, tup2):
    union = set(tup1).union(set(tup2))
    return tuple(union)",0.8752,-3.9986135668598
560,3,"

def solve(tuples):
    union = set()
    for tuple in tuples:
        union = union.union(set(tuple))
    return union",0.8043,-6.096473246045001
560,4,"

def solve(tup1, tup2):
    return tuple(set(tup1).union(set(tup2)))",0.8591,-3.643908566799801
560,5,"

def solve(tuples):
    union = []
    for t in tuples:
        for num in t:
            if num not in union:
                union.append(num)
    return union",0.7984,-8.330075510051
561,1,"

def solve(tup):
    result = ()
    for i in range(len(tup)):
        if i % 2 == 0:
            result += (tup[i], tup[i+1]),
        else:
            result += (tup[i-1], tup[i]),
    return result",0.854,-9.630326560785498
561,2,"

def solve(t):
    result = []
    for i in range(len(t)):
        pair = (t[i], t[len(t)-1-i])
        result.append(pair)
    return result",0.7712,-10.130711084577
561,3,"

def solve(tup):
    result = []
    for i in range(len(tup)):
        pair = (tup[i], tup[i+1])
        result.append(pair)
    return result",0.8666,-5.724969153389998
561,4,"

def solve(tup):
    result = ()
    for i in range(len(tup)):
        pair = (tup[i], tup[i+1])
        result += pair
    return result",0.8464,-6.6688618019215
561,5,"

def solve(tuple):
    new_tuple = ()
    for i in range(len(tuple)):
        new_tuple += tuple[i], tuple[i+1]
    return new_tuple",0.762,-9.243248752044
562,1,"

def solve(lst):
    max_len = 0
    for sub_list in lst:
        if len(sub_list) > max_len:
            max_len = len(sub_list)
    return max_len",0.8787,-5.302082110074198
562,2,"

def solve(lst):
    max_len = 0
    curr_len = 0
    for num in lst:
        if num != 0:
            curr_len += 1
        else:
            max_len = max(max_len, curr_len)
            curr_len = 0
    return max_len",0.8916,-7.342140101869698
562,3,"

def solve(lst):
    max_len = 0
    curr_len = 0
    for i in range(len(lst)):
        if lst[i] == 1:
            curr_len += 1
        else:
            if curr_len > max_len:
                max_len = curr_len
            curr_len = 0
    if curr_len > max_len:
        max_len = curr_len
    return max_len",0.9059,-8.598379781107695
562,4,"

def solve(lst):
    max_length = 0
    for sublst in lst:
        if len(sublst) > max_length:
            max_length = len(sublst)
    return max_length",0.9244,-3.223339761183599
562,5,"

def solve(lst):
    max_length = 0
    for sublist in lst:
        if len(sublist) > max_length:
            max_length = len(sublist)
    return max_length",0.9392,-2.5108437219490005
563,1,"

def solve(string):
    result = []
    start = 0
    end = 0
    for i in range(len(string)):
        if string[i] == '""':
            if start == 0:
                start = i+1
            else:
                end = i
                result.append(string[start:end])
                start = 0
    return result ",0.888,-9.024757058778
563,2,"

def solve(string):
    result = []
    start = 0
    end = 0
    for i in range(len(string)):
        if string[i] == '""':
            if start == 0:
                start = i+1
            elif end == 0:
                end = i
                result.append(string[start:end])
                start = 0
                end = 0
    return result",0.9047,-8.511216004845997
563,3,"

def solve(string):
    result = []
    start = string.find('""')
    end = string.find('""', start+1)
    while start != -1 and end != -1:
        result.append(string[start+1:end])
        start = string.find('""', end+1)
        end = string.find('""', start+1)
    return result",0.9332,-5.044894054359998
563,4,"

def solve(string):
    result = []
    start = 0
    end = 0
    for i in range(len(string)):
        if string[i] == '""':
            start = i+1
            for j in range(i+1,len(string)):
                if string[j] == '""':
                    end = j
                    result.append(string[start:end])
                    break
    return result",0.9055,-8.037182999195002
563,5,"

def solve(string):
  result = []
  start = string.find('""')
  end = string.find('""', start + 1)
  while start != -1 and end != -1:
    result.append(string[start + 1:end])
    start = string.find('""', end + 1)
    end = string.find('""', start + 1)
  return result",0.9018,-7.9611686304349
564,1,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] != arr[j]:
                count += 1
    return count",0.9892,-0.5308407260610001
564,2,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] != arr[j]:
                count += 1
    return count",0.9892,-0.5308407260610001
564,3,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] != arr[j]:
                count += 1
    return count",0.9892,-0.5308407260610001
564,4,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] != arr[j]:
                count += 1
    return count",0.9892,-0.5308407260610001
564,5,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] != arr[j]:
                count += 1
    return count",0.9892,-0.5308407260610001
565,1,"

def solve(string):
    return [char for char in string]",0.9285,-1.0389041576661
565,2,"

def solve(string):
    return [char for char in string]",0.9285,-1.0389041576661
565,3,"

def solve(string):
    return [char for char in string]",0.9285,-1.0389041576661
565,4,"

def solve(string):
    return list(string)",0.8567,-1.54689456245
565,5,"

def solve(string):
    return [char for char in string]",0.9285,-1.0389041576661
566,1,"

def solve(num):
    return sum(int(i) for i in str(num))",0.7451,-5.002798096249001
566,2,"

def solve(num):
    sum = 0
    while num > 0:
        sum += num % 10
        num //= 10
    return sum",0.9364,-2.3010930898129995
566,3,"

def solve(num):
    result = 0
    while num > 0:
        result += num % 10
        num = num // 10
    return result",0.8767,-4.8698722644769985
566,4,"

def solve(n):
    sum = 0
    while n > 0:
        sum += n % 10
        n = n // 10
    return sum",0.9206,-3.061768711867
566,5,"

def solve(num):
    sum = 0
    while num > 0:
        sum += num % 10
        num = num // 10
    return sum",0.9281,-2.7597761176270006
567,1,"

def solve(arr):
    if len(arr) <= 1:
        return True
    else:
        for i in range(len(arr)-1):
            if arr[i] > arr[i+1]:
                return False
        return True",0.8336,-8.920443352671999
567,2,"

def solve(lst):
    sorted_lst = sorted(lst)
    if lst == sorted_lst:
        return True
    else:
        return False",0.9132,-2.6318756082520007
567,3,"

def solve(lst):
    return lst == sorted(lst)",0.7784,-3.00544336139
567,4,"

def solve(lst):
  for i in range(len(lst) - 1):
    if lst[i] > lst[i+1]:
      return False
  return True",0.8308,-6.487666536640999
567,5,"

def solve(list):
    sorted_list = sorted(list)
    if sorted_list == list:
        return True
    else:
        return False",0.814,-5.966334600989999
568,1,"

def solve(n):
    return [{} for i in range(n)]",0.9046,-1.504213058076
568,2,"

def solve(n):
    result = [{} for i in range(n)]
    return result",0.7631,-5.136067897158
568,3,"

def solve(n):
    return [{} for i in range(n)]",0.9046,-1.504213058076
568,4,"

def solve(n):
    return [{} for i in range(n)]",0.9046,-1.504213058076
568,5,"

def solve(n):
    return [{} for i in range(n)]",0.9046,-1.504213058076
569,1,"

def solve(lists):
    for sublist in lists:
        sublist.sort()
    return lists",0.9163,-1.6603634947705002
569,2,"

def solve(lists):
    for sublist in lists:
        sublist.sort()
    return lists",0.9163,-1.6603634947705002
569,3,"

def solve(lists):
    for sublist in lists:
        sublist.sort()
    return lists",0.9163,-1.6603634947705002
569,4,"

def solve(lst):
    for sublist in lst:
        sublist.sort()
    return lst",0.8585,-2.745512116154
569,5,"

def solve(lst):
    for sublist in lst:
        sublist.sort()
    return lst",0.8585,-2.745512116154
570,1,"

def solve(str_list, char):
    new_list = []
    for string in str_list:
        if char in string:
            new_string = string.replace(char, """")
            new_list.append(new_string)
        else:
            new_list.append(string)
    return new_list",0.8703,-7.639731887089002
570,2,"

def solve(string_list, char):
    new_list = []
    for string in string_list:
        if char in string:
            new_list.append(string.replace(char, ''))
        else:
            new_list.append(string)
    return new_list",0.8609,-7.340581553331001
570,3,"

def solve(list_of_strings, character):
    result = []
    for string in list_of_strings:
        if character in string:
            result.append(string.replace(character, """"))
        else:
            result.append(string)
    return result",0.845,-7.745022077194001
570,4,"

def solve(strings, character):
    new_list = []
    for string in strings:
        if character in string:
            new_string = string.replace(character, """")
            new_list.append(new_string)
        else:
            new_list.append(string)
    return new_list",0.8668,-7.577054935545999
570,5,"

def solve(lst, char):
    new_lst = []
    for word in lst:
        if char in word:
            continue
        else:
            new_lst.append(word)
    return new_lst",0.8791,-5.153029685993999
571,1,"

def solve(nums, k):
    nums.sort(reverse=True)
    max_sum = 0
    i = 0
    while i < len(nums)-1 and k > 0:
        if nums[i] > 1 and nums[i+1] > 1:
            max_sum += nums[i] + nums[i+1]
            i += 2
            k -= 1
        else:
            max_sum += nums[i]
            i += 1
    return max_sum",0.8473,-17.064317902657994
571,2,"

def solve(arr, k):
    max_sum = 0
    n = len(arr)
    for i in range(n):
        for j in range(i+1, n):
            if (arr[i] + arr[j]) % k != 0:
                max_sum = max(max_sum, arr[i] + arr[j])
    return max_sum",0.8552,-11.420256348729406
571,3," 


def solve(arr, k):
    # sort the array in descending order
    arr.sort(reverse=True)

    # initialize a variable to store the maximum sum
    max_sum = 0

    # loop through the array
    i = 0
    while i < len(arr):
        # if the current element is greater than k, skip it
        if arr[i] > k:
            i += 1
            continue

        # add the current element and the next element to the sum
        max_sum += arr[i] + arr[i+1]

        # update k by subtracting the current element from it
        k -= arr[i]

        # skip the next element as it has already been used
        i += 2

    # return the maximum sum
    return max_sum",0.8302,-31.272100769649516
571,4,"

def solve(arr, k):
    arr.sort(reverse=True)
    pairs = []
    for i in range(len(arr)):
        if len(pairs) == k:
            break
        if arr[i] not in pairs:
            pairs.append(arr[i])
    return sum(pairs)",0.8518,-9.304016623937
571,5,"

def solve(arr, k):
    arr.sort()
    n = len(arr)
    result = 0
    i = 0
    while i < n:
        if arr[i] + arr[i+1] <= k:
            result += arr[i] + arr[i+1]
            i += 2
        else:
            i += 1
    return result",0.862,-11.733071659685004
572,1,"

def solve(lists):
    unique = []
    for lst in lists:
        for num in lst:
            if num not in unique:
                unique.append(num)

    return [unique[:2]]",0.7565,-11.4392913427375
572,2,"

def solve(lists):
    for lst in lists:
        for num in lst:
            if lst.count(num) > 1:
                lst.remove(num)
                lst.remove(num)
    return lists",0.8602,-6.174575224062003
572,3,"

def solve(lists):
    seen = set()
    result = []
    for lst in lists:
        temp = []
        for num in lst:
            if num not in seen:
                temp.append(num)
                seen.add(num)
        result.append(temp)
        seen.clear()
    return result",0.8325,-11.000835481821994
572,4,"

def solve(lists):
    result = []
    for lst in lists:
        temp = []
        for num in lst:
            if num not in temp:
                temp.append(num)
        result.append(temp)
    return result",0.9106,-4.305649385564001
572,5,"

def solve(lists):
    for list in lists:
        for num in list:
            if list.count(num) > 1:
                list.remove(num)
    return lists",0.7931,-8.346310530194
573,1,"

def solve(lst):
    unique_nums = set(lst)
    product = 1
    for num in unique_nums:
        product *= num
    return product",0.9518,-1.6314253701769996
573,2,"

def solve(lst):
    unique_nums = set()
    product = 1
    for num in lst:
        if num not in unique_nums:
            unique_nums.add(num)
            product *= num
    return product",0.8892,-5.282084027527301
573,3,"

def solve(nums):
    unique_nums = set(nums)
    product = 1
    for num in unique_nums:
        product *= num
    return product",0.9227,-2.6566416581927994
573,4,"

def solve(lst):
    unique_nums = set(lst)
    product = 1
    for num in unique_nums:
        product *= num
    return product",0.9518,-1.6314253701769996
573,5,"

def solve(lst):
    unique_nums = []
    for num in lst:
        if num not in unique_nums:
            unique_nums.append(num)
    product = 1
    for num in unique_nums:
        product *= num
    return product",0.9303,-3.682018466699001
574,1,"

def solve(radius, height):
    pi = 3.14159
    surface_area = 2 * pi * radius * (radius + height)
    return surface_area",0.906,-3.5550985221310007
574,2,"

def solve(radius, height):
    return 2 * math.pi * radius**2 + 2 * math.pi * radius * height",0.8175,-5.6407398874
574,3,"

def solve(radius, height):
    pi = 3.14159
    base_area = pi * radius**2
    lateral_area = 2 * pi * radius * height
    surface_area = 2 * base_area + lateral_area
    return surface_area",0.9033,-5.694479561143998
574,4,"

def solve(radius, height):
    surface_area = 2 * (3.14 * radius * radius) + 2 * (3.14 * radius * height)
    return surface_area",0.8593,-6.066568261001498
574,5,"

def solve(radius, height):
    base_area = 3.14 * radius**2
    lateral_area = 2 * 3.14 * radius * height
    total_area = 2 * base_area + lateral_area
    return total_area",0.8613,-7.91080227136
575,1,"

def solve(n, m):
    count = 0
    num = 1
    while count < n:
        if num % m != 0:
            count += 1
        if count == n:
            return num
        num += 1",0.8907,-6.368767669702998
575,2,"

def solve(n, multiple):
    counter = 0
    num = 0
    while counter < n:
        num += 1
        if num % multiple != 0:
            counter += 1
    return num",0.8489,-8.026183985756
575,3,"

def solve(n, num):
    count = 0
    i = 1
    while count < n:
        if i % num != 0:
            count += 1
        i += 1
    return i-1",0.9317,-3.6095026410820017
575,4,"

def solve(n, m):
    count = 0
    num = 1
    while count < n:
        if num % m != 0:
            count += 1
        num += 1
    return num - 1",0.923,-4.164244585011001
575,5,"

def solve(n, k):
    count = 0
    num = 1
    while count < n:
        if num % k != 0:
            count += 1
        num += 1
    return num - 1",0.9152,-4.606982888953999
576,1,"

def solve(arr1, arr2):
    m = len(arr1)
    n = len(arr2)
    i = 0
    j = 0

    while i < m and j < n:
        if arr1[i] == arr2[j]:
            i += 1
            j += 1
        else:
            i += 1

    if j == n:
        return True
    else:
        return False",0.927,-7.045308751231302
576,2,"

def solve(arr1, arr2):
    if len(arr1) > len(arr2):
        return False
    
    for i in range(len(arr2) - len(arr1) + 1):
        if arr1 == arr2[i:i + len(arr1)]:
            return True
    return False",0.8577,-9.822100451260898
576,3,"

def solve(arr1, arr2):
    if len(arr1) > len(arr2):
        return False
    
    for i in range(len(arr2)-len(arr1)+1):
        if arr2[i:i+len(arr1)] == arr1:
            return True
    
    return False",0.9036,-6.080228513886201
576,4,"

def solve(arr1, arr2):
    m = len(arr1)
    n = len(arr2)
    i = 0
    j = 0
    while i < m and j < n:
        if arr1[i] == arr2[j]:
            i += 1
            j += 1
        else:
            i += 1
    if j == n:
        return True
    else:
        return False",0.9525,-4.526331095856301
576,5,"

def solve(arr1, arr2):
    if set(arr1).issubset(set(arr2)):
        return True
    else:
        return False",0.8979,-3.4462694824436992
577,1,"

def solve(n):
    fact = 1
    for i in range(1, n+1):
        fact = fact * i
    return fact % 10",0.8682,-5.087446582723999
577,2,"

def solve(n):
    factorial = 1
    for i in range(1, n+1):
        factorial *= i
    return factorial % 10",0.9344,-2.305481072225
577,3,"

def solve(n):
    factorial = 1
    for i in range(1, n+1):
        factorial *= i
    return factorial % 10",0.9344,-2.305481072225
577,4,"

def solve(n):
    factorial = 1
    while n > 1:
        factorial *= n
        n -= 1
    return factorial % 10",0.8771,-4.589339201785
577,5,"

def solve(num):
    factorial = 1
    for i in range(1, num+1):
        factorial *= i
    return factorial % 10",0.8679,-4.815294909573001
578,1,"

def solve(list1, list2):
    interleaved = []
    for i in range(len(list1)):
        interleaved.append(list1[i])
        interleaved.append(list2[i])
    return interleaved",0.9461,-2.3820966988376
578,2,"

def solve(list1, list2):
    result = []
    for i in range(len(list1)):
        result.append(list1[i])
        result.append(list2[i])
    return result",0.972,-1.1074949490265993
578,3,"

def solve(list1, list2):
    result = []
    for i in range(len(list1)):
        result.append(list1[i])
        result.append(list2[i])
    return result",0.972,-1.1074949490265993
578,4,"

def solve(list1, list2):
    interleaved = []
    for i in range(len(list1)):
        interleaved.append(list1[i])
        interleaved.append(list2[i])
    return interleaved",0.9461,-2.3820966988376
578,5,"

def solve(list1, list2):
    interleaved_list = []
    for i in range(len(list1)):
        interleaved_list.append(list1[i])
        interleaved_list.append(list2[i])
    return interleaved_list",0.9499,-2.4178149514881015
579,1,"

def solve(tup1, tup2): 
    return set(tup1).symmetric_difference(set(tup2))",0.7287,-8.2270997759246
579,2,"

def solve(tuple1, tuple2):
    return list(set(tuple1) ^ set(tuple2))",0.8004,-4.675787207752699
579,3,"

def solve(tuple1, tuple2):
    diff = tuple(set(tuple1) ^ set(tuple2))
    return diff",0.747,-7.2905974827587
579,4,"

def solve(tup1, tup2):
    return tuple(set(tup1).symmetric_difference(tup2))",0.7833,-6.1058961928736
579,5,"

def solve(tup1, tup2):
    diff = []
    for elem in tup1:
        if elem not in tup2:
            diff.append(elem)
    for elem in tup2:
        if elem not in tup1:
            diff.append(elem)
    return diff",0.8937,-6.406270957661602
580,1,"

def solve(nested_tuple):
    even_elements = []
    for tup in nested_tuple:
        if type(tup) == tuple:
            even_elements.extend(solve(tup))
        elif type(tup) == int and tup % 2 == 0:
            even_elements.append(tup)
    return even_elements",0.8736,-8.786869683163697
580,2,"
def solve(tup):
    result = []
    for i in range(len(tup)):
        if type(tup[i]) == tuple:
            result.extend(solve(tup[i]))
        elif type(tup[i]) == list:
            result.extend(solve(tuple(tup[i])))
        else:
            if tup[i] % 2 == 0:
                result.append(tup[i])
    return result",0.8726,-11.307090697565997
580,3,"

def solve(nested_tuple):
    even_elements = []
    for element in nested_tuple:
        if type(element) == tuple:
            even_elements.extend(solve(element))
        elif type(element) == int and element % 2 == 0:
            even_elements.append(element)
    return even_elements",0.911,-5.688460978874298
580,4,"

def solve(tup):
    even_elements = []
    for item in tup:
        if type(item) == tuple:
            for subitem in item:
                if subitem % 2 == 0:
                    even_elements.append(subitem)
        elif item % 2 == 0:
            even_elements.append(item)
    return tuple(even_elements)",0.8304,-13.563354696937804
580,5,"

def solve(mixed_tuple):
    even_list = []
    for element in mixed_tuple:
        if isinstance(element, tuple):
            for sub_element in element:
                if isinstance(sub_element, int) and sub_element % 2 == 0:
                    even_list.append(sub_element)
        elif isinstance(element, int) and element % 2 == 0:
            even_list.append(element)
    return even_list",0.8632,-12.3565023562277
581,1,"

def solve(base_length, slant_height):
    base_area = base_length ** 2
    lateral_area = (base_length * slant_height) / 2
    surface_area = base_area + (4 * lateral_area)
    return surface_area",0.8478,-8.753456765954002
581,2,"

def solve(base_length, height):
    # calculate the slant height
    slant_height = (base_length**2 + height**2)**0.5
    # calculate the lateral surface area
    lateral_area = base_length * slant_height
    # calculate the base area
    base_area = base_length**2
    # calculate the total surface area
    surface_area = lateral_area + base_area
    return surface_area",0.8414,-15.8902300325199
581,3,"

def solve(base_length, height):
    base_area = base_length ** 2
    lateral_area = base_length * height * 2
    surface_area = base_area + lateral_area
    return surface_area",0.8839,-5.430293427353498
581,4,"

def solve(base, height):
    area = base**2 + 2*base*(height/2)
    return area",0.8095,-5.49465899821
581,5,"

def solve(base_length, height):
    base_area = base_length ** 2
    slant_height = (base_length ** 2 + (4 * height ** 2)) ** 0.5
    lateral_area = base_length * slant_height
    surface_area = base_area + lateral_area
    return surface_area",0.8837,-8.533475383985
582,1,"

def solve(dictionary):
    if len(dictionary) == 0:
        return True
    else:
        return False",0.9233,-1.91493179822
582,2,"

def solve(dictionary):
    if len(dictionary) == 0:
        return True
    else:
        return False",0.9233,-1.91493179822
582,3,"

def solve(dictionary):
    if bool(dictionary):
        return False
    else:
        return True",0.8479,-3.29995219087
582,4,"

def solve(dictionary):
    if len(dictionary) == 0:
        return True
    else:
        return False",0.9233,-1.91493179822
582,5,"

def solve(dictionary):
    if len(dictionary) == 0:
        return True
    else:
        return False",0.9233,-1.91493179822
583,1,"

def solve(n):
    if n == 0:
        return 1
    else:
        catalan = [0] * (n+1)
        catalan[0] = 1
        catalan[1] = 1

        for i in range(2, n+1):
            for j in range(i):
                catalan[i] += catalan[j] * catalan[i-j-1]

        return catalan[n]",0.924,-7.583085574911699
583,2,"

def solve(n):
    if n == 0:
        return 1
    else:
        return (solve(n-1) * (4*n - 2)) / (n + 1)",0.8381,-7.595309807909999
583,3,"

def solve(n):
    if n <= 1:
        return 1
    else:
        result = 0
        for i in range(n):
            result += solve(i) * solve(n-1-i)
        return result",0.8799,-6.271337057729001
583,4,"

def solve(n):
    if n == 0 or n == 1:
        return 1
    catalan = [0] * (n+1)
    catalan[0] = 1
    catalan[1] = 1
    for i in range(2, n+1):
        for j in range(i):
            catalan[i] += catalan[j] * catalan[i-j-1]
    return catalan[n]",0.9403,-6.029538649378502
583,5,"

def solve(n):
    if n <= 1:
        return 1
    catalan = [0] * (n+1)
    catalan[0] = 1
    catalan[1] = 1
    for i in range(2, n+1):
        for j in range(i):
            catalan[i] += catalan[j] * catalan[i-j-1]
    return catalan[n]",0.9476,-5.010313495139003
584,1,"

import re

def solve(sentence):
    adverbs = []
    positions = []
    pattern = r'\b\w+ly\b'
    matches = re.finditer(pattern, sentence)
    
    for match in matches:
        adverbs.append(match.group())
        positions.append(match.start())
        
    return adverbs, positions",0.8635,-9.68761109912
584,2,"

import re

def solve(sentence):
    adverbs = re.findall(r'\w+ly', sentence)
    positions = []
    for adverb in adverbs:
        positions.append(sentence.find(adverb))
    return list(zip(adverbs, positions))",0.8784,-6.609675066697401
584,3,"

def solve(sentence):
    adverbs = re.findall(r'\w+ly\b', sentence)
    positions = [m.start() for m in re.finditer(r'\w+ly\b', sentence)]
    return adverbs, positions",0.8733,-6.5053946707320005
584,4,"

import re

def solve(sentence):
    regex = r'\w+ly'
    matches = re.finditer(regex, sentence)
    adverbs = []
    for match in matches:
        adverbs.append((match.group(0), match.start()))
    return adverbs",0.8189,-10.990125526031504
584,5,"

import re

def solve(sentence):
    adverb_positions = []
    pattern = r""\b\w+ly\b""
    for match in re.finditer(pattern, sentence):
        adverb_positions.append((match.group(0), match.start()))
    return adverb_positions",0.8083,-11.917298910101495
585,1,"

def solve(dataset, n):
    heap = []
    for item in dataset:
        heapq.heappush(heap, (-item[1], item[0]))
    result = []
    while n > 0:
        result.append(heapq.heappop(heap)[1])
        n -= 1
    return result",0.8781,-8.451235982399599
585,2,"

from heapq import nlargest
def solve(dataset, n):
    prices = [item['price'] for item in dataset]
    return nlargest(n, prices)",0.712,-11.550679100377
585,3,"

def solve(dataset, n):
    from heapq import nlargest
    prices = [item['price'] for item in dataset]
    n_expensive = nlargest(n, prices)
    result = []
    for item in dataset:
        if item['price'] in n_expensive:
            result.append(item)
    return result",0.8272,-12.710271768884503
585,4,"

import heapq

def solve(dataset, n):
    heap = []
    for item in dataset:
        heapq.heappush(heap, (-item[1], item[0]))
    
    result = []
    for i in range(n):
        result.append(heapq.heappop(heap)[1])
    return result",0.8813,-7.962751780499099
585,5,"

import heapq

def solve(dataset, n):
    heap = []
    for item in dataset:
        heapq.heappush(heap, (-item[1], item[0]))
    
    result = []
    for i in range(n):
        result.append(heapq.heappop(heap)[1])
    
    return result",0.9173,-5.5251516740690985
586,1,"

def solve(arr):
    n = len(arr)
    mid = n // 2
    arr = arr[mid:] + arr[:mid]
    return arr",0.8892,-3.873569580875
586,2,"

def solve(arr):
    mid = len(arr) // 2
    return arr[mid:] + arr[:mid]",0.9008,-2.610910164211001
586,3,"

def solve(arr):
    n = len(arr)
    mid = n // 2
    return arr[mid:] + arr[:mid]",0.8674,-4.124779550177
586,4,"

def solve(arr):
    n = len(arr)
    mid = n // 2
    arr = arr[mid:] + arr[:mid]
    return arr",0.8892,-3.873569580875
586,5,"

def solve(arr):
    first_part = arr[:len(arr)//2]
    second_part = arr[len(arr)//2:]
    return second_part + first_part",0.8559,-5.136778804482001
587,1,"

def solve(list):
    tuple = ()
    for i in list:
        tuple += (i,)
    return tuple",0.79,-5.656359658683001
587,2,"

def solve(lst):
    return tuple(lst)",0.9476,-0.5386531769099999
587,3,"

def solve(lst):
    return tuple(lst)",0.9476,-0.5386531769099999
587,4,"

def solve(lst):
    return tuple(lst)",0.9476,-0.5386531769099999
587,5,"

def solve(lst):
  return tuple(lst)",0.7345,-3.085065855369999
588,1,"

def solve(arr):
    largest = arr[0]
    smallest = arr[0]
    for i in range(1, len(arr)):
        if arr[i] > largest:
            largest = arr[i]
        if arr[i] < smallest:
            smallest = arr[i]
    return largest - smallest",0.9441,-3.6258610037875982
588,2,"

def solve(arr):
    return max(arr) - min(arr)",0.9118,-1.292240891001
588,3,"

def solve(arr):
    max_val = arr[0]
    min_val = arr[0]
    for i in range(len(arr)):
        if arr[i] > max_val:
            max_val = arr[i]
        if arr[i] < min_val:
            min_val = arr[i]
    return max_val - min_val",0.9229,-5.4578629404949
588,4,"

def solve(arr):
    max_val = max(arr)
    min_val = min(arr)
    return max_val - min_val",0.8587,-3.9597186597293
588,5,"

def solve(arr):
    min_val = arr[0]
    max_val = arr[0]
    for i in range(1, len(arr)):
        if arr[i] < min_val:
            min_val = arr[i]
        if arr[i] > max_val:
            max_val = arr[i]
    return max_val - min_val",0.9239,-5.6209243526472985
589,1,"

def solve(start, end):
    squares = []
    for num in range(start, end+1):
        if int(num**0.5) == num**0.5:
            squares.append(num)
    return squares",0.8485,-7.556280821862301
589,2,"

def solve(start, end):
    squares = []
    for num in range(start, end+1):
        if num**0.5 == int(num**0.5):
            squares.append(num)
    return squares",0.8706,-6.238178466756602
589,3,"

def solve(num1, num2):
    perfect_squares = []
    for i in range(num1, num2+1):
        if i**(1/2) == int(i**(1/2)):
            perfect_squares.append(i)
    return perfect_squares",0.9125,-5.129964578241399
589,4,"

def solve(num1, num2):
    squares = []
    for i in range(num1, num2+1):
        if i >= 0 and (i**0.5).is_integer():
            squares.append(i)
    return squares",0.8549,-7.995989583412001
589,5,"

def solve(a, b):
    perfect_squares = []
    for i in range(a, b+1):
        if i**0.5 == int(i**0.5):
            perfect_squares.append(i)
    return perfect_squares ",0.8343,-9.4207462924458
590,1,"

def solve(r, theta):
    x = r * math.cos(math.radians(theta))
    y = r * math.sin(math.radians(theta))
    return (x, y)",0.8781,-4.679283452399499
590,2,"

def solve(r, theta):
    x = r * math.cos(theta)
    y = r * math.sin(theta)
    return (x, y)",0.9559,-1.4431033989529998
590,3,"

def solve(r, theta):
    x = r * cos(theta)
    y = r * sin(theta)
    return (x, y)",0.9178,-2.5743501982389994
590,4,"

def solve(r, theta):
    x = r * math.cos(theta)
    y = r * math.sin(theta)
    return x, y",0.9535,-1.4286330533529998
590,5,"

def solve(r, theta):
    x = r * math.cos(theta)
    y = r * math.sin(theta)
    return (x, y)",0.9559,-1.4431033989529998
591,1,"

def solve(input_list):
    first = input_list[0]
    last = input_list[-1]
    input_list[0] = last
    input_list[-1] = first
    return input_list",0.8915,-5.051552646757097
591,2,"

def solve(lst):
  if len(lst) < 2:
    return lst
  lst[0], lst[-1] = lst[-1], lst[0]
  return lst",0.8244,-7.5332081209303
591,3,"

def solve(lst):
    lst[0], lst[-1] = lst[-1], lst[0]
    return lst",0.9675,-0.8598429047626
591,4,"

def solve(lst):
    lst[0], lst[-1] = lst[-1], lst[0]
    return lst",0.9675,-0.8598429047626
591,5,"

def solve(lst):
    lst[0], lst[-1] = lst[-1], lst[0]
    return lst",0.9675,-0.8598429047626
592,1,"

def solve(n):
    total = 0
    for i in range(n+1):
        total += (i+1) * (n-i+1)
    return total",0.8173,-7.667436243308001
592,2,"

def solve(n, k):
    result = 0
    for i in range(n+1):
        result += (factorial(n) / (factorial(i) * factorial(n-i))) * (factorial(k) / (factorial(n-k) * factorial(n-i)))
    return result",0.7742,-15.868115578522996
592,3,"

def solve(n):
    sum = 0
    for i in range(n+1):
        sum += (i+1) * (i+1) * (i+2) * (i+2)
    return sum",0.7516,-13.988858768333998
592,4,"

def solve(n, k):
    ans = 1
    for i in range(k + 1, n + 1):
        ans *= i
    for i in range(1, n - k + 1):
        ans //= i
    return ans",0.8204,-11.085245258444
592,5,"

def solve(n):
    sum = 0
    for i in range(n+1):
        for j in range(i+1):
            sum += (math.factorial(i) / (math.factorial(j) * math.factorial(i-j))) * (math.factorial(n-i) / (math.factorial(n-j) * math.factorial(i-j)))
    return sum",0.8892,-9.1556941676737
593,1,"

def solve(ip_address):
    parts = ip_address.split(""."")
    new_parts = []
    for part in parts:
        if part != ""0"":
            new_parts.append(str(int(part)))
    return ""."".join(new_parts)",0.8559,-7.470939853757299
593,2,"

def solve(ip):
    ip_parts = ip.split('.')
    for i in range(len(ip_parts)):
        ip_parts[i] = str(int(ip_parts[i]))
    return '.'.join(ip_parts)",0.8032,-8.986949887131
593,3,"

def solve(ip_address):
    parts = ip_address.split('.')
    new_address = []
    for part in parts:
        if part == '0':
            new_address.append('0')
        else:
            new_address.append(str(int(part)))
    return ""."".join(new_address)",0.7832,-13.929466861021
593,4,"

def solve(ip):
    return '.'.join(str(int(x)) for x in ip.split('.'))",0.7862,-5.052054376035
593,5,"

def solve(ip):
    parts = ip.split('.')
    new_ip = []
    for part in parts:
        if part != '0':
            new_ip.append(str(int(part)))
    return '.'.join(new_ip)",0.8368,-8.015476255056
594,1,"

def solve(lst):
  even = None
  odd = None
  for num in lst:
    if num % 2 == 0:
      even = num
      break
  for num in lst:
    if num % 2 == 1:
      odd = num
      break
  return even - odd",0.9056,-6.7438345194719975
594,2,"

def solve(lst):
    even = None
    odd = None
    for num in lst:
        if num % 2 == 0 and even == None:
            even = num
        elif num % 2 != 0 and odd == None:
            odd = num
        if even != None and odd != None:
            break
    return even - odd",0.9303,-5.561637558709097
594,3,"

def solve(lst):
    even = None
    odd = None
    for num in lst:
        if num % 2 == 0:
            even = num
            break
    for num in lst:
        if num % 2 == 1:
            odd = num
            break
    return even - odd",0.9477,-3.6511790501481007
594,4,"

def solve(lst):
    even = 0
    odd = 0
    
    for num in lst:
        if num % 2 == 0:
            even = num
            break
    
    for num in lst:
        if num % 2 != 0:
            odd = num
            break
    
    return even - odd",0.9271,-5.302052908140602
594,5,"

def solve(lst):
    even = None
    odd = None

    for num in lst:
        if num % 2 == 0 and even is None:
            even = num
        elif num % 2 != 0 and odd is None:
            odd = num
        if even is not None and odd is not None:
            break

    return even - odd",0.8854,-9.612267998779297
595,1,"

def solve(s1, s2):
    count = 0
    for i in range(len(s1)):
        if s1[i] != s2[i]:
            count += 1
    return count//2",0.9464,-2.5360857302616995
595,2,"

def solve(str1, str2):
    count = 0
    for i in range(len(str1)):
        if str1[i] != str2[i]:
            count += 1
    return count",0.9527,-2.1323396833124
595,3,"

def solve(s1, s2):
    count = 0
    for i in range(len(s1)):
        if s1[i] != s2[i]:
            count += 1
    return count // 2",0.9289,-3.4688780926687
595,4,"

def solve(str1, str2):
    count = 0
    for i in range(len(str1)):
        if str1[i] != str2[i]:
            count += 1

    return count//2",0.8433,-7.840979389922399
595,5,"

def solve(str1, str2):
    count = 0
    for i in range(len(str1)):
        if str1[i] != str2[i]:
            count += 1
    return count",0.9527,-2.1323396833124
596,1,"

def solve(tup):
    return len(tup)",0.9028,-1.2268902686599998
596,2,"

def solve(tuple):
    return len(tuple)",0.8778,-1.3031548572199998
596,3,"

def solve(tuple):
    return len(tuple)",0.8778,-1.3031548572199998
596,4,"

def solve(tup):
    return len(tup)",0.9028,-1.2268902686599998
596,5,"

def solve(tup):
    return len(tup)",0.9028,-1.2268902686599998
597,1,"

def solve(arr1, arr2, k):
    i = 0
    j = 0
    count = 0
    while i < len(arr1) and j < len(arr2):
        if arr1[i] < arr2[j]:
            count += 1
            if count == k:
                return arr1[i]
            i += 1
        else:
            count += 1
            if count == k:
                return arr2[j]
            j += 1
    while i < len(arr1):
        count += 1
        if count == k:
            return arr1[i]
        i += 1
    while j < len(arr2):
        count += 1
        if count == k:
            return arr2[j]
        j += 1",0.9789,-3.6034135536923
597,2,"
def solve(arr1, arr2, k):
    merged_arr = sorted(arr1 + arr2)
    return merged_arr[k-1]",0.8083,-6.3848151895553
597,3,"

def solve(arr1, arr2, k):
    merged_arr = arr1 + arr2
    merged_arr.sort()
    return merged_arr[k-1]",0.9042,-3.42317386599
597,4,"

def solve(arr1, arr2, k):
    i = 0
    j = 0
    result = []
    while i < len(arr1) and j < len(arr2):
        if arr1[i] < arr2[j]:
            result.append(arr1[i])
            i += 1
        else:
            result.append(arr2[j])
            j += 1
    if i < len(arr1):
        result.extend(arr1[i:])
    if j < len(arr2):
        result.extend(arr2[j:])
    return result[k-1]",0.9432,-6.955562649790899
597,5,"

def solve(arr1, arr2, k):
    if len(arr1) == 0:
        return arr2[k-1]
    elif len(arr2) == 0:
        return arr1[k-1]
    
    i = 0
    j = 0
    count = 0
    
    while i < len(arr1) and j < len(arr2):
        if arr1[i] < arr2[j]:
            count += 1
            if count == k:
                return arr1[i]
            i += 1
        else:
            count += 1
            if count == k:
                return arr2[j]
            j += 1
    
    while i < len(arr1):
        count += 1
        if count == k:
            return arr1[i]
        i += 1
    
    while j < len(arr2):
        count += 1
        if count == k:
            return arr2[j]
        j += 1",0.9481,-10.968336890963515
598,1,"

def solve(num):
    sum = 0
    temp = num
    while temp > 0:
        digit = temp % 10
        sum += digit ** 3
        temp //= 10
    if num == sum:
        print(num, ""is an Armstrong number"")
    else:
        print(num, ""is not an Armstrong number"")",0.9149,-6.666941948328999
598,2,"

def solve(num):
    sum = 0
    temp = num
    while temp > 0:
        digit = temp % 10
        sum += digit ** 3
        temp //= 10
    if num == sum:
        return True
    else:
        return False",0.9659,-2.117365719689
598,3,"

def solve(n):
    sum = 0
    temp = n
    while temp > 0:
        digit = temp % 10
        sum += digit ** 3
        temp //= 10
        
    if n == sum:
        return True
    else:
        return False",0.9068,-5.966708421062001
598,4,"

def solve(n):
    num = str(n)
    sum = 0
    for digit in num:
        sum += int(digit)**len(num)
    if sum == n:
        return True
    else:
        return False",0.8786,-6.340050537778
598,5,"

def solve(n):
    sum = 0
    temp = n
    while temp > 0:
        digit = temp % 10
        sum += digit ** 3
        temp //= 10
    if n == sum:
        return True
    else:
        return False",0.9469,-3.3264203860549997
599,1,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i
    avg = sum / n
    return sum, avg",0.9509,-2.014676029249
599,2,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i
    avg = sum / n
    return sum, avg",0.9509,-2.014676029249
599,3,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i
    average = sum / n
    return sum, average",0.9338,-2.7392948154089996
599,4,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i
    avg = sum / n
    return sum, avg",0.9509,-2.014676029249
599,5,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i
    avg = sum / n
    return sum, avg",0.9509,-2.014676029249
600,1,"

def solve(n):
    if n & 1 == 0:
        return True
    else:
        return False",0.8914,-2.8753302011670003
600,2,"

def solve(num):
    return num & 1 == 0",0.8616,-2.08493055002
600,3,"

def solve(num):
    return (num & 1) == 0",0.8366,-2.8554633220579997
600,4,"

def solve(num):
    if num & 1 == 0:
        return ""Even""
    else:
        return ""Odd""",0.9143,-2.508522221133001
600,5,"

def solve(n):
    if n & 1 == 0:
        return True
    return False",0.7869,-5.272145796353
601,1,"

def solve(pairs):
    pairs.sort(key=lambda x: x[0])
    dp = [1] * len(pairs)
    for i in range(1, len(pairs)):
        for j in range(i):
            if pairs[j][1] < pairs[i][0]:
                dp[i] = max(dp[i], dp[j] + 1)
    return max(dp)",0.9383,-5.156226356084999
601,2,"

def solve(pairs):
    chain = []
    for pair in pairs:
        if not chain:
            chain.append(pair)
        else:
            for i in range(len(chain)):
                if pair[0] > chain[i][-1]:
                    if i == len(chain) - 1:
                        chain.append(chain[i] + pair)
                        break
                    else:
                        continue
                else:
                    chain[i] += pair
                    break
    return chain[-1]",0.8101,-20.430991576390017
601,3,"

def solve(pairs):
    graph = {}
    for pair in pairs:
        if pair[0] not in graph:
            graph[pair[0]] = []
        graph[pair[0]].append(pair[1])
    
    def dfs(node, path):
        if node not in graph:
            return path
        else:
            max_path = path
            for neighbor in graph[node]:
                max_path = max(max_path, dfs(neighbor, path+1))
            return max_path
    
    max_path = 0
    for pair in pairs:
        max_path = max(max_path, dfs(pair[0], 1))
    
    return max_path",0.8594,-20.7529283375214
601,4,"

def solve(pairs):
    pairs.sort(key = lambda x: x[0])
    longest_chain = []
    for i in range(len(pairs)):
        chain = [pairs[i]]
        current_end = pairs[i][1]
        for j in range(i+1, len(pairs)):
            if pairs[j][0] > current_end:
                chain.append(pairs[j])
                current_end = pairs[j][1]
        if len(chain) > len(longest_chain):
            longest_chain = chain
    return longest_chain",0.8781,-14.170763391957014
601,5,"

def solve(pairs):
    chain = []
    for i in range(len(pairs)):
        curr = pairs[i]
        temp_chain = [curr]
        prev = curr
        for j in range(len(pairs)):
            if j != i:
                next = pairs[j]
                if prev[1] == next[0]:
                    temp_chain.append(next)
                    prev = next
        if len(temp_chain) > len(chain):
            chain = temp_chain
    return chain",0.8003,-22.057137609626995
602,1,"

def solve(string):
    # create a dictionary to store the count of each character
    counts = {}
    
    # loop through the string
    for char in string:
        # if the character is already in the dictionary, return it
        if char in counts:
            return char
        # otherwise, add the character to the dictionary with a count of 1
        else:
            counts[char] = 1
    
    # if no repeated character is found, return None
    return None",0.8518,-16.518774117609794
602,2,"

def solve(input_string):
    char_dict = {}
    for char in input_string:
        if char in char_dict:
            return char
        else:
            char_dict[char] = 1
    return None",0.8649,-6.386668434778501
602,3,"

def solve(s):
    char_dict = {}
    for char in s:
        if char in char_dict:
            return char
        else:
            char_dict[char] = 1
    return ""No repeated character found.""",0.8276,-8.8960907223702
602,4,"

def solve(string):
    for i in range(len(string)):
        if string[i] in string[i+1:]:
            return string[i]
    return None",0.8623,-4.739277110017001
602,5,"

def solve(string):
    count = {}
    for char in string:
        if char in count:
            return char
        else:
            count[char] = 1
    return None",0.9143,-3.4963199777049994
603,1,"

def solve(n):
    while n > 0:
        if str(n).count('4') + str(n).count('7') == len(str(n)):
            return n
        else:
            n -= 1",0.7982,-10.369928765892004
603,2,"

def solve(n):
    lucid = 1
    while lucid <= n:
        if lucid * 10 > n:
            return lucid
        else:
            lucid *= 10",0.7861,-10.347313733865
603,3,"

def solve(n):
    lucid_num = 1
    while lucid_num <= n:
        lucid_num *= 2
    return lucid_num // 2",0.8639,-5.414460433104
603,4,"

def solve(n):
    num = 1
    while num <= n:
        if num * 2 > n:
            return num
        num *= 2",0.7788,-8.748840876717
603,5,"

def solve(n):
    lucid_num = 0
    while lucid_num <= n:
        lucid_num += 1
        if lucid_num % 3 == 0 or lucid_num % 4 == 0:
            continue
        else:
            return lucid_num - 1",0.837,-11.568956160595004
604,1,"

def solve(string):
  words = string.split()
  reversed_words = [word[::-1] for word in words]
  return "" "".join(reversed_words)",0.8405,-5.9097064253420015
604,2,"

def solve(s):
    words = s.split()
    reversed_words = words[::-1]
    return "" "".join(reversed_words)",0.8516,-4.4978947769395
604,3,"

def solve(string):
    words = string.split()
    words.reverse()
    return "" "".join(words)",0.829,-4.125240363404001
604,4,"

def solve(string):
    words = string.split()
    words.reverse()
    return "" "".join(words)

# Example:
# Input: ""hello world""
# Output: ""world hello""",0.7718,-10.102519642743
604,5,"

def solve(string):
    words = string.split(' ')
    reversed_words = [word[::-1] for word in words]
    return ' '.join(reversed_words)",0.829,-6.562507636463
605,1,"

def solve(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True",0.9299,-3.5606848984553
605,2,"

def solve(n):
    if n == 1:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True",0.9084,-4.707837756494201
605,3,"

def solve(n):
    if n == 2:
        return True
    if n < 2 or n % 2 == 0:
        return False
    for i in range(3, int(n**0.5)+1, 2):
        if n % i == 0:
            return False
    return True",0.9278,-5.317069546256703
605,4,"

def solve(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True",0.9299,-3.5606848984553
605,5,"

def solve(num):
    if num > 1:
        for i in range(2,num):
            if (num % i) == 0:
                return False
        else:
            return True
    else:
        return False",0.8853,-5.971241469323998
606,1,"

def solve(deg):
    return deg * (3.141592653589793 / 180)",0.7747,-5.361284270825999
606,2,"

def solve(degrees):
    radians = degrees * (3.14159/180)
    return radians",0.848,-3.626754936121999
606,3,"

def solve(degrees):
    return (degrees * (3.141592653589793 / 180))",0.7327,-7.154113509538
606,4,"

def solve(degrees):
    radians = degrees * (math.pi / 180)
    return radians",0.8125,-4.360528874142
606,5,"

def solve(degrees):
    return degrees * (3.14159/180)",0.8001,-4.014920678344
607,1,"

import re 

def solve(literal_string, string):
    pattern = re.compile(literal_string)
    match = pattern.search(string)
    return match.start()",0.7284,-10.455869520129
607,2,"

import re

def solve(pattern, string):
    match = re.search(pattern, string)
    if match:
        return match.start()
    else:
        return -1",0.9183,-2.9845115793850003
607,3,"

import re

def solve(literal_string, string):
    pattern = re.compile(literal_string)
    match = pattern.search(string)
    if match:
        return match.start()
    else:
        return -1",0.9126,-4.024766803473
607,4,"

import re

def solve(lit_string, string):
    match = re.search(lit_string, string)
    if match:
        return match.start()
    else:
        return -1",0.8443,-6.602529501728999
607,5,"
def solve(pattern, string):
    import re
    match = re.search(pattern, string)
    if match:
        return match.start()
    else:
        return -1",0.8397,-6.291288480641998
608,1,"

def solve(n):
    bell = [1, 1]
    for i in range(2, n+1):
        bell.append(0)
        for j in range(i):
            bell[i] += bell[j] * bell[i-j-1]
    return bell[n]",0.9276,-4.436284724179001
608,2,"

def solve(n):
    bell = [[0 for i in range(n+1)] for j in range(n+1)]
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1):
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
    return bell[n][0]",0.9711,-3.1681577062435013
608,3,"

def solve(n):
    bell = [[0 for i in range(n+1)] for j in range(n+1)]
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1):
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
    return bell[n][0]",0.9711,-3.1681577062435013
608,4,"

def solve(n):
    bell_num = [[1]]
    for i in range(1,n):
        row = [bell_num[i-1][-1]]
        for j in range(i):
            row.append(row[-1] + bell_num[i-1][j])
        bell_num.append(row)
    return bell_num[n-1][-1]",0.8444,-12.17921867026
608,5,"

def solve(n):
    bell = [[0 for i in range(n+1)] for j in range(n+1)]
    bell[0][0] = 1
    for i in range(1,n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1,i+1):
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]
    return bell[n][0]",0.9596,-4.3743936170965
609,1,"

def solve(period):
    return -period/2",0.6701,-4.40374237457
609,2,"

def solve(A, B, C):
    if A == 0:
        return 0
    elif B == 0:
        return C
    else:
        return min(abs(A), abs(B)) + C",0.6952,-16.72037311391
609,3,"

def solve(periodic_func):
    min_value = periodic_func(0)
    for i in range(1, 1001):
        value = periodic_func(i)
        if value < min_value:
            min_value = value
    return min_value",0.8081,-11.081104370368994
609,4,"

def solve(function, lower_bound, upper_bound, step):
    min_value = function(lower_bound)
    current_value = function(lower_bound)
    while lower_bound < upper_bound:
        current_value = function(lower_bound)
        if current_value < min_value:
            min_value = current_value
        lower_bound += step
    return min_value",0.8067,-15.032832696625004
609,5,"

def solve(period, coefficients):
    min_val = coefficients[0]
    for i in range(1, period):
        val = coefficients[i]
        for j in range(i, len(coefficients), period):
            val += coefficients[j]
        if val < min_val:
            min_val = val
    return min_val",0.847,-11.128407155678008
610,1,"

def solve(lst, k):
    del lst[k-1]
    return lst",0.9509,-0.8561917824960001
610,2,"

def solve(lst, k):
    del lst[k-1]
    return lst",0.9509,-0.8561917824960001
610,3,"

def solve(lst, k):
    lst.pop(k-1)
    return lst",0.9022,-1.7493308125939997
610,4,"

def solve(lst, k):
    lst.pop(k-1)
    return lst",0.9022,-1.7493308125939997
610,5,"
def solve(lst, k):
    del lst[k-1]
    return lst",0.7958,-3.883330441596
611,1,"

def solve(lst, n):
    max_val = lst[0][n-1]
    for tup in lst:
        if tup[n-1] > max_val:
            max_val = tup[n-1]
    return max_val",0.881,-6.206063622379001
611,2,"

def solve(tuples, n):
    max_value = tuples[0][n]
    for i in range(1, len(tuples)):
        if tuples[i][n] > max_value:
            max_value = tuples[i][n]
    return max_value",0.882,-6.779851231876001
611,3,"

def solve(tuple_list, n):
    max_value = float('-inf')
    for row in tuple_list:
        if row[n] > max_value:
            max_value = row[n]
    return max_value",0.8388,-7.556909001350001
611,4,"

def solve(n, tuple_list):
    max_val = tuple_list[0][n]
    for tup in tuple_list:
        if tup[n] > max_val:
            max_val = tup[n]
    return max_val",0.8793,-5.916545894762998
611,5,"

def solve(tuple_list, n):
    max_val = float('-inf')
    for t in tuple_list:
        if t[n] > max_val:
            max_val = t[n]
    return max_val",0.8641,-6.279571600158999
612,1,"

def solve(lst):
    first_list = [sub_lst[0] for sub_lst in lst]
    last_list = [sub_lst[-1] for sub_lst in lst]
    return [first_list, last_list]",0.7928,-10.679849173721506
612,2,"

def solve(lst):
    result = []
    for i in range(len(lst)):
        temp = [lst[i][0], lst[i][-1]]
        result.append(temp)
    return result",0.8187,-7.800507912663002
612,3,"

def solve(lst):
    merged_first = []
    merged_last = []
    
    for i in range(len(lst)):
        merged_first.append(lst[i][0])
        merged_last.append(lst[i][-1])
    
    return [merged_first, merged_last]",0.86,-7.840696878657998
612,4,"

def solve(list_of_lists):
    merged = []
    for lst in list_of_lists:
        if len(lst) > 1:
            merged.append([lst[0], lst[-1]])
        else:
            merged.append(lst)
    return merged",0.8051,-11.055840461652002
612,5,"

def solve(lst):
    result = []
    for i in range(len(lst)):
        first = lst[i][0]
        last = lst[i][-1]
        result.append([first] + [last])
    return result",0.8413,-7.948482670810999
613,1,"

def solve(record_list):
    max_value = None
    for record in record_list:
        if max_value == None or record[1] > max_value:
            max_value = record[1]
    return max_value",0.8683,-6.493467317651
613,2,"

def solve(tuple_list):
    max_value = 0
    for record in tuple_list:
        if record[1] > max_value:
            max_value = record[1]
    return max_value",0.9041,-4.236253493865999
613,3,"

def solve(record_list):
    max_val = float('-inf')
    for record in record_list:
        if record[1] > max_val:
            max_val = record[1]
    return max_val",0.917,-3.726660581001
613,4,"

def solve(record_list):
    max_value = float('-inf')
    for record in record_list:
        if record[1] > max_value:
            max_value = record[1]
    return max_value",0.9312,-3.064528587184
613,5,"

def solve(tuple_list):
    max_val = float('-inf')
    for tup in tuple_list:
        if tup[1] > max_val:
            max_val = tup[1]
    return max_val",0.875,-5.744141675648998
614,1,"

def solve(tuple_list):
    cum_sum = 0
    for tup in tuple_list:
        for val in tup:
            cum_sum += val
    return cum_sum",0.9179,-3.0844525448356994
614,2,"

def solve(tuple_list):
    cumulative_sum = 0
    for tuple in tuple_list:
        for value in tuple:
            cumulative_sum += value
    return cumulative_sum",0.9041,-3.6284527608795
614,3,"

def solve(tuple_list):
    cum_sum = 0
    for tup in tuple_list:
        cum_sum += sum(tup)
    return cum_sum",0.9138,-2.8829984682839993
614,4,"

def solve(tuple_list):
    cumulative_sum = 0
    for tup in tuple_list:
        cumulative_sum += sum(tup)
    return cumulative_sum",0.8702,-4.448509656590498
614,5,"

def solve(tuples):
    cum_sum = 0
    for tup in tuples:
        for val in tup:
            cum_sum += val
    return cum_sum",0.8598,-5.285306782577302
615,1,"

def solve(tup):
    sum = 0
    count = 0
    for x in tup:
        for y in x:
            sum += y
            count += 1
    return sum/count",0.8466,-7.491741818369
615,2,"

def solve(tup):
    total = 0
    count = 0
    for sub_tup in tup:
        for num in sub_tup:
            total += num
            count += 1
    return total/count",0.9087,-4.688942443691
615,3,"

def solve(tup):
    total = 0
    count = 0
    for t in tup:
        for num in t:
            total += num
            count += 1
    return total / count",0.8992,-4.889300167996001
615,4,"

def solve(tup):
    total = 0
    count = 0
    for sub_tup in tup:
        for num in sub_tup:
            total += num
            count += 1
    return total / count",0.9091,-4.764294568951001
615,5,"

def solve(tuples):
    sum = 0
    count = 0
    for t in tuples:
        for num in t:
            sum += num
            count += 1
    return sum / count",0.8675,-6.536499769764002
616,1,"

def solve(tup1, tup2):
    result = ()
    for i in range(len(tup1)):
        result += (tup1[i] % tup2[i],)
    return result",0.9467,-2.3015089468266003
616,2,"

def solve(tup1, tup2):
    result = []

    for i in range(len(tup1)):
        result.append(tup1[i] % tup2[i])

    return tuple(result)",0.8668,-6.003406208299599
616,3,"

def solve(tup1, tup2):
    result = ()
    for i in range(len(tup1)):
        result += (tup1[i] % tup2[i],)
    return result",0.9467,-2.3015089468266003
616,4,"

def solve(tup1, tup2):
    result = []
    for i in range(len(tup1)):
        result.append(tup1[i]%tup2[i])
    return tuple(result)",0.871,-5.8031273426831005
616,5,"

def solve(tup1, tup2):
    result = ()
    for i in range(len(tup1)):
        result += (tup1[i] % tup2[i],)
    return result",0.9467,-2.3015089468266003
617,1,"

def solve(d):
    if d == 0:
        return 0
    elif d == 1:
        return 1
    elif d == 2:
        return 2
    else:
        count = 2
        x = 3
        while x <= d:
            count += 1
            x += 2
        return count",0.822,-15.091439290503995
617,2,"

def solve(d):
    jumps = 0
    while d > 0:
        if d <= 2:
            jumps += 1
            break
        elif d % 2 == 0:
            d = d // 2
            jumps += 1
        else:
            d = (d + 1) // 2
            jumps += 2
    return jumps",0.84,-14.475755328138002
617,3,"

def solve(d):
    if d == 0:
        return 0
    elif d % 2 == 0:
        return d // 2
    else:
        return d // 2 + 1",0.8842,-5.659984467709998
617,4,"

def solve(d):
    if d == 0:
        return 0
    elif d % 2 == 0:
        return (d // 2) * 2
    else:
        return (d // 2) * 2 + 1",0.8012,-12.41283020183
617,5,"

def solve(d):
    jumps = 0
    x = 0
    y = 0
    while x < d:
        jumps += 1
        x += jumps
    return jumps",0.8646,-6.257557591609
618,1,"

def solve(list1, list2):
    return list(map(lambda x, y: x/y, list1, list2))",0.9534,-1.2898301872665
618,2,"

def solve(list1, list2):
    return list(map(lambda x,y: x/y, list1, list2))",0.9318,-1.8378246468055
618,3,"

def solve(list1, list2):
    return list(map(lambda x, y: x / y, list1, list2))",0.921,-2.3057334619125003
618,4,"

def solve(list1, list2):
    return list(map(lambda x, y: x/y, list1, list2))",0.9534,-1.2898301872665
618,5,"

def solve(list1, list2):
    return list(map(lambda x, y: x/y, list1, list2))",0.9534,-1.2898301872665
619,1,"

def solve(string):
    numbers = []
    for char in string:
        if char.isdigit():
            numbers.append(char)
    for num in numbers:
        string = string.replace(num, '')
    string += ''.join(numbers)
    return string",0.8822,-6.139018860044999
619,2,"

def solve(string):
    numbers = """"
    for char in string:
        if char.isdigit():
            numbers += char
    for num in numbers:
        string = string.replace(num, """")
    return numbers + string",0.825,-8.465640379929999
619,3,"

def solve(numbers, string):
    new_string = """"
    for num in numbers:
        new_string += str(num)
    return string + new_string",0.8257,-5.938655927496
619,4,"

def solve(numbers, string):
    nums = [int(num) for num in numbers.split() if num.isdigit()]
    chars = [char for char in string if char.isalpha()]
    return """".join(chars) + "" "" + "" "".join(str(num) for num in nums)",0.714,-19.878910325258005
619,5,"

def solve(numbers, string):
    new_string = """"
    for num in numbers:
        new_string += str(num)
    return string + new_string",0.8257,-5.938655927496
620,1,"

def solve(arr):
    max_subset = []
    for i in range(len(arr)):
        subset = [arr[i]]
        for j in range(i+1, len(arr)):
            if arr[j] % subset[-1] == 0:
                subset.append(arr[j])
        if len(subset) > len(max_subset):
            max_subset = subset
    return max_subset",0.8957,-8.592264019877698
620,2,"

def solve(nums):
    nums.sort()
    subsets = []
    for i in range(len(nums)):
        subsets.append([nums[i]])
        for j in range(i+1, len(nums)):
            if nums[j] % nums[i] == 0:
                subsets[-1].append(nums[j])
    largest_subset = max(subsets, key=len)
    return largest_subset",0.8559,-11.985559674889496
620,3,"

def solve(nums):
    nums.sort()
    dp = [1] * len(nums)
    for i in range(len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)
    return max(dp)",0.9333,-4.694163778845
620,4,"

def solve(nums):
    largest_subset = []
    for i in range(len(nums)):
        current_subset = [nums[i]]
        for j in range(i+1, len(nums)):
            if nums[j] % nums[i] == 0:
                current_subset.append(nums[j])
        if len(current_subset) > len(largest_subset):
            largest_subset = current_subset
    return largest_subset",0.9154,-7.164142322853698
620,5,"

def solve(nums):
    nums.sort()
    dp = [1] * len(nums)
    for i in range(len(nums)):
        for j in range(i):
            if nums[i] % nums[j] == 0:
                dp[i] = max(dp[i], dp[j] + 1)
    return max(dp)",0.9333,-4.694163778845
621,1,"

def solve(s, k):
    result = """"
    for char in s:
        if char.isdigit():
            result += str(int(char) + k)
        else:
            result += char
    return result",0.9187,-3.645305312252499
621,2,"

def solve(s, k):
    res = """"
    for char in s:
        if char.isdigit():
            num = int(char)
            num += k
            res += str(num)
        else:
            res += char
    return res",0.8591,-7.591484281094001
621,3,"

def solve(s, k):
  result = """"
  for char in s:
    if char.isdigit():
      digit = int(char)
      new_digit = (digit + k) % 10
      result += str(new_digit)
    else:
      result += char
  return result",0.8362,-10.551277554492303
621,4,"

def solve(s, k):
    result = """"
    for char in s:
        if char.isnumeric():
            num = int(char)
            num += k
            result += str(num)
        else:
            result += char
    return result",0.8854,-6.2084408970303
621,5,"

def solve(string, k):
    new_string = """"
    for char in string:
        if char.isdigit():
            new_string += str(int(char) + k)
        else:
            new_string += char
    return new_string",0.9263,-3.598457691573001
622,1,"

def solve(arr1, arr2):
    merged = sorted(arr1 + arr2)
    n = len(merged)
    if n % 2 == 0:
        median = (merged[n//2] + merged[n//2 - 1]) / 2
    else:
        median = merged[n//2]
    return median",0.9119,-6.640606280046001
622,2,"

def solve(arr1, arr2):
    merged_arr = arr1 + arr2
    merged_arr.sort()
    length = len(merged_arr)
    if length % 2 == 0:
        median = (merged_arr[length//2] + merged_arr[length//2 - 1]) / 2
    else:
        median = merged_arr[(length-1)//2]
    return median",0.8684,-11.852811529062995
622,3,"

def solve(arr1, arr2):
    merged = arr1 + arr2
    merged.sort()
    n = len(merged)
    if n%2 == 0:
        median = (merged[n//2] + merged[n//2 - 1]) / 2
    else:
        median = merged[n//2]
    return median",0.8702,-10.290401740677996
622,4,"

def solve(arr1, arr2):
    n = len(arr1)
    arr = arr1 + arr2
    arr.sort()
    if n % 2 == 0:
        median = (arr[n//2] + arr[n//2 - 1]) / 2
    else:
        median = arr[n//2]
    return median",0.9147,-6.6907731430199995
622,5,"

def solve(arr1,arr2):
  n = len(arr1)
  arr = arr1 + arr2
  arr.sort()
  if n%2 != 0:
    return arr[n//2]
  else:
    return (arr[n//2] + arr[(n//2)-1])/2",0.7861,-15.6460535975883
623,1,"

def solve(lst, n):
    return list(map(lambda x: x**n, lst))",0.9523,-0.9778215551040002
623,2,"

def solve(lst, n):
    return list(map(lambda x: x**n, lst))",0.9523,-0.9778215551040002
623,3,"

def solve(lst, pow):
    return list(map(lambda x: x**pow, lst))",0.6668,-8.105285470226999
623,4,"

def solve(lst, n):
    return list(map(lambda x: x**n, lst))",0.9523,-0.9778215551040002
623,5,"

def solve(lst, n):
    return list(map(lambda x: x**n, lst))",0.9523,-0.9778215551040002
624,1,"

def solve(string):
    return string.upper()",0.9486,-0.527643703531
624,2,"

def solve(string):
    return string.upper()",0.9486,-0.527643703531
624,3,"

def solve(string):
    return string.upper()",0.9486,-0.527643703531
624,4,"

def solve(string):
    return string.upper()",0.9486,-0.527643703531
624,5,"

def solve(string):
    return string.upper()",0.9486,-0.527643703531
625,1,"

def solve(lst):
    lst[0], lst[-1] = lst[-1], lst[0]
    return lst",0.9665,-0.8868826307605001
625,2,"

def solve(lst):
    lst[0], lst[-1] = lst[-1], lst[0]
    return lst",0.9665,-0.8868826307605001
625,3,"

def solve(lst):
    first = lst[0]
    last = lst[-1]
    lst[0] = last
    lst[-1] = first
    return lst",0.9458,-2.1189841800112004
625,4,"

def solve(lst):
    lst[0], lst[-1] = lst[-1], lst[0]
    return lst",0.9665,-0.8868826307605001
625,5,"

def solve(lst):
    lst[0], lst[-1] = lst[-1], lst[0]
    return lst",0.9665,-0.8868826307605001
626,1,"

import math

def solve(radius):
    base = radius
    height = radius / 2
    area = (base * height) / 2
    return area",0.8411,-6.2281220201359995
626,2,"

import math

def solve(radius):
    side = math.sqrt(radius**2 - (radius/2)**2)
    area = (side * (radius/2)) / 2
    return area",0.7643,-11.290113078996002
626,3,"

import math

def solve(radius):
    side = math.sqrt(3) * radius
    area = (side**2)/4
    return area",0.7127,-10.837046797238
626,4,"
def solve(radius):
    # calculate the base of the triangle using Pythagorean theorem
    base = (2 * radius) / math.sqrt(2)
    
    # calculate the height of the triangle
    height = radius
    
    # calculate the area of the triangle
    area = (base * height) / 2
    
    # return the maximum area of the triangle
    return area",0.6956,-29.76078168085399
626,5,"
import math

def solve(semi_circle_radius):
    base = semi_circle_radius * 2
    height = semi_circle_radius
    area = (base * height)/2
    return area",0.73,-12.901459248251992
627,1,"

def solve(arr):
    arr.sort()
    smallest = 1
    for num in arr:
        if num == smallest:
            smallest += 1
        elif num > smallest:
            return smallest
    return smallest",0.8879,-5.468090448259999
627,2,"

def solve(nums):
    nums.sort()
    smallest = 1
    for num in nums:
        if num == smallest:
            smallest += 1
    return smallest",0.8828,-4.489310394761598
627,3,"

def solve(arr):
    smallest = 1
    for num in sorted(arr):
        if num == smallest:
            smallest += 1
    return smallest",0.9009,-3.444277376928
627,4,"

def solve(arr):
    n = len(arr)
    for i in range(n):
        if arr[i] != i + 1:
            return i + 1
    return n + 1",0.8979,-4.521810407611
627,5,"

def solve(arr):
    n = len(arr)
    for i in range(n):
        if arr[i] != i + 1:
            return i + 1
    return n + 1",0.8979,-4.521810407611
628,1,"

def solve(string):
    return string.replace(' ', '%20')",0.8144,-2.87392981543
628,2,"

def solve(string):
    new_string = """"
    for char in string:
        if char == "" "":
            new_string += ""%20""
        else:
            new_string += char
    return new_string",0.9515,-2.1355834959677007
628,3,"

def solve(string):
    new_string = """"
    for char in string:
        if char == "" "":
            new_string += ""%20""
        else:
            new_string += char
    return new_string",0.9515,-2.1355834959677007
628,4,"

def solve(string):
    result = """"
    for char in string:
        if char == "" "":
            result += ""%20""
        else:
            result += char
    return result",0.9118,-3.5995538836293
628,5,"

def solve(string):
    new_string = """"
    for char in string:
        if char == "" "":
            new_string += ""%20""
        else:
            new_string += char
    return new_string",0.9515,-2.1355834959677007
629,1,"

def solve(lst):
    even_nums = []
    for num in lst:
        if num % 2 == 0:
            even_nums.append(num)
    return even_nums",0.9407,-2.199083659700099
629,2,"

def solve(lst):
    even_lst = []
    for num in lst:
        if num % 2 == 0:
            even_lst.append(num)
    return even_lst",0.9404,-2.2103938899655
629,3,"

def solve(lst):
    even_numbers = []
    for num in lst:
        if num % 2 == 0:
            even_numbers.append(num)
    return even_numbers",0.9334,-2.4812198465188
629,4,"

def solve(lst):
    even_lst = []
    for num in lst:
        if num % 2 == 0:
            even_lst.append(num)
    return even_lst",0.9404,-2.2103938899655
629,5,"

def solve(lst):
    even_list = []
    for num in lst:
        if num % 2 == 0:
            even_list.append(num)
    return even_list",0.9045,-3.6118973689817007
630,1,"

def solve(coordinate):
    x = coordinate[0]
    y = coordinate[1]
    adjacent_coordinates = []
    for i in range(x-1, x+2):
        for j in range(y-1, y+2):
            if i == x and j == y:
                continue
            else:
                adjacent_coordinates.append((i,j))
    return adjacent_coordinates",0.8869,-9.4776803049325
630,2,"

def solve(coord):
    x, y = coord
    adjacent_coords = [(x+1, y), (x-1, y), (x, y+1), (x, y-1), (x+1, y+1), (x-1, y-1), (x+1, y-1), (x-1, y+1)]
    return adjacent_coords",0.9238,-6.655125679423
630,3,"

def solve(coord):
    x = coord[0]
    y = coord[1]
    adjacent_coords = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]
    return adjacent_coords",0.919,-4.6441934669227
630,4,"

def solve(coordinate):
    adjacent_coordinates = []
    x = coordinate[0]
    y = coordinate[1]
    for i in range(x-1, x+2):
        for j in range(y-1, y+2):
            if (i, j) != (x, y):
                adjacent_coordinates.append((i, j))
    return adjacent_coordinates",0.8618,-11.452639345889995
630,5,"

def solve(coord):
    x = coord[0]
    y = coord[1]
    adjacent_coords = [(x-1, y), (x+1, y), (x, y-1), (x, y+1), (x-1, y-1), (x-1, y+1), (x+1, y-1), (x+1, y+1)]
    return adjacent_coords",0.9418,-5.454504659318198
631,1,"

import re

def solve(string):
    pattern = r'\s'
    if re.search(pattern, string):
        return re.sub(pattern, '_', string)
    else:
        return re.sub('_', ' ', string)",0.8186,-8.806787533090002
631,2,"

import re

def solve(string):
    string = re.sub(r'\s', '_', string)
    string = re.sub(r'_', ' ', string)
    return string",0.9146,-3.124250735158
631,3,"

def solve(string):
    new_string = re.sub(r'\s', '_', string)
    new_string = re.sub(r'_', ' ', new_string)
    return new_string",0.8946,-4.010398948780001
631,4,"

def solve(string):
    string = re.sub(r'\s', '_', string)
    string = re.sub(r'_', ' ', string)
    return string",0.9033,-3.2554778815080003
631,5,"

import re

def solve(string):
    new_string = re.sub(r""\s"", ""_"", string)
    new_string = re.sub(r""_"", "" "", new_string)
    return new_string
    
# Example:
print(solve(""hello world"")) # Output: hello_world",0.788,-13.340442712486997
632,1,"

def solve(lst):
    count = 0
    for i in lst:
        if i == 0:
            count += 1
    for i in range(count):
        lst.remove(0)
        lst.append(0)
    return lst",0.8503,-8.432313331340499
632,2,"

def solve(lst):
    zeros = []
    non_zeros = []
    for num in lst:
        if num == 0:
            zeros.append(num)
        else:
            non_zeros.append(num)
    return non_zeros + zeros",0.9243,-3.6974964261868006
632,3,"

def solve(lst):
    non_zero = [x for x in lst if x != 0]
    zero = [x for x in lst if x == 0]
    return non_zero + zero",0.8923,-4.784425394730502
632,4,"

def solve(lst):
    non_zero = [x for x in lst if x != 0]
    zeros = [x for x in lst if x == 0]
    return non_zero + zeros",0.8564,-6.511464596759
632,5,"

def solve(nums):
    zeroes = []
    non_zeroes = []
    for num in nums:
        if num == 0:
            zeroes.append(num)
        else:
            non_zeroes.append(num)
    return non_zeroes + zeroes",0.8944,-5.578533182825603
633,1,"

def solve(arr):
    xor_sum = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            xor_sum += arr[i] ^ arr[j]
    return xor_sum",0.9512,-2.3525544778159997
633,2,"
def solve(arr):
    result = 0
    n = len(arr)
    for i in range(n):
        for j in range(i+1, n):
            result += arr[i] ^ arr[j]
    return result",0.8595,-7.26675542067
633,3,"

def solve(arr):
    result = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            result += arr[i] ^ arr[j]
    return result",0.9567,-1.9456998808928003
633,4,"

def solve(arr):
    res = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            res += arr[i] ^ arr[j]
    return res",0.926,-3.384581827744501
633,5,"

def solve(arr):
    result = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            result += arr[i] ^ arr[j]
    return result",0.9567,-1.9456998808928003
634,1,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        if i % 2 == 0:
            sum += i**4
    return sum",0.9303,-3.10736471608
634,2,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i)**4
    return sum",0.9607,-1.402052387634
634,3,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        if i % 2 == 0:
            sum += i**4
    return sum",0.9303,-3.10736471608
634,4,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i)**4
    return sum",0.9607,-1.402052387634
634,5,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i)**4
    return sum",0.9607,-1.402052387634
635,1,"

def solve(vals):
    heap = []
    for val in vals:
        heapq.heappush(heap, val)
    result = []
    while heap:
        smallest = heapq.heappop(heap)
        result.append(smallest)
    return result",0.7733,-12.852302782967998
635,2,"

def solve(values):
    heap = []
    for value in values:
        heapq.heappush(heap, value)
    sorted_values = []
    while heap:
        sorted_values.append(heapq.heappop(heap))
    return sorted_values",0.9363,-3.1614537871411
635,3,"

def solve(heap):
    heapq.heapify(heap)
    sorted_list = []
    while heap:
        sorted_list.append(heapq.heappop(heap))
    return sorted_list",0.8405,-6.082238966686497
635,4,"

def solve(values):
    heap = []
    for value in values:
        heapq.heappush(heap, value)
    result = []
    while heap:
        result.append(heapq.heappop(heap))
    return result",0.9085,-4.317391199191099
635,5,"

def solve(values):
  heap = []
  for value in values:
    heapq.heappush(heap, value)
  
  sorted_values = []
  while heap:
    sorted_values.append(heapq.heappop(heap))
  
  return sorted_values",0.8969,-5.439068351686998
636,1,"

def solve(a,b,c):
    D = (b**2) - (4*a*c)
    if D < 0:
        return ""No real roots""
    else:
        x1 = (-b + (D**0.5)) / (2*a)
        x2 = (-b - (D**0.5)) / (2*a)
        if x1 == 1/x2 or x2 == 1/x1:
            return ""Roots are reciprocal of each other""
        else:
            return ""Roots are not reciprocal of each other""",0.9105,-11.2533320280411
636,2,"

def solve(a,b,c):
    d = (b**2) - (4*a*c)
    x1 = (-b + d**0.5)/(2*a)
    x2 = (-b - d**0.5)/(2*a)
    if x1 * x2 == 1:
        print(""The roots are reciprocal of each other"")
    else:
        print(""The roots are not reciprocal of each other"")",0.8221,-17.631312763289998
636,3,"


def solve(a,b,c):
    #Calculating discriminant
    d = (b**2) - (4*a*c)
    
    #Checking if discriminant is less than 0
    if d < 0:
      return ""No real roots""
    
    #Calculating roots
    root1 = (-b + (d**0.5)) / (2*a)
    root2 = (-b - (d**0.5)) / (2*a)
    
    #Checking if roots are reciprocal of each other
    if root1 == 1/root2:
      return ""Roots are reciprocal of each other""
    else:
      return ""Roots are not reciprocal of each other""",0.7989,-33.2294656563974
636,4,"

def solve(a,b,c):
    if a == 0:
        print(""Not a quadratic equation"")
    else:
        d = (b**2) - (4*a*c)
        if d < 0:
            print(""No real roots"")
        else:
            root1 = (-b + (d**0.5)) / (2*a)
            root2 = (-b - (d**0.5)) / (2*a)
            if root1*root2 == 1:
                print(""Roots are reciprocal of each other"")
            else:
                print(""Roots are not reciprocal of each other"")",0.8941,-14.6702561491992
636,5,"

def solve(a, b, c):
    discriminant = (b**2) - (4*a*c)
    
    if discriminant < 0:
        return ""Imaginary roots""
    else:
        root1 = (-b + (discriminant**(1/2))) / (2*a)
        root2 = (-b - (discriminant**(1/2))) / (2*a)
        
        if root1 * root2 == 1:
            return ""Roots are reciprocal of each other""
        else:
            return ""Roots are not reciprocal of each other""",0.8736,-16.755252961792227
637,1,"

def solve(cost, selling_price):
    if cost == selling_price:
        return True
    else:
        return False",0.8984,-2.6786049488020005
637,2,"

def solve(cost, selling_price):
    if cost == selling_price:
        return ""No profit or loss.""
    else:
        return ""Profit or loss present.""",0.7183,-11.249880358960002
637,3,"

def solve(amount, cost, revenue):
    if cost == revenue:
        return True
    else:
        return False",0.7831,-6.111645470658001
637,4,"

def solve(cost, selling_price):
    if cost == selling_price:
        return True
    else:
        return False",0.8984,-2.6786049488020005
637,5,"

def solve(cost_price, selling_price):
    if cost_price == selling_price:
        return True
    else:
        return False",0.9301,-1.9567741817769992
638,1,"

def solve(temperature, wind_speed):
    if temperature > 50 or wind_speed < 3:
        return ""Invalid input.""
    else:
        wind_chill_index = 35.74 + 0.6215 * temperature - 35.75 * (wind_speed ** 0.16) + 0.4275 * temperature * (wind_speed ** 0.16)
        return wind_chill_index",0.8952,-9.740419649136305
638,2,"

def solve(temperature, wind_speed):
    wind_chill_index = 35.74 + (0.6215 * temperature) - (35.75 * (wind_speed**0.16)) + (0.4275 * temperature * (wind_speed**0.16))
    return wind_chill_index",0.9196,-5.444922214441799
638,3,"

def solve(temp, wind_speed):
    wind_chill = 35.74 + 0.6215 * temp - 35.75 * (wind_speed ** 0.16) + 0.4275 * temp * (wind_speed ** 0.16)
    return wind_chill",0.9241,-4.971496158453102
638,4,"

def solve(temp, wind_speed):
    wind_chill = 35.74 + 0.6215 * temp - 35.75 * (wind_speed**0.16) + 0.4275 * temp * (wind_speed**0.16)
    return wind_chill",0.8984,-6.536460428859199
638,5,"

def solve(air_temp, wind_speed):
    return 35.74 + 0.6215*air_temp - 35.75*(wind_speed**0.16) + 0.4275*air_temp*(wind_speed**0.16) ",0.8267,-10.660358129592003
639,1,"

def solve(names):
    total = 0
    for name in names:
        if name[0].isupper():
            total += len(name)
    return total",0.9348,-2.359542183614199
639,2,"

def solve(names):
    total_length = 0
    for name in names:
        if name[0].isupper():
            total_length += len(name)
    return total_length",0.9534,-1.8117532806223
639,3,"

def solve(names):
    total_length = 0
    for name in names:
        if name[0].isupper():
            total_length += len(name)
    return total_length",0.9534,-1.8117532806223
639,4,"

def solve(names):
    total_length = 0
    for name in names:
        if name[0].isupper():
            total_length += len(name)
    return total_length",0.9534,-1.8117532806223
639,5,"

def solve(names):
    total_length = 0
    for name in names:
        if name[0].isupper():
            total_length += len(name)
    return total_length",0.9534,-1.8117532806223
640,1,"

def solve(s):
    res = """"
    count = 0
    for c in s:
        if c == ""("":
            count += 1
        elif c == "")"":
            count -= 1
        elif count == 0:
            res += c
    return res",0.8853,-7.309047142018699
640,2,"

def solve(string):
    result = """"
    open_count = 0
    
    for char in string:
        if char == ""("":
            open_count += 1
        elif char == "")"":
            open_count -= 1
        elif open_count == 0:
            result += char
    
    return result",0.8821,-8.028761021290999
640,3,"
def solve(string):
    result = """"
    inside_parenthesis = False

    for char in string:
        if char == '(':
            inside_parenthesis = True
        elif char == ')':
            inside_parenthesis = False
        elif not inside_parenthesis:
            result += char
    
    return result",0.8011,-14.856148148214006
640,4,"

def solve(string):
    result = ''
    open_paren = 0
    for char in string:
        if char == '(':
            open_paren += 1
        elif char == ')':
            open_paren -= 1
        elif open_paren == 0:
            result += char
    return result",0.9054,-6.756883054495999
640,5,"

def solve(string):
    new_string = ''
    skip = 0
    for char in string:
        if char == '(':
            skip += 1
        elif char == ')':
            skip -= 1
        elif skip == 0:
            new_string += char
    return new_string",0.8997,-6.6590904957560015
641,1,"

def solve(n):
    return n * (7 * n - 5) // 2",0.9249,-1.562112223088
641,2,"
def solve(n):
    return n*(7*n - 5)//2",0.6671,-6.47705912163
641,3,"

def solve(n):
    return (5*n*n - 3*n)//2",0.7877,-4.05673414155
641,4,"

def solve(n):
    return n * (7*n - 5) // 2",0.848,-3.1316057206800005
641,5,"

def solve(n):
    return n * (7 * n - 5) // 2",0.9249,-1.562112223088
642,1,"

def solve(matrix):
    unique_rows = []
    for row in matrix:
        if row not in unique_rows:
            unique_rows.append(row)
    return unique_rows",0.9551,-1.5608976770190004
642,2,"

def solve(matrix):
    unique_rows = []
    for row in matrix:
        if row not in unique_rows:
            unique_rows.append(row)
    return unique_rows",0.9551,-1.5608976770190004
642,3,"

def solve(tuple_matrix):
    unique_rows = []
    for row in tuple_matrix:
        if row not in unique_rows:
            unique_rows.append(row)
    return unique_rows",0.9135,-3.255106519713999
642,4,"

def solve(matrix):
    unique_rows = []
    for row in matrix:
        if row not in unique_rows:
            unique_rows.append(row)
    return unique_rows",0.9551,-1.5608976770190004
642,5,"

def solve(matrix):
    unique_rows = []
    for row in matrix:
        if row not in unique_rows:
            unique_rows.append(row)
    return unique_rows",0.9551,-1.5608976770190004
643,1,"

def solve(word):
    if len(word) > 2 and 'z' in word[1:-1]:
        return True
    else:
        return False",0.8466,-5.660558077110002
643,2,"

def solve(word):
    if ""z"" in word:
        if word[0] != ""z"" and word[-1] != ""z"":
            return True
    return False",0.9082,-3.753455484590999
643,3,"

def solve(word):
    if len(word) < 3:
        return False
    for i in range(1, len(word)-1):
        if word[i] == 'z':
            return True
    return False",0.9077,-4.549825861909801
643,4,"

def solve(word):
    if 'z' in word[1:-1]:
        return True
    else:
        return False",0.9033,-2.745343488467999
643,5,"

def solve(word):
    if 'z' in word[1:-1]:
        return True
    else:
        return False",0.9033,-2.745343488467999
644,1,"

def solve(arr, pos):
    arr[:pos+1] = arr[:pos+1][::-1]
    return arr",0.8739,-3.6385093315313
644,2,"

def solve(arr, pos):
    return arr[:pos][::-1] + arr[pos:]",0.884,-2.4656100162044
644,3,"

def solve(arr, pos):
  arr[:pos] = arr[:pos][::-1]
  return arr",0.8019,-5.0784870851658
644,4,"

def solve(arr, pos):
    left = 0
    right = pos - 1
    
    while left < right:
        temp = arr[left]
        arr[left] = arr[right]
        arr[right] = temp
        left += 1
        right -= 1
        
    return arr",0.8777,-8.219838159911001
644,5,"

def solve(arr, pos):
    return arr[:pos][::-1] + arr[pos:]",0.884,-2.4656100162044
645,1,"

def solve(tuples, k):
    product = 1
    for tup in tuples:
        product *= tup[k]
    return product",0.9564,-1.2919518862990005
645,2,"

def solve(tuples, k):
    product = 1
    for tup in tuples:
        product *= tup[k]
    return product",0.9564,-1.2919518862990005
645,3,"

def solve(tuples, k):
    product = 1
    for tup in tuples:
        product *= tup[k]
    return product",0.9564,-1.2919518862990005
645,4,"

def solve(tuples, k):
    product = 1
    for t in tuples:
        product *= t[k]
    return product",0.9156,-2.5571359984089996
645,5,"

def solve(tuples, k):
    product = 1
    for tup in tuples:
        product *= tup[k]
    return product",0.9564,-1.2919518862990005
646,1,"

def solve(n, k):
    return (n//k)**3",0.9205,-1.242597722834
646,2,"

def solve(n, k):
    return (n//k)**3",0.9205,-1.242597722834
646,3,"

def solve(n, k):
    count = 0
    for i in range(1, n+1):
        if i**3 % k == 0:
            count += 1
    return count",0.9013,-4.677249277524502
646,4,"

def solve(n,k):
    if n < 0 or k < 0:
        return(""Error: n and k must be positive integers"")
    else:
        return (n//k)**3",0.6268,-19.619523053356996
646,5,"

def solve(n, k):
    return (n//k) ** 3",0.8193,-3.3880692468139997
647,1,"

def solve(string):
    split_string = []
    current_word = """"
    
    for char in string:
        if char.isupper():
            if current_word != """":
                split_string.append(current_word)
            current_word = char
        else:
            current_word += char
    split_string.append(current_word)
    
    return split_string",0.8471,-11.280498705315996
647,2,"

def solve(s):
    result = []
    temp = """"
    for i in range(len(s)):
        if s[i].isupper():
            result.append(temp)
            temp = s[i]
        else:
            temp += s[i]
    result.append(temp)
    return result",0.8606,-8.558643375354999
647,3,"

def solve(string):
    output = []
    current_word = """"
    for letter in string:
        if letter.isupper():
            if current_word:
                output.append(current_word)
            current_word = letter
        else:
            current_word += letter
    output.append(current_word)
    return output",0.8538,-9.644503860026704
647,4,"

def solve(s):
    split_str = [char for char in s if char.isupper()]
    split_str.append(s[-1])
    return """".join(split_str).split(s)[-1]",0.6534,-17.021843336014996
647,5,"

def solve(string):
    result = []
    current_word = """"

    for char in string:
        if char.isupper():
            result.append(current_word)
            current_word = char
        else:
            current_word += char

    result.append(current_word)

    return result",0.8651,-8.116605187154597
648,1,"

def solve(lst, n):
    for i in range(0, len(lst)-1, n):
        lst[i], lst[i+1] = lst[i+1], lst[i]
    return lst",0.9433,-2.511238687746
648,2,"

def solve(lst, n):
    for i in range(0, len(lst)-1, n):
        lst[i], lst[i+1] = lst[i+1], lst[i]
    return lst",0.9433,-2.511238687746
648,3,"

def solve(lst, n):
    for i in range(0, len(lst)-1, n):
        lst[i], lst[i+1] = lst[i+1], lst[i]
    return lst",0.9433,-2.511238687746
648,4,"

def solve(lst, n):
    # swap every n-th value with (n+1)th value
    for i in range(0, len(lst), n):
        # check if n+1th value exists
        if i + n < len(lst):
            # swap values at index i and i+n
            lst[i], lst[i+n] = lst[i+n], lst[i]
    # swap (n+1)th value with n-th value
    for i in range(0, len(lst), n):
        # check if n+1th value exists
        if i + n < len(lst):
            # swap values at index i and i+n
            lst[i], lst[i+n] = lst[i+n], lst[i]
    # return the modified list
    return lst",0.8516,-26.98504417824389
648,5,"

def solve(input_list, n):
    for i in range(len(input_list)-1):
        if (i+1) % n == 0:
            input_list[i], input_list[i+1] = input_list[i+1], input_list[i]
    return input_list",0.8047,-12.602363586493002
649,1,"

def solve(lst, start_index, end_index):
  sum = 0
  for i in range(start_index, end_index+1):
    sum += lst[i]
  return sum",0.8037,-8.523426787668
649,2,"

def solve(list, start, end):
    sum = 0
    for i in range(start, end+1):
        sum += list[i]
    return sum",0.8902,-4.068878477357
649,3,"

def solve(lst, start, end):
    sum = 0
    for i in range(start, end+1):
        sum += lst[i]
    return sum",0.9565,-1.554858709671
649,4,"

def solve(lst, start, end):
    sum = 0
    for i in range(start, end+1):
        sum += lst[i]
    return sum",0.9565,-1.554858709671
649,5,"

def solve(lst, start, end):
    total = 0
    for num in lst[start:end+1]:
        total += num
    return total",0.9136,-2.981522147866001
650,1,"

def solve(arr1, arr2):
    if len(arr1) != len(arr2):
        return False
    
    for i in range(len(arr1)):
        if arr1[i] != arr2[i]:
            return False
    
    return True",0.9555,-2.322109836262201
650,2,"

def solve(arr1, arr2):
    if len(arr1) != len(arr2):
        return False
    for i in range(len(arr1)):
        if arr1[i] != arr2[i]:
            return False
    return True",0.9709,-1.5066043315856996
650,3,"

def solve(arr1, arr2):
    if len(arr1) != len(arr2):
        return False
    else:
        for i in range(len(arr1)):
            if arr1[i] != arr2[i]:
                return False
        return True",0.9706,-1.6125019819722002
650,4,"

def solve(arr1, arr2):
    if len(arr1) != len(arr2):
        return False
    else:
        for i in range(len(arr1)):
            if arr1[i] != arr2[i]:
                return False
        return True",0.9706,-1.6125019819722002
650,5,"

def solve(arr1, arr2):
    if len(arr1) != len(arr2):
        return False
    for i in range(len(arr1)):
        if arr1[i] != arr2[i]:
            return False
    return True",0.9709,-1.5066043315856996
651,1,"

def solve(tuple1, tuple2):
    for item in tuple1:
        if item not in tuple2:
            return False
    return True",0.9032,-3.155091983624301
651,2,"

def solve(tup1, tup2):
    if set(tup1).issubset(set(tup2)):
        return True
    else:
        return False",0.9089,-3.3442860558037
651,3,"

def solve(t1, t2):
    if set(t1).issubset(set(t2)):
        return True
    else:
        return False",0.8936,-3.600778511815001
651,4,"

def solve(tup1, tup2):
    if set(tup1).issubset(set(tup2)):
        return True
    else:
        return False",0.9089,-3.3442860558037
651,5,"

def solve(tuple1, tuple2):
    return all(item in tuple2 for item in tuple1)",0.857,-3.3955799859153006
652,1,"

def solve(matrix):
    flattened = []
    for i in range(len(matrix[0])):
        column = []
        for j in range(len(matrix)):
            column.append(matrix[j][i])
        flattened.append(tuple(column))
    return flattened",0.9324,-3.358950750938
652,2,"

def solve(matrix):
    result = []
    for col in range(len(matrix[0])):
        temp = []
        for row in range(len(matrix)):
            temp.append(matrix[row][col])
        result.append(tuple(temp))
    return result",0.8989,-5.116134434257001
652,3,"

def solve(matrix):
    flattened = []
    for i in range(len(matrix[0])):
        temp = []
        for j in range(len(matrix)):
            temp.append(matrix[j][i])
        flattened.append(tuple(temp))
    return flattened",0.8835,-5.944195116384999
652,4,"

def solve(mat):
    return list(zip(*mat))",0.6263,-5.6158036227300006
652,5,"

def solve(matrix):
  result = []
  for i in range(len(matrix[0])):
    column = []
    for j in range(len(matrix)):
      column.append(matrix[j][i])
    result.append(tuple(column))
  return result",0.8902,-5.584807852346
653,1,"

from collections import defaultdict

def solve(key_value_pairs):
    result = defaultdict(list)
    for key, value in key_value_pairs:
        result[key].append(value)
    return dict(result)",0.8896,-4.681462420510199
653,2,"

from collections import defaultdict

def solve(seq):
    result = defaultdict(list)
    for key, value in seq:
        result[key].append(value)
    return dict(result)",0.919,-3.0405395886170004
653,3,"

from collections import defaultdict

def solve(seq):
    d = defaultdict(list)
    for key, value in seq:
        d[key].append(value)
    return dict(d)",0.9116,-3.3310707307590004
653,4,"

from collections import defaultdict

def solve(sequence):
    dictionary = defaultdict(list)
    for key, value in sequence:
        dictionary[key].append(value)
    return dict(dictionary)",0.884,-4.438725314891
653,5,"

from collections import defaultdict

def solve(sequence):
    result = defaultdict(list)
    
    for key, value in sequence:
        result[key].append(value)
        
    return dict(result)",0.8331,-6.938410313934
654,1,"

def solve(length, width):
    return (2 * length) + (2 * width)",0.8206,-3.954862324659001
654,2,"

def solve(length, width):
    perimeter = 2 * (length + width)
    return perimeter",0.9565,-0.933506482637
654,3,"

def solve(length, width):
    perimeter = 2 * (length + width)
    return perimeter",0.9565,-0.933506482637
654,4,"

def solve(length, width):
    perimeter = 2*(length + width)
    return perimeter",0.854,-3.15686485014
654,5,"

def solve(length, width):
    perimeter = 2 * (length + width)
    return perimeter",0.9565,-0.933506482637
655,1,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**5
    return sum",0.971,-0.971260893089
655,2,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**5
    return sum",0.971,-0.971260893089
655,3,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**5
    return sum",0.971,-0.971260893089
655,4,"

def solve(n):
   sum = 0
   for i in range(1,n+1):
      sum += i**5
   return sum",0.8095,-6.762248913920999
655,5,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**5
    return sum",0.971,-0.971260893089
656,1,"

def solve(arr1, arr2):
    arr1.sort()
    arr2.sort()
    min_sum = 0
    for i in range(len(arr1)):
        min_sum += abs(arr1[i] - arr2[i])
    return min_sum",0.9655,-1.8630285306723
656,2,"

def solve(arr1, arr2):
    arr1.sort()
    arr2.sort()
    sum = 0
    for i in range(len(arr1)):
        sum += abs(arr1[i] - arr2[i])
    return sum",0.9588,-2.1037127005033
656,3,"

def solve(arr1, arr2):
    arr1.sort()
    arr2.sort()
    sum = 0
    for i in range(len(arr1)):
        sum += abs(arr1[i] - arr2[i])
        
    return sum",0.8834,-6.320818956647301
656,4,"

def solve(arr1, arr2):
    sorted_arr1 = sorted(arr1)
    sorted_arr2 = sorted(arr2)
    min_sum = 0
    for i in range(len(arr1)):
        min_sum += abs(sorted_arr1[i] - sorted_arr2[i])
    return min_sum",0.9114,-5.843415315463299
656,5,"

def solve(arr1, arr2):
    arr1.sort()
    arr2.sort()
    sum_diff = 0
    for i in range(len(arr1)):
        sum_diff += abs(arr1[i] - arr2[i])
    return sum_diff",0.9087,-5.072816295474301
657,1,"

def solve(n):
    factorial = 1
    for i in range(1, n+1):
        factorial *= i
    first_digit = int(str(factorial)[0])
    return first_digit",0.9302,-3.1092772976699994
657,2,"

def solve(n):
    factorial = 1
    for i in range(1,n+1):
        factorial *= i
    first_digit = str(factorial)[0]
    return int(first_digit)",0.8992,-4.568380294813
657,3,"

def solve(n):
    factorial = 1
    for i in range(1, n+1):
        factorial *= i
    first_digit = str(factorial)[0]
    return int(first_digit)",0.9274,-3.316728428882
657,4,"

def solve(n):
    if n < 0:
        return None
    elif n == 0:
        return 1
    else:
        factorial = 1
        while n > 0:
            factorial *= n
            n -= 1
        return int(str(factorial)[0])",0.8676,-9.088692716718
657,5,"

def solve(n):
    factorial = 1
    while n > 0:
        factorial *= n
        n -= 1
    first_digit = str(factorial)[0]
    return int(first_digit)",0.9016,-4.659541100173
658,1,"

def solve(lst):
    count = {}
    max_item = None
    max_count = 0
    for item in lst:
        if item in count:
            count[item] += 1
        else:
            count[item] = 1
        if count[item] > max_count:
            max_item = item
            max_count = count[item]
    return max_item",0.9009,-8.243425081308505
658,2,"

def solve(lst):
    max_occurrences = 0
    max_item = None
    for item in lst:
        occurrences = lst.count(item)
        if occurrences > max_occurrences:
            max_occurrences = occurrences
            max_item = item
    return max_item",0.9024,-5.851244878389
658,3,"

def solve(lst):
    max_count = 0
    max_item = None
    for item in lst:
        count = lst.count(item)
        if count > max_count:
            max_count = count
            max_item = item
    return max_item",0.9523,-2.6419640369009993
658,4,"

def solve(lst):
    counts = {}
    for item in lst:
        if item in counts:
            counts[item] += 1
        else:
            counts[item] = 1
    
    max_count = 0
    max_item = None
    for item, count in counts.items():
        if count > max_count:
            max_count = count
            max_item = item
    
    return max_item",0.9419,-5.083600047089502
658,5,"

def solve(lst):
    max_occ = 0
    max_item = None
    for item in lst:
        if lst.count(item) > max_occ:
            max_occ = lst.count(item)
            max_item = item
    return max_item",0.9024,-5.340340837967502
659,1,"

def solve(lst):
    duplicates = []
    for num in lst:
        if lst.count(num) > 1:
            if num not in duplicates:
                duplicates.append(num)
    print(duplicates)",0.8687,-5.914154550608
659,2,"

def solve(lst):
   duplicates = []
   for i in range(len(lst)):
      for j in range(i+1, len(lst)):
         if lst[i] == lst[j] and lst[i] not in duplicates:
            duplicates.append(lst[i])
   print(""Duplicates:"", duplicates)",0.8211,-11.62849554609
659,3,"

def solve(lst):
    duplicates = []
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] == lst[j] and lst[i] not in duplicates:
                duplicates.append(lst[i])
    print(""The duplicates in the list are:"", duplicates)",0.8583,-9.777621482960198
659,4,"

def solve(lst):
    duplicates = []
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] == lst[j] and lst[i] not in duplicates:
                duplicates.append(lst[i])
    return duplicates",0.9233,-4.388592663940199
659,5,"
def solve(lst):
    seen = set()
    duplicates = []
    for num in lst:
        if num in seen:
            duplicates.append(num)
        else:
            seen.add(num)
    return duplicates",0.7974,-9.507461534954
660,1,"

def solve(start1, end1, start2, end2):
    if end1 < start2 or end2 < start1:
        return (start1, end1, start2, end2)
    else:
        return (start1, start2, end2 + 1, end1)",0.7766,-16.437789914916152
660,2,"

def solve(r1, r2):
    
    # sort the ranges in ascending order
    r1.sort()
    r2.sort()
    
    # initialize a list to store the chosen points
    chosen_points = []
    
    # loop through the first range
    for i in range(len(r1)):
        
        # check if the current point in the first range is within the second range
        if r1[i] >= r2[0] and r1[i] <= r2[-1]:
            
            # if yes, move on to the next point in the first range
            continue
        
        # if not, add the current point to the chosen points list
        chosen_points.append(r1[i])
    
    # loop through the second range
    for i in range(len(r2)):
        
        # check if the current point in the second range is within the first range
        if r2[i] >= r1[0] and r2[i] <= r1[-1]:
            
            # if yes, move on to the next point in the second range
            continue
        
        # if not, add the current point to the chosen points list
        chosen_points.append(r2[i])
    
    # return the chosen points list
    return chosen_points",0.8814,-33.197242359264365
660,3,"

def solve(range1, range2):
    points = []
    for i in range1:
        if i not in range2:
            points.append(i)
    for j in range2:
        if j not in range1:
            points.append(j)

    return points",0.876,-7.411067703420001
660,4,"

def solve(range1, range2):
    points = []
    for i in range1:
        for j in range2:
            if i not in range(j[0], j[1]+1) and j not in range(i[0], i[1]+1):
                points.append(i)
                points.append(j)
    return points",0.952,-3.4899353939539988
660,5,"

def solve(range1, range2):
    points = []
    for i in range1:
        for j in range2:
            if i not in range(j[0], j[1]+1) and j not in range(i[0], i[1]+1):
                points.append(i)
                points.append(j)
    return points",0.952,-3.4899353939539988
661,1,"

def solve(nums):
    dp = [0] * (len(nums) + 3)
    for i in reversed(range(len(nums))):
        dp[i] = nums[i] + max(dp[i+2], dp[i+3])
    return max(dp[0], dp[1])",0.7876,-14.328333218335006
661,2,"

def solve(arr):
    n = len(arr)
    dp = [0] * n
    
    if n == 1:
        return arr[0]
    elif n == 2:
        return max(arr[0], arr[1])
    
    dp[0] = arr[0]
    dp[1] = max(arr[0], arr[1])
    dp[2] = max(arr[0] + arr[2], arr[1])
    
    for i in range(3, n):
        dp[i] = max(dp[i-2] + arr[i], dp[i-3] + arr[i])
    
    return max(dp[-1], dp[-2])",0.8948,-16.011989473419508
661,3,"

def solve(arr):
    n = len(arr)
    if n == 0:
        return 0
    if n == 1:
        return arr[0]
    if n == 2:
        return max(arr[0], arr[1])
    dp = [0] * n
    dp[0] = arr[0]
    dp[1] = arr[0] + arr[1]
    dp[2] = max(dp[1], arr[0] + arr[2], arr[1] + arr[2])
    for i in range(3, n):
        dp[i] = max(dp[i-1], dp[i-2] + arr[i], dp[i-3] + arr[i] + arr[i-1])
    return dp[n-1]",0.951,-8.497160517928007
661,4,"

def solve(arr):
    n = len(arr)
    dp = [0] * n
    dp[0] = arr[0]
    dp[1] = arr[0] + arr[1]
    dp[2] = max(dp[1], arr[0] + arr[2], arr[1] + arr[2])
    
    for i in range(3, n):
        dp[i] = max(dp[i-1], arr[i] + dp[i-2], arr[i] + arr[i-1] + dp[i-3])
    
    return dp[n-1]",0.9284,-9.505758274935
661,5,"

def solve(arr):
    if len(arr) <= 3:
        return sum(arr)
    
    dp = [0] * len(arr)
    
    dp[0] = arr[0]
    dp[1] = arr[0] + arr[1]
    dp[2] = max(dp[1], arr[0] + arr[2], arr[1] + arr[2])
    
    for i in range(3, len(arr)):
        dp[i] = max(dp[i-3] + arr[i] + arr[i-1], dp[i-2] + arr[i], dp[i-1])
    
    return dp[-1]",0.8971,-15.100686999163509
662,1,"

def solve(dictionary):
    for key in dictionary:
        dictionary[key].sort()
    return dictionary",0.8743,-2.6858297205889996
662,2,"

def solve(my_dict):
    for key in my_dict:
        my_dict[key].sort()
    return my_dict",0.8152,-4.903655396079
662,3,"

def solve(dictionary):
    sorted_dict = {}
    for key in sorted(dictionary):
        sorted_dict[key] = sorted(dictionary[key])
    
    return sorted_dict",0.7871,-7.661562977714
662,4,"

def solve(dictionary):
    sorted_dict = {}
    for key in sorted(dictionary.keys()):
        sorted_dict[key] = sorted(dictionary[key])
    return sorted_dict",0.8714,-4.403581178376999
662,5,"

def solve(dict_list):
    for key in dict_list:
        dict_list[key] = sorted(dict_list[key])
    return dict_list",0.8084,-5.955438770036997
663,1,"

def solve(x, y):
    k = x - (x % y)
    return k",0.8215,-3.9335715736710006
663,2,"

def solve(x,y):
    if y == 0:
        return x - 1
    else:
        return y - 1",0.7054,-10.12138501131
663,3,"

def solve(x, y):
    k = x - 1
    while k % x != y:
        k -= 1
    return k",0.9277,-2.4031990219610004
663,4,"

def solve(x, y):
    k = x - (x % y)
    return k",0.8215,-3.9335715736710006
663,5,"

def solve(x, y):
    if x < y:
        return 0
    else:
        return x - y",0.7051,-9.086118073655
664,1,"

def solve(num):
    sum = 0
    count = 0
    for i in range(2, num+1, 2):
        sum += i
        count += 1
    return sum/count",0.9569,-2.073066833488
664,2,"

def solve(num):
    sum = 0
    count = 0
    for i in range(2, num+1, 2):
        sum += i
        count += 1
    return sum/count",0.9569,-2.073066833488
664,3,"

def solve(n):
    sum = 0
    count = 0
    for i in range(2, n+1, 2):
        sum += i
        count += 1
    return sum/count",0.9546,-2.1834880091333004
664,4,"

def solve(num):
    sum = 0
    count = 0
    for i in range(2, num+1, 2):
        sum += i
        count += 1
    return sum/count",0.9569,-2.073066833488
664,5,"

def solve(num):
    sum = 0
    count = 0

    for i in range(2, num+1, 2):
        sum += i
        count += 1

    return sum/count",0.8699,-6.552472512883
665,1,"

def solve(lst):
    first_elem = lst[0]
    lst.pop(0)
    lst.append(first_elem)
    return lst",0.8355,-5.0335620721727
665,2,"

def solve(lst):
    lst.append(lst[0])
    lst.pop(0)
    return lst",0.8838,-2.5938339221835
665,3,"

def solve(lst):
    first = lst[0]
    lst.pop(0)
    lst.append(first)
    return lst",0.8831,-3.2329840493471
665,4,"

def solve(lst):
    first_element = lst[0]
    lst.pop(0)
    lst.append(first_element)
    return lst",0.8851,-3.418847675537301
665,5,"

def solve(lst):
    lst.append(lst.pop(0))
    return lst",0.8742,-2.150728469066
666,1,"

def solve(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count",0.9603,-1.3775315918632998
666,2,"

def solve(string, char):
    count = 0
    for i in range(len(string)):
        if string[i] == char:
            count += 1
    return count",0.9212,-3.1194969018119996
666,3,"

def solve(string, char):
    count = 0
    for letter in string:
        if letter == char:
            count += 1
    return count",0.9151,-3.017236199374
666,4,"

def solve(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count",0.9603,-1.3775315918632998
666,5,"

def solve(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count",0.9603,-1.3775315918632998
667,1,"

def solve(string):
    vowels = ""aeiouAEIOU""
    count = 0
    for char in string:
        if char in vowels:
            count += 1
    return count",0.9276,-3.1570997373817997
667,2,"

def solve(string):
    vowels = 'aeiouAEIOU'
    count = 0
    for char in string:
        if char in vowels:
            count += 1
    return count",0.9362,-2.7678846301694993
667,3,"

def solve(s):
    count = 0
    for char in s:
        if char in 'aeiouAEIOU':
            count += 1
    return count",0.8363,-6.613190165633599
667,4,"

def solve(string):
    vowels = 'aeiouAEIOU'
    count = 0
    for char in string:
        if char in vowels:
            count += 1
    return count",0.9362,-2.7678846301694993
667,5,"

def solve(string):
    count = 0
    vowels = ['a', 'e', 'i', 'o', 'u']
    for char in string:
        if char.lower() in vowels:
            count += 1
    return count",0.9359,-3.4428793063455014
668,1,"

def solve(string):
    new_string = """"
    prev_char = """"
    for char in string:
        if char != prev_char:
            new_string += char
        prev_char = char
    return new_string",0.9338,-3.013164453643201
668,2,"

def solve(string):
    result = ''
    prev_char = ''
    for char in string:
        if char != prev_char:
            result += char
            prev_char = char
    return result",0.8833,-5.087767573345602
668,3,"

def solve(string):
    result = ''
    prev_char = ''
    for char in string:
        if char != prev_char:
            result += char
            prev_char = char
    return result",0.8833,-5.087767573345602
668,4,"

def solve(s):
    res = ''
    prev = ''
    for c in s:
        if c != prev:
            res += c
            prev = c
    return res",0.7924,-8.842296110421
668,5,"

def solve(string):
    new_string = """"
    prev_char = """"
    for char in string:
        if char != prev_char:
            new_string += char
        prev_char = char
    return new_string",0.9338,-3.013164453643201
669,1,"

import re 

def solve(ip):
    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
    if re.match(pattern, ip):
        return True
    else:
        return False",0.9119,-8.665336094708998
669,2,"
import re

def solve(ip):
    pattern = r""^(([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.){3}([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$""
    if re.match(pattern, ip):
        return True
    else:
        return False",0.9078,-9.194447990649
669,3,"

import re

def solve(ip):
    pattern = r""^(([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\.){3}([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$""
    if re.match(pattern, ip):
        return True
    else:
        return False",0.9302,-6.873694353522002
669,4,"

import re

def solve(ip):
    pattern = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'
    if re.match(pattern, ip):
        return True
    else:
        return False",0.9537,-4.453805924482301
669,5,"

import re
def solve(ip):
    pattern = r'^(\d{1,3}\.){3}\d{1,3}$'
    if re.match(pattern, ip):
        return True
    else:
        return False",0.8615,-7.3030519909205
670,1,"
def solve(sequence):
    for i in range(len(sequence)-1):
        if sequence[i] <= sequence[i+1]:
            return False
    return True",0.817,-6.670667525596
670,2,"

def solve(nums):
    for i in range(len(nums)-1):
        if nums[i] < nums[i+1]:
            return False
    return True",0.9046,-3.3086777078834997
670,3,"

def solve(seq):
    for i in range(len(seq)-1):
        if seq[i] < seq[i+1]:
            return False
    return True",0.9231,-2.640023198183999
670,4,"

def solve(numbers):
    decreasing = True
    for i in range(len(numbers)-1):
        if numbers[i] < numbers[i+1]:
            decreasing = False
            break
    return decreasing",0.9042,-4.228154846998003
670,5,"

def solve(nums):
    for i in range(len(nums)-1):
        if nums[i] < nums[i+1]:
            return False
    return True",0.9046,-3.3086777078834997
671,1,"

def solve(num):
    unset_bit = num & (-num)
    return num | unset_bit",0.6877,-7.488383355901998
671,2,"

def solve(n):
    return n | (n+1)",0.8892,-1.64330068654
671,3,"

def solve(n):
    return n | (n + 1)",0.8757,-1.991526580026
671,4,"

def solve(n):
    return n | (n + 1)",0.8757,-1.991526580026
671,5,"

def solve(n):
    return n | (n+1)",0.8892,-1.64330068654
672,1,"

def solve(num1, num2, num3):
    max_num = num1
    if num2 > max_num:
        max_num = num2
    if num3 > max_num:
        max_num = num3
    return max_num",0.9532,-2.5382696212036
672,2,"

def solve(num1, num2, num3):
    return max(num1, num2, num3)

# Alternatively, you can use the max() function with a list:
# def solve(num1, num2, num3):
#     return max([num1, num2, num3])",0.7351,-19.6931472254254
672,3,"

def solve(a, b, c):
    if a >= b and a >= c:
        return a
    elif b >= a and b >= c:
        return b
    else:
        return c",0.9313,-3.062393326547
672,4,"

def solve(num1, num2, num3):
    if (num1 > num2) and (num1 > num3):
        return num1
    elif (num2 > num1) and (num2 > num3):
        return num2
    else:
        return num3",0.9112,-5.8587749568576015
672,5,"

def solve(a, b, c):
    return max(a, b, c)",0.8532,-2.8566879179569997
673,1,"

def solve(lst):
    num = 0
    for i in range(len(lst)):
        num = num*10 + lst[i]
    return num",0.8425,-5.485641922054498
673,2,"

def solve(lst):
    result = 0
    for num in lst:
        result = result * 10 + num
    return result",0.9097,-2.839957381589
673,3,"

def solve(lst):
    result = """"
    for num in lst:
        result += str(num)
    return int(result)",0.8775,-3.3989410703559995
673,4,"

def solve(lst):
    num = """".join(map(str, lst))
    return int(num)",0.7132,-6.7596641244899995
673,5,"

def solve(lst):
    res = 0
    for num in lst:
        res = res * 10 + num
    return res",0.8552,-4.6930437113443
674,1,"

def solve(string):
    words = string.split()
    unique_words = collections.Counter(words)
    return "" "".join(unique_words.keys())",0.8137,-5.773307647974001
674,2,"

from collections import Counter

def solve(string):
    words = string.split()
    counts = Counter(words)
    unique_words = [word for word, count in counts.items()]
    return ' '.join(unique_words)",0.8342,-7.977716553554
674,3,"

from collections import Counter

def solve(string):
    words = string.split()
    counter = Counter(words)
    unique_words = [word for word, count in counter.items() if count == 1]
    return ' '.join(unique_words)",0.885,-6.108020044379001
674,4,"

from collections import Counter

def solve(sentence):
    words = sentence.split()
    counts = Counter(words)
    output = []
    for word in words:
        if counts[word] > 1:
            counts[word] = 0
        else:
            output.append(word)
    return ' '.join(output)",0.7649,-17.156406648045
674,5,"

def solve(string):
    words = string.split()
    unique_words = []
    for word in words:
        if word not in unique_words:
            unique_words.append(word)
    return ' '.join(unique_words)",0.8994,-4.664152907041
675,1,"

def solve(num1, num2):
    sum = num1 + num2
    if sum >= 10 and sum <= 20:
        return 20
    else:
        return sum",0.9384,-2.6049999225666003
675,2,"

def solve(num1, num2):
    sum = num1 + num2
    if sum >= 10 and sum <= 20:
        return 20
    else:
        return sum",0.9384,-2.6049999225666003
675,3,"

def solve(a, b):
    sum = a + b
    if sum >= 10 and sum <= 20:
        return 20
    else:
        return sum",0.9361,-2.4433346706399997
675,4,"

def solve(num1, num2):
    sum = num1 + num2
    if sum in range(10, 20):
        return 20
    else:
        return sum",0.9173,-3.4525811658846
675,5,"

def solve(num1, num2):
    sum = num1 + num2
    if sum >= 10 and sum <= 20:
        return 20
    else:
        return sum",0.9384,-2.6049999225666003
676,1,"

import re

def solve(string):
    return re.sub(r'[^a-zA-Z0-9]', '', string)",0.9129,-2.2789114357605
676,2,"

def solve(input_str):
    return re.sub(r'[^a-zA-Z0-9]', '', input_str)",0.716,-8.019163135613
676,3,"

import re

def solve(string):
    return re.sub(r'[^a-zA-Z0-9]', '', string)",0.9129,-2.2789114357605
676,4,"

import re
def solve(string):
    return re.sub('[^a-zA-Z0-9]', '', string)",0.8314,-4.430288161364
676,5,"

import re

def solve(string):
    return re.sub(""[^a-zA-Z0-9]"", """", string)",0.8568,-3.710485793241
677,1,"

def solve(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        return True
    else:
        return False",0.9435,-2.2678257222800005
677,2,"

def solve(side1, side2, side3):
    if side1 + side2 > side3 and side2 + side3 > side1 and side1 + side3 > side2:
        return True
    else:
        return False",0.9252,-3.9648372567138
677,3,"

def solve(a, b, c):
    if (a + b > c) and (a + c > b) and (b + c > a):
        return True
    else:
        return False",0.9458,-2.4535891709869997
677,4,"

def solve(a,b,c):
    if a + b > c and b + c > a and a + c > b:
        return True
    else:
        return False",0.871,-5.110155706992996
677,5,"

def solve(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        return True
    else:
        return False",0.9435,-2.2678257222800005
678,1,"

def solve(string):
    return string.replace("" "", """")",0.9205,-0.9935085286000004
678,2,"

def solve(string):
    return string.replace("" "", """")",0.9205,-0.9935085286000004
678,3,"

def solve(string):
    return string.replace("" "","""")",0.7474,-3.4934377256000007
678,4,"

def solve(string):
    return string.replace("" "", """")",0.9205,-0.9935085286000004
678,5,"

def solve(str):
    return str.replace("" "", """")
    
# Test case
str = ""Hello World""
print(solve(str)) # Output: HelloWorld",0.5944,-16.648692062923004
679,1,"

def solve(dictionary, index):
  return list(dictionary.keys())[index]",0.7955,-3.43262692743
679,2,"

def solve(dictionary, index):
    return list(dictionary.keys())[index]",0.9146,-1.3398463576800002
679,3,"

def solve(dictionary, index):
    return list(dictionary.keys())[index]",0.9146,-1.3398463576800002
679,4,"

def solve(dictionary, index):
    key = list(dictionary.keys())[index]
    return dictionary[key]",0.8655,-3.032934937364
679,5,"

def solve(dictionary, index):
    keys = list(dictionary.keys())
    return dictionary[keys[index]]",0.912,-1.84127790522
680,1,"

def solve(nums):
    for i in range(len(nums)-1):
        if nums[i] >= nums[i+1]:
            return False
    return True",0.9016,-3.417320699798001
680,2,"

def solve(nums):
    for i in range(len(nums)-1):
        if nums[i+1] < nums[i]:
            return False
    return True",0.8532,-5.237826918282001
680,3,"

def solve(seq):
    for i in range(len(seq)-1):
        if seq[i] >= seq[i+1]:
            return False
    return True",0.9257,-2.5493789998730003
680,4,"

def solve(seq):
    if len(seq) < 2:
        return False
    for i in range(len(seq)-1):
        if seq[i] >= seq[i+1]:
            return False
    return True",0.8737,-6.2085062741340025
680,5,"

def solve(nums):
    for i in range(len(nums)-1):
        if nums[i+1] > nums[i]:
            continue
        else:
            return False
    return True",0.8828,-4.863456247246001
681,1,"

def solve(n):
    i = 2
    while i <= n:
        if n % i == 0:
            return i
        i += 1",0.919,-2.957568303881999
681,2,"

def solve(n):
    if n == 1:
        return 1
    for i in range(2, n+1):
        if n % i == 0:
            return i",0.864,-5.992069247399
681,3,"

def solve(n):
    i = 2
    while i <= n:
        if n % i == 0:
            return i
        i += 1",0.919,-2.957568303881999
681,4,"

def solve(num):
    # check if number is prime
    if num <= 1:
        return None
    # check if number is divisible by 2
    while num % 2 == 0:
        return 2
    # check for other prime divisors
    for i in range(3, int(num**0.5)+1, 2):
        if num % i == 0:
            return i
    # if no prime divisor found, return the number itself
    return num",0.8169,-21.845264627350105
681,5,"

def solve(num):
    #check if the number is less than 2
    if num < 2:
        return None
    #check if the number is divisible by 2
    if num % 2 == 0:
        return 2
    #iterate through odd numbers from 3 to the square root of the number
    for i in range(3, int(num**0.5)+1, 2):
        #check if the number is divisible by the current number
        if num % i == 0:
            return i
    #if no divisor is found, the number itself is the smallest prime divisor
    return num",0.8546,-21.679768765082397
682,1,"

def solve(list1, list2):
    return list(map(lambda x,y: x*y, list1, list2))",0.9248,-2.033977610731
682,2,"

def solve(list1, list2):
    return list(map(lambda x,y: x*y, list1, list2))",0.9248,-2.033977610731
682,3,"

def solve(list1, list2):
    return list(map(lambda x, y: x*y, list1, list2))",0.9384,-1.7165223959226998
682,4,"

def solve(list1, list2):
    return list(map(lambda x, y: x * y, list1, list2))",0.9422,-1.6680588449834997
682,5,"
def solve(list1, list2):
    return list(map(lambda x,y: x*y, list1, list2))",0.8336,-4.7308792596736
683,1,"

def solve(n):
    for i in range(1, int(n**0.5) + 1):
        remainder = n - i**2
        if int(remainder**0.5)**2 == remainder:
            return True
    return False",0.8396,-9.437854584264102
683,2,"

def solve(n):
    for i in range(1, int(n**0.5) + 1):
        if (n - i**2)**0.5 == int((n - i**2)**0.5):
            return True
    return False",0.9048,-5.6003965821796
683,3,"

def solve(n):
    for i in range(1, int(n**0.5)+1):
        if (n - i**2)**0.5 == int((n - i**2)**0.5):
            return True
    return False",0.907,-5.2688207706166
683,4,"

def solve(n):
    for i in range(1, int(n**0.5)+1):
        if (n - i*i)**0.5 == int((n - i*i)**0.5):
            return True
    return False",0.899,-5.534054299664101
683,5,"

def solve(num):
    for i in range(1, int(num**0.5)+1):
        if (num - i**2)**0.5 % 1 == 0:
            return True
    return False",0.8796,-6.158130224427699
684,1,"

def solve(string, char):
    count = 0
    for i in range(len(string)):
        if string[i] == char:
            count += 1
    return count",0.9674,-1.2586977535020003
684,2,"

def solve(string, char):
    count = 0
    for i in range(len(string)):
        if string[i] == char:
            count += 1
    return count
",0.8754,-5.1884965535020005
684,3,"

def solve(string, char):
    count = 0
    for i in range(len(string)):
        if string[i] == char:
            count += 1
    return count",0.9674,-1.2586977535020003
684,4,"

def solve(string, char):
    count = 0
    for letter in string:
        if letter == char:
            count += 1
    return count",0.9079,-3.2853766103043
684,5,"

def solve(string, char):
    count = 0
    for i in range(len(string)):
        if string[i] == char:
            count += 1
    return count * (len(string)//len(char)) + string.count(char * (len(string) % len(char)))",0.8406,-10.246736677629002
685,1,"

def solve(n):
    prime_sum = 0
    for num in range(2, n+1):
        prime = True
        for i in range(2, num):
            if num % i == 0:
                prime = False
                break
        if prime:
            prime_sum += num
    return prime_sum",0.8948,-7.7803209687020995
685,2,"

def solve(n):
    sum = 0 
    for num in range(2, n+1):
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break
            else:
                sum += num
    return sum",0.8722,-8.887274394323505
685,3,"

def solve(n):
    sum = 0
    for num in range(2, n+1):
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break
            else:
                sum += num
    return sum",0.9502,-3.323743460878
685,4,"

def solve(n):
    sum = 0
    for num in range(2, n+1):
        if num > 1:
            for i in range(2, num):
                if (num % i) == 0:
                    break
            else:
                sum = sum + num
    return sum",0.9182,-5.7205252088580005
685,5,"

def solve(n):
    sum = 0
    for num in range(2, n+1):
        if all(num%i!=0 for i in range(2, num)):
            sum += num
    return sum",0.8728,-6.395722581563799
686,1,"

def solve(lst):
    freq = {}
    for i in lst:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq",0.9454,-2.416129022011801
686,2,"

def solve(lst):
    freq = {}
    for elem in lst:
        if elem in freq:
            freq[elem] += 1
        else:
            freq[elem] = 1
    return freq",0.9459,-2.5029716999519995
686,3,"

def solve(lst):
    freq = {}
    for i in lst:
        if i in freq:
            freq[i] += 1
        else:
            freq[i] = 1
    return freq",0.9454,-2.416129022011801
686,4,"

def solve(lst):
    freq = {}
    for elem in lst:
        if elem in freq:
            freq[elem] += 1
        else:
            freq[elem] = 1
    return freq",0.9459,-2.5029716999519995
686,5,"

def solve(lst):
    freq = {}
    for elem in lst:
        if elem in freq:
            freq[elem] += 1
        else:
            freq[elem] = 1
    return freq",0.9459,-2.5029716999519995
687,1,"

def solve(a, b):
    if b == 0:
        return a
    else:
        return solve(b, a % b)",0.9618,-1.1692495737910005
687,2,"

def solve(a, b):
    if b == 0:
        return a
    else:
        return solve(b, a%b)",0.9096,-2.841048043451
687,3,"

def solve(a, b):
    if a == 0:
        return b
    return solve(b % a, a)",0.8834,-3.347813714958999
687,4,"

def solve(a, b):
    if b == 0:
        return a
    else:
        return solve(b, a % b)",0.9618,-1.1692495737910005
687,5,"

def solve(a, b):
    if b == 0:
        return a
    else:
        return solve(b, a % b)",0.9618,-1.1692495737910005
688,1,"

def solve(complex_num):
    return len(str(complex_num))",0.9274,-1.1309517575040002
688,2,"

def solve(complex_num):
    return len(str(complex_num))",0.9274,-1.1309517575040002
688,3,"

def solve(complex_num):
    return len(str(complex_num))",0.9274,-1.1309517575040002
688,4,"

def solve(complex_num):
    return abs(complex_num)",0.8008,-3.109714426343
688,5,"

def solve(complex_num):
    return len(str(complex_num))",0.9274,-1.1309517575040002
689,1,"

def solve(nums):
    jumps = 0
    curr_end = 0
    curr_max = 0
    for i in range(len(nums)-1):
        curr_max = max(curr_max, i + nums[i])
        if i == curr_end:
            jumps += 1
            curr_end = curr_max
    return jumps",0.8966,-7.750674195994999
689,2,"

def solve(arr):
    n = len(arr)
    jumps = [None] * n
    jumps[0] = 0
    for i in range(1, n):
        jumps[i] = float('inf')
        for j in range(0, i):
            if i <= j + arr[j]:
                jumps[i] = min(jumps[i], jumps[j] + 1)
    return jumps[n-1]",0.8298,-16.98042735855
689,3,"

def solve(arr):
    jumps = 0
    end = len(arr) - 1
    curr_max = 0
    next_max = 0
    
    for i in range(end):
        next_max = max(next_max, i + arr[i])
        
        if i == curr_max:
            jumps += 1
            curr_max = next_max
            
        if curr_max >= end:
            return jumps
            
    return -1",0.8515,-14.630410533361006
689,4,"

def solve(arr):
    n = len(arr)
    jumps = [float('inf')] * n
    jumps[0] = 0

    for i in range(1, n):
        for j in range(i):
            if arr[j] + j >= i:
                jumps[i] = min(jumps[i], jumps[j] + 1)
                break

    return jumps[-1]",0.8916,-9.640653528504997
689,5,"

def solve(arr):
  jumps = [float('inf')] * len(arr)
  jumps[0] = 0
  
  for i in range(1, len(arr)):
    for j in range(i):
      if arr[j] + j >= i:
        jumps[i] = min(jumps[i], jumps[j] + 1)
  
  return jumps[-1]",0.8778,-10.162456560725008
690,1,"

def solve(nums):
    result = 1
    for num in nums:
        result *= num
    return result",0.8797,-3.205041376438001
690,2,"

def solve(nums):
    result = 1
    for i in range(len(nums)-1):
        result *= nums[i] * nums[i+1]
    return result",0.9112,-3.349076875960999
690,3,"

def solve(lst):
    product = 1
    for i in range(len(lst)):
        product *= lst[i]
    return product ",0.7447,-8.547747882099003
690,4,"

def solve(lst):
    result = 1
    for i in range(len(lst)-1):
        result *= lst[i] * lst[i+1]
    return result",0.9288,-2.660436596217
690,5,"

def solve(lst):
    result = 1
    for i in range(len(lst)-1):
        result *= lst[i] * lst[i+1]
    return result",0.9288,-2.660436596217
691,1,"

def solve(tuples):
    groups = {}
    for t in tuples:
        if t[1] in groups:
            groups[t[1]].append(t[0])
        else:
            groups[t[1]] = [t[0]]
    return groups",0.9021,-5.5606804557680976
691,2,"

def solve(tuples):
    groups = {}
    for tup in tuples:
        if tup[1] not in groups:
            groups[tup[1]] = [tup[0]]
        else:
            groups[tup[1]].append(tup[0])
    return groups",0.9148,-5.2513081060376
691,3,"

def solve(tup_list):
    result = {}
    for tup in tup_list:
        if tup[1] not in result:
            result[tup[1]] = [tup[0]]
        else:
            result[tup[1]].append(tup[0])
    return result",0.9295,-4.460821391752801
691,4,"

def solve(tup_list):
    result = {}
    for tup in tup_list:
        if tup[1] in result:
            result[tup[1]].append(tup[0])
        else:
            result[tup[1]] = [tup[0]]
    return result",0.9362,-3.9534045063747
691,5,"

def solve(tuples): 
    result = {} 
    for tup in tuples: 
        if tup[1] in result: 
            result[tup[1]].append(tup[0]) 
        else: 
            result[tup[1]] = [tup[0]] 
    return result",0.8875,-7.7557830003666
692,1,"

def solve(n):
    factorial = 1
    for i in range(1, n+1):
        factorial *= i
    return factorial % 100",0.9101,-3.201910687935
692,2,"

def solve(n):
    factorial = 1
    for i in range(1, n + 1):
        factorial *= i
    return factorial % 100",0.8751,-4.671171049294001
692,3,"

def solve(n):
    factorial = 1
    for i in range(1, n+1):
        factorial *= i
    last_two_digits = factorial % 100
    return last_two_digits",0.9374,-2.777481866769
692,4,"

def solve(num):
    fact = 1
    for i in range(1, num+1):
        fact *= i
    return str(fact)[-2:]",0.8296,-6.723772692457
692,5,"

def solve(n):

    factorial = 1
    for i in range(1, n+1):
        factorial = factorial * i
    
    last_two_digits = factorial % 100

    return last_two_digits",0.7815,-11.095573716005994
693,1,"

import re

def solve(string):
    return re.sub(r""\s+"", "" "", string)",0.8699,-2.788470947807001
693,2,"

def solve(string):
    return re.sub(r'\s+', ' ', string)",0.7862,-4.089246665960001
693,3,"

import re

def solve(string):
    pattern = r""\s+"" #regex pattern to match one or more spaces
    string = re.sub(pattern, "" "", string) #replace all matched patterns with a single space
    return string",0.7529,-13.909358408188002
693,4,"

import re

def solve(string):
    return re.sub(r""\s+"", "" "", string)",0.8699,-2.788470947807001
693,5,"

def solve(string):
    return re.sub('\s+', ' ', string)",0.753,-4.5400758016000005
694,1,"

def solve(dict):
    unique_set = set()
    for value in dict.values():
        unique_set.update(value)
    return unique_set",0.6388,-12.54974731719
694,2,"

def solve(dict_values):
    unique_values = set()
    for values in dict_values.values():
        for val in values:
            unique_values.add(val)
    return unique_values",0.7988,-8.087363705213
694,3,"

def solve(dictionary):
    unique_values = set()
    for value_list in dictionary.values():
        for value in value_list:
            unique_values.add(value)
    return unique_values",0.8751,-4.8009636683
694,4,"

def solve(dictionary):

    unique_values = []

    for key in dictionary:
        if dictionary[key] not in unique_values:
            unique_values.append(dictionary[key])

    return unique_values",0.7696,-9.691461776602
694,5,"

def solve(dictionary):
    unique_values = []
    for values in dictionary.values():
        for value in values:
            if value not in unique_values:
                unique_values.append(value)
    return unique_values",0.9281,-3.0605048128359997
695,1,"

def solve():
    first_tuple = (1, 2, 3)
    second_tuple = (4, 5, 6)
    for i in range(len(first_tuple)):
        if second_tuple[i] <= first_tuple[i]:
            return False
    return True",0.8586,-8.690681409518998
695,2,"

def solve(tup1, tup2):
    for i in range(len(tup1)):
        if tup2[i] <= tup1[i]:
            return False
    return True",0.9719,-1.0820772925544997
695,3,"

def solve(tup1, tup2):
    for i in range(len(tup1)):
        if tup2[i] <= tup1[i]:
            return False
    return True ",0.8823,-4.885316892554499
695,4,"

def solve(tup1, tup2):
    for i in range(len(tup1)):
        if tup2[i] <= tup1[i]:
            return False
    return True",0.9719,-1.0820772925544997
695,5,"

def solve(tup1, tup2):
    for i in range(len(tup1)):
        if tup2[i] <= tup1[i]:
            return False
    return True",0.9719,-1.0820772925544997
696,1,"

def solve(list1, list2):
    zipped = list(zip(list1, list2))
    return zipped",0.8354,-4.496097903782201
696,2,"

def solve(list1, list2):
    zipped = []
    for i in range(min(len(list1), len(list2))):
        zipped.append(list1[i] + list2[i])
    return zipped",0.9099,-4.2491072290543
696,3,"

def solve(list1, list2):
    zipped_lists = []
    for i in range(len(list1)):
        zipped_lists.append(list(zip(list1[i], list2[i])))
    return zipped_lists",0.9192,-3.7048557840063014
696,4,"

def solve(list1, list2):
    result = []
    for i in range(len(list1)):
        result.append([list1[i], list2[i]])
    return result",0.8309,-6.8530545984483
696,5,"

def solve(list1, list2):
    result = []
    for i in range(len(list1)):
        temp = []
        for j in range(len(list1[i])):
            temp.append(list1[i][j])
            temp.append(list2[i][j])
        result.append(temp)
    return result",0.9365,-4.067294298244897
697,1,"

def solve(lst):
    return len(list(filter(lambda x: x%2 == 0, lst)))",0.9324,-1.540410966162
697,2,"

def solve(lst):
    return len(list(filter(lambda x: x%2==0, lst)))",0.8816,-2.647308209142
697,3,"

def solve(lst):
    return len(list(filter(lambda x: x%2 == 0, lst)))",0.9324,-1.540410966162
697,4,"

def solve(lst):
    return len(list(filter(lambda x: x % 2 == 0, lst)))",0.9469,-1.2560916532879998
697,5,"

def solve(lst):
    return len(list(filter(lambda x: x%2 == 0, lst)))",0.9324,-1.540410966162
698,1,"

def solve(dictionary):
    sorted_dict = {}
    tuple_keys = []
    
    for key in dictionary.keys():
        tuple_keys.append(key)
    
    tuple_keys.sort(key = lambda x: x[0] * x[1])
    
    for key in tuple_keys:
        sorted_dict[key] = dictionary[key]
    
    return sorted_dict",0.8011,-15.52815752359999
698,2,"

def solve(dictionary):
    sorted_dict = {}
    for key in sorted(dictionary, key=lambda x: x[0] * x[1]):
        sorted_dict[key] = dictionary[key]
    return sorted_dict",0.8699,-5.9951721021690005
698,3,"

def solve(dictionary):
    sorted_dict = {}
    sorted_keys = sorted(dictionary.keys(), key=lambda x: x[0]*x[1])
    for key in sorted_keys:
        sorted_dict[key] = dictionary[key]
    return sorted_dict",0.911,-4.662528251233001
698,4,"

def solve(dictionary):
    return dict(sorted(dictionary.items(), key=lambda x: x[0][0] * x[0][1]))",0.8736,-3.9187017805100006
698,5,"

def solve(dictionary):
    sorted_list = []
    for key in dictionary.keys():
        sorted_list.append((key, dictionary[key]))
    sorted_list.sort(key = lambda x: x[0])
    sorted_list.sort(key = lambda x: x[0][0] * x[0][1])
    sorted_dict = {}
    for item in sorted_list:
        sorted_dict[item[0]] = item[1]
    return sorted_dict",0.827,-17.091007417173003
699,1,"

def solve(s1, s2):
    count = 0
    for i in range(len(s1)):
        if s1[i] != s2[i]:
            count += 1
    return count // 2",0.9298,-3.4190001116123994
699,2,"

def solve(str1, str2):
    count = 0
    for i in range(len(str1)):
        if str1[i] != str2[i]:
            count += 1
    return(count//2)",0.8256,-9.007139118928803
699,3,"

def solve(str1, str2):
    swaps = 0
    for i in range(len(str1)):
        if str1[i] != str2[i]:
            swaps += 1
    return swaps",0.9078,-4.2563917113748015
699,4,"

def solve(str1, str2):
    count = 0
    # check if the lengths of the two strings are equal
    if len(str1) != len(str2):
        return -1
    # loop through the characters in the strings
    for i in range(len(str1)):
        # if the characters are not the same, increment the count
        if str1[i] != str2[i]:
            count += 1
    # return half the count as swapping two characters requires one swap
    return count // 2",0.748,-33.09806406318661
699,5,"

def solve(str1, str2):
    count = 0
    for i in range(len(str1)):
        if str1[i] != str2[i]:
            count += 1
    return count//2",0.9429,-2.703515682918802
700,1,"

def solve(lst, min, max):
    count = 0
    for num in lst:
        if num >= min and num <= max:
            count += 1
    return count",0.9252,-3.1112484046442996
700,2,"

def solve(lst, start, end):
    count = 0
    for elem in lst:
        if elem >= start and elem <= end:
            count += 1
    return count",0.8861,-4.835012259644999
700,3,"

def solve(lst, start, end):
    count = 0
    for num in lst:
        if num >= start and num <= end:
            count += 1
    return count",0.9438,-2.3147640561275
700,4,"

def solve(lst, lower, upper):
    count = 0
    for element in lst:
        if element >= lower and element <= upper:
            count += 1
    return count",0.886,-4.841267086485999
700,5,"

def solve(lst, min, max):
    count = 0
    for element in lst:
        if element >= min and element <= max:
            count += 1
    return count",0.8777,-5.2164063016052
701,1,"

def solve(arr):
    left_sum = 0
    right_sum = sum(arr)

    for i in range(len(arr)):
        right_sum -= arr[i]
        if left_sum == right_sum:
            return i
        left_sum += arr[i]

    return -1",0.908,-5.501848140177997
701,2,"

def solve(arr):
    left_sum = 0
    right_sum = sum(arr[1:])
    for i in range(len(arr)):
        if left_sum == right_sum:
            return i
        left_sum += arr[i]
        right_sum -= arr[i+1]
    return -1",0.9032,-6.211907395365001
701,3,"

def solve(arr):
    left_sum = 0
    right_sum = sum(arr)
    for i in range(len(arr)):
        right_sum -= arr[i]
        if left_sum == right_sum:
            return i
        left_sum += arr[i]
    return -1",0.9568,-2.5169403811225015
701,4,"

def solve(arr):
    left_sum = 0
    right_sum = sum(arr)
    
    for i in range(len(arr)):
        right_sum -= arr[i]
        
        if left_sum == right_sum:
            return i
        
        left_sum += arr[i]
    
    return -1",0.9385,-3.811163309731
701,5,"

def solve(arr):
    total_sum = sum(arr)
    left_sum = 0
    for i in range(len(arr)):
        total_sum -= arr[i]
        if left_sum == total_sum:
            return i
        left_sum += arr[i]
    return -1",0.954,-2.6829510193519996
702,1,"

def solve(arr, k):
    arr.sort()
    n = len(arr)
    i = 0
    j = 0
    res = n
    while i < n and j < n:
        if arr[j] - arr[i] > k:
            res = min(res, j - i)
            i += 1
        else:
            j += 1
    return res",0.8637,-12.305153610878
702,2,"

def solve(arr, k):
    arr.sort()
    count = 0
    for i in range(len(arr)-1):
        if arr[i+1] - arr[i] > k:
            count += 1
    return count",0.9128,-4.564240678382999
702,3,"

def solve(arr, k):
    arr.sort()
    count = 0
    for i in range(len(arr)-1):
        if arr[i+1] - arr[i] > k:
            count += 1
    return count",0.9128,-4.564240678382999
702,4,"

def solve(arr, k):
    arr.sort()
    i = 0
    j = 1
    count = 0
    while j < len(arr):
        if arr[j] - arr[i] > k:
            i += 1
            count += 1
        else:
            j += 1
    return count",0.8817,-9.063282997943002
702,5,"

def solve(arr, k):
    arr.sort()
    count = 0
    for i in range(len(arr)-1):
        if arr[i+1] - arr[i] > k:
            count += 1
        else:
            break
    return count",0.8538,-8.852560522693
703,1,"

def solve(dictionary, key):
    if key in dictionary:
        return True
    else:
        return False",0.9637,-0.8511210525710001
703,2,"

def solve(key, dictionary):
    if key in dictionary.keys():
        return True
    else:
        return False",0.8389,-4.214651736917999
703,3,"

def solve(dictionary, key):
    if key in dictionary:
        return True
    else:
        return False",0.9637,-0.8511210525710001
703,4,"

def solve(dictionary, key):
    if key in dictionary:
        return True
    else:
        return False",0.9637,-0.8511210525710001
703,5,"

def solve(dictionary, key):
    if key in dictionary:
        return True
    else:
        return False",0.9637,-0.8511210525710001
704,1,"

def solve(n):
    sum = 0
    for i in range(1,n):
        sum += (1/i)
    return sum",0.8688,-4.21866800176
704,2,"

def solve(n):
    sum = 0
    for i in range(1,n):
        sum += 1/i
    return sum",0.9417,-1.80243951512
704,3,"

def solve(n):
    sum = 0
    for i in range(1, n):
        sum += 1/i
    return sum",0.9606,-1.2464550898730002
704,4,"

def solve(n):
    sum = 0
    for i in range(1, n):
        sum += 1/i
    return sum",0.9606,-1.2464550898730002
704,5,"

def solve(n):
    sum = 0
    for i in range(1, n):
        sum += 1/i
    return sum",0.9606,-1.2464550898730002
705,1,"

def solve(list_of_lists):
    return sorted(list_of_lists, key=lambda x: (len(x), x))",0.8505,-3.886800662099001
705,2,"

def solve(lists):
    lists.sort(key = lambda x: (len(x), x))
    return lists",0.8572,-3.542985026911999
705,3,"

def solve(lst):
    lst.sort(key = lambda x: (len(x), x))
    return lst",0.8232,-4.280196336899
705,4,"

def solve(lists):
    lists.sort(key=lambda x: (len(x), x))
    return lists",0.9285,-1.631925528198
705,5,"

def solve(lists):
    lists.sort(key=lambda x: (len(x), x))
    return lists",0.9285,-1.631925528198
706,1,"

def solve(arr1, arr2):
    set1 = set(arr1)
    set2 = set(arr2)
    if set1.issubset(set2):
        return True
    else:
        return False",0.9312,-3.2768998005076013
706,2,"

def solve(arr1, arr2):
    for num in arr1:
        if num not in arr2:
            return False
    return True",0.9286,-2.2958418180930003
706,3,"

def solve(array1, array2):
    for i in range(len(array2)):
        if array2[i] not in array1:
            return False
    return True",0.846,-6.019913056426
706,4,"

def solve(array1, array2):
    for num in array1:
        if num not in array2:
            return False
    return True",0.8663,-4.448322570946999
706,5,"

def solve(arr1, arr2):
    set1 = set(arr1)
    set2 = set(arr2)
    if set1.issubset(set2):
        return True
    else:
        return False",0.9312,-3.2768998005076013
707,1,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        count += bin(i).count('1')
    return count",0.938,-2.3032964600024997
707,2,"

def solve(n):
    count = 0
    for num in range(1, n+1):
        count += bin(num).count('1')
    return count",0.8753,-4.7952123766873
707,3,"

def solve(n):
    count = 0
    for i in range(n+1):
        count += bin(i).count('1')
    return count",0.8684,-4.6551964903183
707,4,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        num = i
        while (num > 0):
            if (num % 2 == 1):
                count += 1
            num = num // 2
    return count",0.8592,-9.709940507471003
707,5,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        binary = bin(i)[2:]
        count += binary.count('1')
    return count",0.9226,-3.3847156148864013
708,1,"

def solve(string):
    return list(string)",0.9083,-0.961491274786
708,2,"

def solve(s):
    return list(s)",0.6868,-3.757602105716999
708,3,"

def solve(string):
    return list(string)",0.9083,-0.961491274786
708,4,"

def solve(string):
    return list(string)",0.9083,-0.961491274786
708,5,"

def solve(string):
    lst = list(string)
    return lst",0.8623,-2.074739542644
709,1,"

def solve(tup):
    dict = {}
    for i in tup:
        if i in dict:
            dict[i] += 1
        else:
            dict[i] = 1
    return dict",0.8724,-6.004618798231001
709,2,"

def solve(tuple):
    unique_dict = {}
    for value in tuple:
        if value in unique_dict:
            unique_dict[value] += 1
        else:
            unique_dict[value] = 1
    return unique_dict",0.8721,-6.570021813935503
709,3,"

def solve(tup):
    dict = {}
    for i in range(len(tup)):
        if tup[i] not in dict:
            dict[tup[i]] = 1
        else:
            dict[tup[i]] += 1
    return dict",0.8679,-7.647558625016
709,4,"

def solve(tuple):
    unique_keys = {}
    for value in tuple:
        if value in unique_keys:
            unique_keys[value] += 1
        else:
            unique_keys[value] = 1
    return unique_keys",0.9058,-4.7490316277180025
709,5,"

def solve(tup):
    unique_keys = {}
    for value in tup:
        if value not in unique_keys:
            unique_keys[value] = 1
        else:
            unique_keys[value] += 1
    return unique_keys",0.9134,-4.527973980445699
710,1,"

def solve(record):
    return (record[0], record[-1])",0.9018,-1.6542965815940005
710,2,"
def solve(record):
    return record[0], record[-1]",0.745,-4.416166668405
710,3,"

def solve(record):
    return (record[0], record[-1])",0.9018,-1.6542965815940005
710,4,"

def solve(record):
    return (record[0], record[-1])",0.9018,-1.6542965815940005
710,5,"

def solve(record):
    return record[0], record[-1]",0.8931,-1.696186045458
711,1,"

def solve(num):
    even_mult = 1
    odd_mult = 1
    num = str(num)
    for i in range(len(num)):
        if i % 2 == 0:
            even_mult *= int(num[i])
        else:
            odd_mult *= int(num[i])
    if even_mult == odd_mult:
        return True
    else:
        return False",0.8894,-9.377342911807304
711,2,"
def solve(num):
    even_prod = 1
    odd_prod = 1
    
    # loop through the digits of the number
    while num > 0:
        # get the last digit
        digit = num % 10
        
        # check if the digit is at an even or odd position
        if digit % 2 == 0:
            # update the product of even digits
            even_prod *= digit
        else:
            # update the product of odd digits
            odd_prod *= digit
        
        # remove the last digit from the number
        num //= 10
    
    # check if the product of even and odd digits is equal
    if even_prod == odd_prod:
        return True
    else:
        return False",0.8589,-23.73101666540902
711,3,"

def solve(num):
    even_product = 1
    odd_product = 1
    num_str = str(num)
    for i in range(len(num_str)):
        if i % 2 == 0:
            even_product *= int(num_str[i])
        else:
            odd_product *= int(num_str[i])
    return even_product == odd_product",0.9094,-6.9305612571432995
711,4,"

def solve(num):
    digits = [int(x) for x in str(num)]
    even_product = 1
    odd_product = 1
    for i in range(len(digits)):
        if i % 2 == 0:
            even_product *= digits[i]
        else:
            odd_product *= digits[i]
    if even_product == odd_product:
        return True
    else:
        return False",0.9333,-5.864054787000601
711,5,"

def solve(num):
    even = 1
    odd = 1
    digits = [int(i) for i in str(num)]
    for i in range(len(digits)):
        if i % 2 == 0:
            even *= digits[i]
        else:
            odd *= digits[i]
    if even == odd:
        return True
    else:
        return False",0.9076,-7.657094514183001
712,1,"

def solve(list_of_lists):
    new_list = []
    for l in list_of_lists:
        if l not in new_list:
            new_list.append(l)
    return new_list",0.8624,-5.6252354592869995
712,2,"

def solve(list_of_lists):
    new_list = []
    for lst in list_of_lists:
        if lst not in new_list:
            new_list.append(lst)
    return new_list",0.9081,-3.662541841651
712,3,"

def solve(lst):
    new_lst = []
    for sublist in lst:
        if sublist not in new_lst:
            new_lst.append(sublist)
    return new_lst",0.8937,-3.9319082593070007
712,4,"

def solve(lst):
    seen = set()
    return [l for l in lst if not (tuple(l) in seen or seen.add(tuple(l)))]
",0.6613,-13.649352454983005
712,5,"

def solve(list_of_lists):
    new_list = []
    for lst in list_of_lists:
        if lst not in new_list:
            new_list.append(lst)
    return new_list",0.9081,-3.662541841651
713,1,"

def solve(tup):
    values = ['A', 'T', 'G', 'C']
    for i in tup:
        if i not in values:
            return False
    return True",0.7525,-11.659681374616005
713,2,"

def solve(tup):
    valid_values = set([""a"", ""b"", ""c""]) # set of valid values
    for val in tup:
        if val not in valid_values:
            return False
    return True",0.73,-14.788725039104005
713,3,"

def solve(tuple):
    for i in tuple:
        if i == None:
            return False
    return True",0.7444,-7.0846148732769985
713,4,"

def solve(tup):
    valid_values = [""a"", ""b"", ""c""]
    for value in tup:
        if value not in valid_values:
            return False
    return True",0.8413,-6.913691060861
713,5,"

def solve(tup):
    valid_values = [1, 2, 3, 4, 5]
    for val in tup:
        if val not in valid_values:
            return False
    return True",0.8798,-5.889405279836001
714,1,"

def solve(n):
    # Initially, count is set to 0
    count = 0
    
    # Loop through prime factors of n
    for i in range(2, n+1):
        if n % i == 0:
            # Check if i is a prime number
            is_prime = True
            for j in range(2, i):
                if i % j == 0:
                    is_prime = False
                    break
            
            # If i is a prime number, increase count and divide n by i
            if is_prime:
                count += 1
                n //= i
                
                # Keep dividing n by i until n is no longer divisible by i
                while n % i == 0:
                    n //= i
                    
    return count",0.0,-10031.59343465971
714,2,"

def solve(n):
    count = 0
    while n % 2 == 0:
        count += 1
        n = n // 2
    i = 3
    while i <= n:
        while n % i == 0:
            count += 1
            n = n // i
        i += 2
    return count",0.87,-10.865000151744
714,3,"

def solve(num):
    # initialize a set to store distinct prime factors
    primes = set()
    # loop through numbers from 2 to num
    for i in range(2, num+1):
        # check if i is a prime factor of num
        if num % i == 0:
            # if i is a prime factor, check if it is already in the set
            if i not in primes:
                # if not, add it to the set
                primes.add(i)
                # divide num by i until it is no longer divisible
                while num % i == 0:
                    num = num // i
    # return the length of the set, which represents the number of distinct prime factors
    return len(primes)",0.8508,-25.698628732016303
714,4,"

def solve(n):
    count = 0
    for i in range(2, n+1):
        if n%i == 0:
            prime = True
            for j in range(2, i):
                if i%j == 0:
                    prime = False
                    break
            if prime:
                count += 1
    return count",0.8698,-10.597880238087
714,5,"

def solve(num):
    count = 0
    while num % 2 == 0:
        count += 1
        num = num / 2
    for i in range(3, int(num**0.5) + 1, 2):
        while num % i == 0:
            count += 1
            num = num / i
    if num > 2:
        count += 1
    return count",0.8827,-11.857441003795
715,1,"

def solve(string):
    tuple_list = []
    for num in string.split():
        tuple_list.append(int(num))
    return tuple(tuple_list)",0.8452,-5.045221460945003
715,2,"

def solve(string):
    return tuple(map(int, string.split()))",0.7478,-4.06830806235
715,3,"

def solve(string):
    nums = tuple(map(int, string.split()))
    return nums",0.721,-5.888951897659999
715,4,"

def solve(string):
    nums = tuple(int(num) for num in string.split())
    return nums",0.7594,-5.779739427731599
715,5,"

def solve(string):
    return tuple(int(num) for num in string.split())",0.7891,-4.026410451249199
716,1,"

def solve(side1, side2):
    perimeter = 2 * (side1 + side2)
    return perimeter",0.868,-3.5389094029560004
716,2,"

def solve(side, diagonal):
    perimeter = side*4
    return perimeter",0.6653,-6.928310765600002
716,3,"

def solve(side, diag):
    return 2 * side + 2 * diag",0.7333,-5.5839293439
716,4,"

def solve(side, diag):
    perimeter = 2 * (side + diag)
    return perimeter",0.8179,-4.220882626170001
716,5,"

def solve(a, b):
    return 2 * (a + b)",0.8453,-2.8577812203499997
717,1,"

def solve(data):
    mean = sum(data)/len(data)
    sum_sq_diff = 0
    for i in range(len(data)):
        sum_sq_diff += (data[i] - mean)**2
    variance = sum_sq_diff/len(data)
    std_dev = variance**0.5
    return std_dev",0.8297,-12.6985593697275
717,2,"

def solve(values):
    mean = sum(values) / len(values)
    squared_diffs = [(x-mean)**2 for x in values]
    variance = sum(squared_diffs) / len(values)
    std_dev = variance ** 0.5
    return std_dev",0.8291,-10.8667894981173
717,3,"

def solve(num_list):
    mean = sum(num_list) / len(num_list)
    squared_diff = [(x-mean)**2 for x in num_list]
    variance = sum(squared_diff) / len(num_list)
    std_dev = variance ** 0.5
    return std_dev",0.8523,-9.749265028892498
717,4,"

import math

def solve(data):
    n = len(data)
    mean = sum(data) / n
    deviations = [(x - mean) ** 2 for x in data]
    variance = sum(deviations) / n
    std_dev = math.sqrt(variance)
    return std_dev",0.8737,-8.370088866693003
717,5,"

def solve(nums):
    mean = sum(nums) / len(nums)
    variances = [(x - mean)**2 for x in nums]
    variance = sum(variances) / len(variances)
    sd = variance ** 0.5
    return sd",0.7875,-13.139127286318502
718,1,"
def solve(lst):
    new_lst = []
    for i in range(len(lst)):
        if i % 2 == 0:
            new_lst.append(lst[i])
    return new_lst",0.8762,-5.1536772362319985
718,2,"

def solve(lst):
    new_lst = []
    for i in range(0, len(lst), 2):
        new_lst.append(lst[i])
    return new_lst",0.939,-2.203509057779
718,3,"

def solve(lst):
    return [lst[i] for i in range(len(lst)) if i % 2 == 0]",0.8713,-3.720337051030499
718,4,"

def solve(lst):
    new_lst = []
    for i in range(0, len(lst), 2):
        new_lst.append(lst[i])
    return new_lst",0.939,-2.203509057779
718,5,"

def solve(lst):
    new_lst = []
    for i in range(len(lst)):
        if i % 2 == 0:
            new_lst.append(lst[i])
    return new_lst",0.9428,-2.2991657735199995
719,1,"

def solve(string):
    import re
    pattern = r'a[b]*'
    match = re.search(pattern, string)
    if match:
        return True
    else:
        return False",0.8872,-4.7890569663789995
719,2,"

def solve(string):
    import re
    pattern = ""ab*""
    matched = re.match(pattern, string)
    if matched:
        return True
    else:
        return False",0.7828,-9.550952464065997
719,3,"

def solve(string):
    import re
    pattern = 'ab*'
    match = re.search(pattern, string)
    if match:
        return True
    else:
        return False",0.8892,-4.577767901914001
719,4,"

def solve(string):
    import re
    if re.search(""ab*"", string):
        return True
    else:
        return False",0.8665,-4.012839570507
719,5,"

def solve(string):
    import re
    if re.search(""ab*"", string):
        return True
    else:
        return False",0.8665,-4.012839570507
720,1,"

def solve(tup, dic):
    tup = list(tup)
    tup.append(dic)
    return tuple(tup)",0.8513,-4.186230119119001
720,2,"

def solve(tup, dict):
    tup = list(tup)
    tup.append(dict)
    tup = tuple(tup)
    return tup",0.891,-3.4616085390469995
720,3,"

def solve(tup, dict):
    tup_list = list(tup)
    tup_list.append(dict)
    return tuple(tup_list)",0.856,-4.507811197670301
720,4,"

def solve(tup, dict):
    return tup + (dict,)",0.8071,-3.215266301014001
720,5,"

def solve(my_tuple, my_dict):
    my_list = list(my_tuple)
    my_list.append(my_dict)
    return tuple(my_list)",0.8361,-5.370218562495999
721,1,"

def solve(matrix):
    n = len(matrix)
    max_avg = float('-inf')
    path = []
    
    for i in range(n):
        for j in range(n):
            if i == 0 and j == 0:
                continue
            elif i == 0:
                matrix[i][j] += matrix[i][j-1]
            elif j == 0:
                matrix[i][j] += matrix[i-1][j]
            else:
                matrix[i][j] += max(matrix[i-1][j], matrix[i][j-1])
    
    i = n-1
    j = n-1
    while i > 0 or j > 0:
        path.append((i, j))
        if i == 0:
            j -= 1
        elif j == 0:
            i -= 1
        else:
            if matrix[i-1][j] > matrix[i][j-1]:
                i -= 1
            else:
                j -= 1
    
    path.append((0, 0))
    path.reverse()
    return path, matrix[n-1][n-1] / n",0.9174,-21.02646153192341
721,2,"

def solve(matrix):
    n = len(matrix)
    max_avg = 0
    path = []

    #check for empty matrix
    if n == 0:
        return path

    #calculate the average for each path starting from the top left corner to the bottom right corner
    for i in range(n):
        for j in range(n):
            #initialize current path and sum
            curr_path = [(i,j)]
            curr_sum = matrix[i][j]
            #calculate the sum and add the next position to the current path
            while i < n-1 or j < n-1:
                if i == n-1:
                    j += 1
                elif j == n-1:
                    i += 1
                else:
                    #check which direction (right or down) has a higher value and update the position and current sum accordingly
                    if matrix[i+1][j] > matrix[i][j+1]:
                        i += 1
                    else:
                        j += 1
                #update the current sum and path
                curr_sum += matrix[i][j]
                curr_path.append((i,j))
            #calculate the average for the current path
            curr_avg = curr_sum / len(curr_path)
            #update the maximum average and path if the current average is higher
            if curr_avg > max_avg:
                max_avg = curr_avg
                path = curr_path
    return path",0.0,-10067.236292477668
721,3,"

def solve(matrix):
    n = len(matrix)
    max_avg = float('-inf')
    max_path = []
    for i in range(n):
        for j in range(n):
            if i == 0 and j == 0:
                path = [[matrix[i][j]]]
            else:
                path = []
                if i > 0:
                    for p in max_path:
                        path.append(p + [matrix[i][j]])
                if j > 0:
                    for p in max_path:
                        path.append(p + [matrix[i][j]])

            max_path = path
            for p in max_path:
                avg = sum(p) / len(p)
                if avg > max_avg:
                    max_avg = avg
                    max_path = [p]
                elif avg == max_avg:
                    max_path.append(p)

    return max_path[0]",0.8777,-23.478596282815
721,4,"

def solve(matrix):
    n = len(matrix)
    max_avg = -float('inf')
    result = []
    for i in range(n):
        for j in range(n):
            if i == 0 and j == 0:
                dp = [[matrix[i][j]]]
            elif i == 0:
                dp[i].append(dp[i][j - 1] + matrix[i][j])
            elif j == 0:
                dp.append([dp[i - 1][j] + matrix[i][j]])
            else:
                dp[i].append(max(dp[i][j - 1], dp[i - 1][j]) + matrix[i][j])
            if i == n - 1 and j == n - 1:
                avg = dp[i][j] / (i + j + 1)
                if avg > max_avg:
                    max_avg = avg
                    result = dp[i][:j + 1]
    return result",0.8793,-25.98399560521047
721,5,"

def solve(matrix):
    n = len(matrix)
    dp = [[0 for i in range(n)] for j in range(n)]
    dp[0][0] = matrix[0][0]
    for i in range(1, n):
        dp[0][i] = dp[0][i-1] + matrix[0][i]
        dp[i][0] = dp[i-1][0] + matrix[i][0]
    for i in range(1, n):
        for j in range(1, n):
            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]
    return dp[n-1][n-1]/(2*n-1)",0.935,-10.752739057094496
722,1,"

def solve(students):
    filtered = {}
    for student, dimensions in students.items():
        filtered[student] = (dimensions[0], dimensions[1])
    return filtered",0.7992,-8.294894232027001
722,2,"

def solve(students):
    filtered = {}
    for key, value in students.items():
        if type(value) == dict:
            if ""height"" in value.keys() and ""width"" in value.keys():
                filtered[key] = (value[""height""], value[""width""])
    return filtered",0.8075,-13.045524421151
722,3,"

def solve(students):
    filtered = {}
    for key, value in students.items():
        if key == 'height' or key == 'width':
            filtered[key] = value
    return filtered",0.8845,-5.153175917703001
722,4,"

def solve(students):
    heights = []
    widths = []
    
    for student in students.values():
        heights.append(student['height'])
        widths.append(student['width'])
        
    return heights, widths",0.8113,-8.782304443483
722,5,"

def solve(students):
    filtered_dict = {}
    for key, value in students.items():
        if key == 'height' or key == 'width':
            filtered_dict[key] = value
    return filtered_dict",0.8609,-6.741369564145997
723,1,"

def solve(list1, list2):
    pair_count = 0
    for i in list1:
        pair_count += list2.count(i)
    return pair_count",0.7465,-10.524686176962602
723,2,"

def solve(list1, list2):
    list1_map = map(lambda x: (x, list1.count(x)), list1)
    list2_map = map(lambda x: (x, list2.count(x)), list2)
    
    pairs = 0
    
    for x in list1_map:
        for y in list2_map:
            if x[0] == y[0] and x[1] == y[1]:
                pairs += 1
    
    return pairs",0.8534,-16.170057206368597
723,3,"

def solve(list1, list2):
    count = 0
    pairs = list(map(lambda x,y: (x,y), list1, list2))
    for pair in pairs:
        if pair[0] == pair[1]:
            count += 1
    return count",0.9179,-5.1424290498807
723,4,"

def solve(list1, list2):
    count = 0
    map1 = map(list1.count, list1)
    map2 = map(list2.count, list2)
    for i,j in zip(map1, map2):
        if i == j:
            count += 1
    return count",0.858,-10.109543354079603
723,5,"

def solve(list1, list2):
    count = 0
    pairs = list(zip(list1, list2))
    pairs_map = map(lambda x: (x[0], x[1]), pairs)
    for pair in pairs_map:
        if pair[0] == pair[1]:
            count += 1
    return count",0.8738,-9.709297674453602
724,1,"

def solve(base, power):
    result = 0
    num = base ** power
    while num > 0:
        digit = num % 10
        result += digit
        num //= 10
    return result",0.9315,-3.475807340402
724,2,"

def solve(base, power):
    sum = 0
    num = base ** power
    while num > 0:
        digit = num % 10
        sum += digit
        num //= 10
    return sum",0.9109,-4.5736716063200005
724,3,"

def solve(base, power):
    result = 0
    num = base ** power
    while num > 0:
        digit = num % 10
        result += digit
        num = num // 10
    return result",0.9381,-3.2590003685069995
724,4,"

def solve(base, power):
    sum = 0
    result = base ** power
    while result > 0:
        sum += result % 10
        result //= 10
    return sum",0.8865,-5.298415667542999
724,5,"

def solve(base, power):
    result = 0
    num = base ** power
    while num > 0:
        digit = num % 10
        result += digit
        num = num // 10
    return result",0.9381,-3.2590003685069995
725,1,"

import re

def solve(string):
    pattern = r'""(.*?)""'
    return re.findall(pattern, string)",0.8316,-4.7933382002856
725,2,"

import re

def solve(string):
    pattern = r'""(.*?)""'
    return re.findall(pattern, string)",0.8316,-4.7933382002856
725,3,"

import re

def solve(string):
    pattern = r'""(.*?)""'
    matches = re.findall(pattern, string)
    return matches",0.9084,-2.8821549902022996
725,4,"

import re

def solve(string):
    values = re.findall(r'""(.*?)""', string)
    return values",0.8061,-5.387843390047499
725,5,"

import re

def solve(string):
    pattern = r'""(.*?)""'
    matches = re.findall(pattern, string)
    return matches",0.9084,-2.8821549902022996
726,1,"

def solve(tup):
    result = ()
    for i in range(len(tup)-1):
        result += (tup[i] * tup[i+1],)
    return result",0.9379,-2.500119594552499
726,2,"

def solve(input_tuple):
    result = ()
    for i in range(len(input_tuple)-1):
        result = result + (input_tuple[i] * input_tuple[i+1],)
    return result",0.8641,-6.133196303656
726,3,"

def solve(t):
    res = ()
    for i in range(len(t)-1):
        res += (t[i] * t[i+1],)
    return res",0.8222,-7.045699573165002
726,4,"

def solve(tup):
    result = ()
    for i in range(len(tup)-1):
        result += (tup[i] * tup[i+1],)
    return result",0.9379,-2.500119594552499
726,5,"

def solve(tup):
    result = ()
    for i in range(len(tup)-1):
        result += (tup[i]*tup[i+1],)
    return result",0.9231,-3.1205958610079993
727,1,"

import re
def solve(string):
    return re.sub(""[^a-zA-Z0-9]"", """", string)",0.8213,-4.723654498183
727,2,"

import re

def solve(string):
    return re.sub(r'[^a-zA-Z0-9]', '', string)",0.8851,-3.052313394604999
727,3,"

import re

def solve(s):
    return re.sub('[^a-zA-Z0-9]', '', s)",0.8479,-3.959148030463
727,4,"

import re

def solve(string):
    pattern = r'[^a-zA-Z0-9]'
    return re.sub(pattern, '', string)",0.8574,-4.6141930419813
727,5,"
def solve(string):
    return re.sub(r'[^a-zA-Z0-9]', '', string)",0.7233,-7.126639672881001
728,1,"

def solve(list1, list2):
    return sum(list1) + sum(list2)",0.8766,-2.634809613118
728,2,"

def solve(list1, list2):
    result = []
    for i in range(len(list1)):
        result.append(list1[i] + list2[i])
    return result",0.9223,-2.9925823409240007
728,3,"

def solve(list1, list2):
    sum = 0
    for num in list1:
        sum += num
    for num in list2:
        sum += num
    return sum",0.9593,-1.7454843724996
728,4,"

def solve(list1, list2):
    sum = 0
    for element in list1:
        sum += element
    for element in list2:
        sum += element
    return sum",0.9266,-3.2037613569286014
728,5,"

def solve(list1, list2):
    result = []
    for i in range(len(list1)):
        result.append(list1[i] + list2[i])
    return result",0.9223,-2.9925823409240007
729,1,"

def solve(list1, list2):
    return list(map(lambda x, y: x + y, list1, list2))",0.952,-1.3759008473808003
729,2,"

def solve(list1, list2):
    return list(map(lambda x,y: x+y, list1, list2))",0.9336,-1.7857848343048
729,3,"
def solve(list1, list2):
    return list(map(lambda x,y: x+y, list1, list2))",0.8363,-4.6482694072882
729,4,"

def solve(list1, list2):
    return list(map(lambda x, y: x + y, list1, list2))",0.952,-1.3759008473808003
729,5,"

def solve(list1, list2):
    return list(map(lambda x,y: x+y, list1, list2))",0.9336,-1.7857848343048
730,1,"

def solve(input_list):
    output_list = []
    for i in range(len(input_list)):
        if i == 0:
            output_list.append(input_list[i])
        elif input_list[i] != input_list[i-1]:
            output_list.append(input_list[i])
    return output_list",0.9128,-5.4712462999545
730,2,"

def solve(lst):
    new_lst = []
    for i in range(len(lst)):
        if i == 0 or lst[i] != lst[i-1]:
            new_lst.append(lst[i])
    return new_lst",0.9489,-2.361744040609
730,3,"

def solve(lst):
    new_lst = []
    for i in range(len(lst)):
        if i == 0 or lst[i] != lst[i-1]:
            new_lst.append(lst[i])
    return new_lst",0.9489,-2.361744040609
730,4,"

def solve(lst):
  new_lst = []
  for i in range(len(lst)):
    if i == 0:
      new_lst.append(lst[i])
    elif lst[i] != lst[i-1]:
      new_lst.append(lst[i])
  return new_lst",0.9015,-5.601436361285999
730,5,"

def solve(lst):
    new_lst = []
    for i in range(len(lst)):
        if i == 0 or lst[i] != lst[i-1]:
            new_lst.append(lst[i])
    return new_lst",0.9489,-2.361744040609
731,1,"

def solve(radius, height):
    import math
    lateral_surface_area = math.pi * radius * math.sqrt((radius ** 2) + (height ** 2))
    return lateral_surface_area",0.8655,-5.924376374329
731,2,"

def solve(radius, height):
    slant_height = (radius**2 + height**2)**0.5
    lateral_surface_area = math.pi * radius * slant_height
    return lateral_surface_area",0.9146,-3.925558483492101
731,3,"

def solve(radius, height):
    import math
    lateral_surface_area = math.pi * radius * math.sqrt((radius**2) + (height**2))
    return lateral_surface_area",0.8811,-4.937743753914998
731,4,"

def solve(r, h):
    from math import pi, sqrt
    lateral_area = pi * r * sqrt(r**2 + h**2)
    return lateral_area",0.7641,-9.686150452292004
731,5,"

def solve(radius, height):
    slant_height = ((radius**2) + (height**2))**(1/2)
    lateral_surface_area = (3.14159 * radius * slant_height)
    return lateral_surface_area",0.8021,-11.028297233212
732,1,"

def solve(string):
    new_string = string.replace("" "", "":"").replace("","", "":"").replace(""."", "":"")
    return new_string",0.8786,-3.4950165590539997
732,2,"

def solve(s):
    return s.replace(' ', ':').replace(',', ':').replace('.', ':')",0.7852,-5.077557864629999
732,3,"

def solve(string):
    string = string.replace("" "", "":"")
    string = string.replace("","", "":"")
    string = string.replace(""."", "":"")
    return string",0.9227,-2.655303827772
732,4,"

def solve(string):
    replaced = string.replace("" "", "":"")
    replaced = replaced.replace("","", "":"")
    replaced = replaced.replace(""."", "":"")
    return replaced",0.8053,-7.1464413375059985
732,5,"

def solve(string):
    return string.replace("" "", "":"").replace("","", "":"").replace(""."", "":"")",0.9134,-1.90152614531
733,1,"

def solve(arr, num):
    start = 0
    end = len(arr) - 1
    while start <= end:
        mid = (start + end) // 2
        if arr[mid] == num:
            return mid
        elif arr[mid] > num:
            end = mid - 1
        else:
            start = mid + 1
    return -1",0.9354,-5.609778439934898
733,2,"

def solve(arr, num):
    left = 0
    right = len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == num:
            return mid
        elif arr[mid] < num:
            left = mid + 1
        else:
            right = mid - 1
    return -1",0.9468,-4.5934668324129975
733,3,"

def solve(arr, target):
    left = 0
    right = len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target and (mid == 0 or arr[mid - 1] != target):
            return mid
        elif arr[mid] >= target:
            right = mid - 1
        else:
            left = mid + 1
    
    return -1",0.8885,-11.708661732552002
733,4,"

def solve(arr, target):
    left = 0
    right = len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            while mid > 0 and arr[mid - 1] == target:
                mid -= 1
            return mid
        elif target < arr[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return -1",0.8935,-11.827678576605996
733,5,"

def solve(arr, num):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == num:
            return mid
        elif arr[mid] < num:
            low = mid + 1
        else:
            high = mid - 1
    return -1",0.9546,-3.906119063993001
734,1,"

def solve(arr):
    total = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)+1):
            subarr = arr[i:j]
            product = 1
            for num in subarr:
                product *= num
            total += product
    return total",0.9299,-4.867891108436696
734,2,"

def solve(arr):
    #initialize sum variable
    total = 0
    
    #loop through all possible subarrays
    for i in range(len(arr)):
        for j in range(i, len(arr)):
            #calculate product of subarray
            prod = 1
            for k in range(i, j+1):
                prod *= arr[k]
            
            #add product to sum
            total += prod
    
    #return sum
    return total",0.827,-18.231962591209
734,3,"

def solve(arr):
    total = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)+1):
            subarray = arr[i:j]
            product = 1
            for num in subarray:
                product *= num
            total += product
    return total",0.9447,-3.8102718121495993
734,4,"

def solve(arr):
    total = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)+1):
            total += sum(arr[i:j])*reduce(lambda x, y: x*y, arr[i:j])
    return total",0.8841,-7.024514909326599
734,5,"

def solve(arr):
    n = len(arr)
    result = 0
    for i in range(n):
        for j in range(i+1, n+1):
            subarray = arr[i:j]
            product = 1
            for num in subarray:
                product *= num
            result += product
    return result",0.9224,-5.738477895338502
735,1,"

def solve(n):
    first_bit = n & 1
    last_bit = n & (1 << (n.bit_length() - 1))
    toggle_bits = n ^ ((1 << (n.bit_length() - 1)) - 1)
    return first_bit | toggle_bits | last_bit",0.8674,-9.1040932458913
735,2,"

def solve(num):
    mask = 0
    temp = num
    while temp > 0:
        temp = temp >> 1
        mask = (mask << 1) + 1
    mask = mask ^ (1 << 1)
    mask = mask ^ (1 << (len(bin(num)) - 3))
    return num ^ mask",0.8159,-15.665403864272996
735,3,"

def solve(n):
  first_bit = n & 0x01
  last_bit = n & 0x80000000
  middle_bits = n & 0x7FFFFFFE
  inverted_middle_bits = ~middle_bits
  return first_bit | inverted_middle_bits | last_bit",0.7352,-19.072316344227005
735,4,"

def solve(num):
    mask = num & 0b01 # get first bit
    toggle = num & 0b10 # get second bit
    toggle = toggle >> 1 # shift it to the first bit position
    for i in range(2, num.bit_length()-1): # loop through bits except first and last
        mask = mask << 1 # shift mask left by one bit
        mask = mask | toggle # combine mask with toggle
    result = num ^ mask # toggle bits
    return result",0.6131,-54.80012161653498
735,5,"

def solve(n):
    mask = n & 1
    n = n >> 1
    while n:
        mask = (mask << 1) + 1
        n = n >> 1
    return n ^ (~mask)
",0.7208,-17.351703874088
736,1,"

def solve(arr, val):
    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == val:
            return mid
        elif arr[mid] < val:
            left = mid + 1
        else:
            right = mid - 1

    return left",0.9141,-7.456018058057
736,2,"

def solve(arr, val):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2
        if val <= arr[mid]:
            high = mid - 1
        else:
            low = mid + 1
    return low",0.8735,-9.468221553115
736,3,"

def solve(arr, target):
    left = 0
    right = len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return left",0.9419,-4.253119097974003
736,4,"

def solve(arr, val):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] < val:
            low = mid + 1
        else:
            high = mid - 1
    return low",0.9502,-3.628290532835
736,5,"

def solve(arr, val):
    low = 0
    high = len(arr)
    while low < high:
        mid = (low + high) // 2
        if arr[mid] < val:
            low = mid + 1
        else:
            high = mid
    return low ",0.8626,-9.603523193697
737,1,"

def solve(string):
    if re.match(r'^[aeiou]', string.lower()):
        return True
    else:
        return False ",0.6999,-10.349004091855
737,2,"

import re

def solve(string):
    pattern = ""^[aeiouAEIOU]""
    if re.match(pattern, string):
        return True
    else:
        return False",0.8839,-4.5679531972589995
737,3,"

def solve(string):
    return re.match(r'^[aeiouAEIOU]', string) is not None",0.76,-6.310810252759001
737,4,"

def solve(string):
    pattern = ""^[aeiouAEIOU].*""
    if re.match(pattern, string):
        return True
    else:
        return False",0.8698,-5.021670962050999
737,5,"

def solve(string):
    import re
    pattern = ""^[aeiouAEIOU]""
    if re.match(pattern, string):
        return True
    else:
        return False",0.8576,-5.839324688450002
738,1,"
def solve(n):
    sum = 0
    for i in range(n):
        sum += 1 / (2 ** i)
    return sum",0.846,-5.352348873814
738,2,"

def solve(n):
    sum = 0
    for i in range(n):
        sum += 1 / pow(2, i)
    return sum",0.8467,-5.492344504707001
738,3,"

def solve(n):
    return (1 - pow(2, n)) / (1 - 2)",0.762,-6.251959456843001
738,4,"

def solve(n):
    return (1 - (1/2)**(n-1))/(1 - 1/2)",0.7945,-6.212717943224001
738,5,"

def solve(n):
    sum = 0
    for i in range(n):
        sum += 1 / (2 ** i)
    return sum",0.9086,-3.068033634421001
739,1,"

def solve(n):
    triangular_num = 1
    index = 1
    while len(str(triangular_num)) < n:
        index += 1
        triangular_num += index
    return index",0.9035,-4.565942063565002
739,2,"

def solve(n):
    num = 1
    index = 1
    while len(str(num)) < n:
        index += 1
        num = (index*(index+1))/2
    return index",0.879,-6.063562119153
739,3,"

def solve(n):
    index = 1
    num = 1
    while len(str(num)) < n:
        num = (index * (index + 1)) // 2
        index += 1
    return index - 1",0.8661,-7.761568091223299
739,4,"

def solve(n):
    num = 1
    index = 1
    while len(str(num)) < n:
        index += 1
        num += index
    return index",0.9205,-3.314864416997999
739,5,"

def solve(n):
    index = 1
    triangular_num = 1
    while len(str(triangular_num)) < n:
        index += 1
        triangular_num += index
    return index",0.9207,-3.7202260591945993
740,1,"

def solve(tup):
    dict = {}
    for i in range(0, len(tup), 2):
        dict[tup[i]] = tup[i+1]
    return dict",0.9452,-2.2533561104743
740,2,"

def solve(tuple):
    dict = {}
    for i in range(0, len(tuple), 2):
        dict[tuple[i]] = tuple[i+1]
    return dict",0.9303,-2.747404991608999
740,3,"

def solve(tup):
    dict = {}
    for i in range(0, len(tup), 2):
        dict[tup[i]] = tup[i+1]
    return dict",0.9452,-2.2533561104743
740,4,"

def solve(tuple):
    dict = {}
    for i in range(0, len(tuple), 2):
        dict[tuple[i]] = tuple[i+1]
    return dict",0.9303,-2.747404991608999
740,5,"

def solve(tup):
    dict_ = {}
    for i in range(0, len(tup), 2):
        dict_[tup[i]] = tup[i+1]
    return dict_",0.8572,-6.626649083659697
741,1,"

def solve(s):
    for i in range(len(s)-1):
        if s[i] != s[i+1]:
            return False
    return True",0.8738,-4.450552174868001
741,2,"

def solve(string):
    return all(char == string[0] for char in string)",0.848,-3.132915305246
741,3,"

def solve(string):
    char = string[0] #get the first character of the string
    for i in range(1, len(string)): #loop through the string starting from index 1
        if string[i] != char: #compare the current character with the first character
            return False #if they are not equal, return False
    return True #if all characters are equal, return True",0.7682,-22.67321402206591
741,4,"

def solve(string):
    first_char = string[0]
    for char in string:
        if char != first_char:
            return False
    return True",0.9004,-3.4636166580923
741,5,"

def solve(string):
    if len(string) < 2:
        return True
    first_char = string[0]
    for char in string[1:]:
        if char != first_char:
            return False
    return True",0.8641,-7.0103133064345
742,1,"

import math

def solve(a):
    return (math.sqrt(3)/4) * (a**3)",0.7426,-7.141767611400499
742,2,"

import math

def solve(a):
    return (math.sqrt(2)/12) * a**3",0.8086,-4.673653395720499
742,3,"

import math

def solve(a):
    return (a**3 * math.sqrt(2)) / 12",0.7816,-5.667190326578798
742,4,"

def solve(a):
    return (a**3 * pow(3, 0.5)) / 12",0.6768,-9.36825965759
742,5,"

import math
def solve(a):
    area = (math.sqrt(3) * a**2) / 4
    return area",0.7757,-7.3648327841949985
743,1,"

def solve(lst, n):
    n = n % len(lst)
    return lst[-n:] + lst[:-n]",0.9155,-2.2945925021029994
743,2,"

def solve(lst, num):
    if num == 0:
        return lst
    else:
        return lst[-num:] + lst[:-num]",0.7932,-7.415311954928001
743,3,"

def solve(list, num):
    for i in range(num):
        list.insert(0, list.pop())
    return list",0.7815,-6.410096248401
743,4,"

def solve(lst, num):
  return lst[-num:] + lst[:-num]",0.7174,-5.978958781923
743,5,"

def solve(lst, n):
    n = n % len(lst)
    lst = lst[-n:] + lst[:-n]
    return lst",0.8922,-3.4225699311300004
744,1,"

def solve(tup):
    for i in tup:
        if i is None:
            return True
    return False",0.9085,-2.398997548935
744,2,"

def solve(tup):
    for item in tup:
        if item is None:
            return True
    return False",0.908,-2.412097759258
744,3,"

def solve(tuple):
    for i in tuple:
        if i is None:
            return True
    return False",0.8605,-3.606034178633
744,4,"

def solve(tup):
    for i in tup:
        if i is None:
            return True
    return False",0.9085,-2.398997548935
744,5,"

def solve(tuple):
    for element in tuple:
        if element is None:
            return True
    return False",0.8683,-3.3891562654689995
745,1,"

def solve(start, end):
    result = []
    for num in range(start, end+1):
        digits = [int(d) for d in str(num)]
        flag = True
        for digit in digits:
            if digit == 0:
                flag = False
                break
            if num % digit != 0:
                flag = False
                break
        if flag:
            result.append(num)
    return result",0.9188,-7.621072568586001
745,2,"

def solve(start, end):
    result = []
    for i in range(start, end+1):
        num = str(i)
        for digit in num:
            if int(digit) == 0 or i % int(digit) != 0:
                break
        else:
            result.append(i)
    return result",0.8794,-8.740905656530996
745,3,"

def solve(start, end):
    result = []
    for num in range(start, end + 1):
        digits = [int(i) for i in str(num)]
        if all(num % digit == 0 for digit in digits):
            result.append(num)
    return result",0.8848,-7.096523239325599
745,4,"

def solve(start, end):
    result = []
    for num in range(start, end+1):
        divisible = True
        for digit in str(num):
            if digit == '0' or num % int(digit) != 0:
                divisible = False
                break
        if divisible:
            result.append(num)
    return result",0.9226,-5.8038760430775005
745,5,"

def solve(start, end):
    result = []
    for i in range(start, end+1):
        digits = [int(x) for x in str(i)]
        divisible = True
        for digit in digits:
            if digit == 0 or i % digit != 0:
                divisible = False
                break
        if divisible:
            result.append(i)
    return result",0.9266,-6.1014740147158
746,1,"

def solve(radius, angle):
    return (radius**2 * angle) / 2",0.8336,-3.4587641379000003
746,2,"

def solve(radius, angle):
    area = (angle / 360) * (math.pi * radius ** 2)
    return area",0.8035,-6.344059089418
746,3,"

def solve(radius, angle):
    return (angle/360) * pi * radius**2",0.76,-5.4888145763
746,4,"

def solve(radius, angle):
    area = (angle/360) * (math.pi * radius**2)
    return area",0.8522,-4.318448617778999
746,5,"

def solve(radius, angle):
    area = (radius**2 * angle) / 2
    return area",0.8903,-2.7889478020799996
747,1,"

def solve(str1, str2, str3):
    n1 = len(str1)
    n2 = len(str2)
    n3 = len(str3)
    dp = [[[0 for i in range(n3+1)] for j in range(n2+1)] for k in range(n1+1)]
    for i in range(n1+1):
        for j in range(n2+1):
            for k in range(n3+1):
                if i==0 or j==0 or k==0:
                    dp[i][j][k] = 0
                elif str1[i-1]==str2[j-1]==str3[k-1]:
                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1
                else:
                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])
    lcs_length = dp[n1][n2][n3]
    lcs = [""""] * (lcs_length+1)
    lcs[lcs_length] = """"
    i = n1
    j = n2
    k = n3
    while i>0 and j>0 and k>0:
        if str1[i-1]==str2[j-1]==str3[k-1]:
            lcs[lcs_length-1] = str1[i-1]
            i-=1
            j-=1
            k-=1
            lcs_length-=1
        elif dp[i-1][j][k] > dp[i][j-1][k] and dp[i-1][j][k] > dp[i][j][k-1]:
            i-=1
        elif dp[i][j-1][k] > dp[i-1][j][k] and dp[i][j-1][k] > dp[i][j][k-1]:
            j-=1
        else:
            k-=1
    return """".join(lcs[:-1])",0.9586,-18.910981735699295
747,2,"

def solve(s1, s2, s3):
    m = len(s1)
    n = len(s2)
    o = len(s3)
    dp = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]
    
    for i in range(m+1):
        for j in range(n+1):
            for k in range(o+1):
                if i == 0 or j == 0 or k == 0:
                    dp[i][j][k] = 0
                elif s1[i-1] == s2[j-1] == s3[k-1]:
                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1
                else:
                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])
    
    lcs_length = dp[m][n][o]
    lcs = [""""] * (lcs_length+1)
    
    i = m
    j = n
    k = o
    while i > 0 and j > 0 and k > 0:
        if s1[i-1] == s2[j-1] == s3[k-1]:
            lcs[lcs_length-1] = s1[i-1]
            i -= 1
            j -= 1
            k -= 1
            lcs_length -= 1
        elif dp[i-1][j][k] > dp[i][j-1][k] and dp[i-1][j][k] > dp[i][j][k-1]:
            i -= 1
        elif dp[i][j-1][k] > dp[i-1][j][k] and dp[i][j-1][k] > dp[i][j][k-1]:
            j -= 1
        else:
            k -= 1
    
    return """".join(lcs[:-1])",0.9584,-18.823221054084772
747,3,"

def solve(str1, str2, str3):
    m = len(str1)
    n = len(str2)
    o = len(str3)
    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]
    for i in range(m+1):
        for j in range(n+1):
            for k in range(o+1):
                if i == 0 or j == 0 or k == 0:
                    L[i][j][k] = 0
                elif str1[i-1] == str2[j-1] and str1[i-1] == str3[k-1]:
                    L[i][j][k] = L[i-1][j-1][k-1] + 1
                else:
                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])
    lcs = """"
    i = m
    j = n
    k = o
    while i > 0 and j > 0 and k > 0:
        if str1[i-1] == str2[j-1] and str1[i-1] == str3[k-1]:
            lcs = str1[i-1] + lcs
            i -= 1
            j -= 1
            k -= 1
        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:
            i -= 1
        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:
            j -= 1
        else:
            k -= 1
    return lcs",0.9793,-8.727558487212397
747,4,"

def solve(str1, str2, str3):
    m = len(str1)
    n = len(str2)
    o = len(str3)
    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]
    for i in range(m+1):
        for j in range(n+1):
            for k in range(o+1):
                if i == 0 or j == 0 or k == 0:
                    L[i][j][k] = 0
                elif str1[i-1] == str2[j-1] and str1[i-1] == str3[k-1]:
                    L[i][j][k] = L[i-1][j-1][k-1] + 1
                else:
                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])
    
    lcs = []
    i = m
    j = n
    k = o
    while i > 0 and j > 0 and k > 0:
        if str1[i-1] == str2[j-1] and str1[i-1] == str3[k-1]:
            lcs.insert(0, str1[i-1])
            i -= 1
            j -= 1
            k -= 1
        elif L[i-1][j][k] >= L[i][j-1][k] and L[i-1][j][k] >= L[i][j][k-1]:
            i -= 1
        elif L[i][j-1][k] >= L[i-1][j][k] and L[i][j-1][k] >= L[i][j][k-1]:
            j -= 1
        else:
            k -= 1
    return """".join(lcs)",0.9578,-18.214893738968826
747,5,"

def solve(str1, str2, str3):
    m = len(str1)
    n = len(str2)
    p = len(str3)
    dp = [[[0 for _ in range(p+1)] for _ in range(n+1)] for _ in range(m+1)]
    for i in range(1, m+1):
        for j in range(1, n+1):
            for k in range(1, p+1):
                if str1[i-1] == str2[j-1] == str3[k-1]:
                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1
                else:
                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])
    lcs = """"
    i = m
    j = n
    k = p
    while i > 0 and j > 0 and k > 0:
        if str1[i-1] == str2[j-1] == str3[k-1]:
            lcs = str1[i-1] + lcs
            i -= 1
            j -= 1
            k -= 1
        elif dp[i-1][j][k] > dp[i][j-1][k] and dp[i-1][j][k] > dp[i][j][k-1]:
            i -= 1
        elif dp[i][j-1][k] > dp[i-1][j][k] and dp[i][j-1][k] > dp[i][j][k-1]:
            j -= 1
        else:
            k -= 1
    return lcs",0.9698,-11.78673369600918
748,1,"

import re

def solve(string):
    return re.sub(r""(\w)([A-Z])"", r""\1 \2"", string)",0.8674,-4.267625992133
748,2,"

import re
def solve(string):
  return re.sub(r'([A-Z])', r' \1', string).strip()
",0.688,-10.472510226707
748,3,"

import re

def solve(string):
    return re.sub(r'([A-Z])', r' \1', string).strip()",0.8917,-3.2096371323868
748,4,"

import re

def solve(string):
    return re.sub(r""([A-Z])"", r"" \1"", string).strip()",0.8822,-3.508344165222
748,5,"

def solve(s):
    import re
    return re.sub(r""(\w)([A-Z])"", r""\1 \2"", s)",0.7735,-7.9620873728603
749,1,"

def solve(lst):
    lst.sort(key=lambda x: int(x))
    return lst",0.9109,-1.68048173765
749,2,"

def solve(lst):
    lst.sort(key=lambda x: int(x))
    return lst",0.9109,-1.68048173765
749,3,"

def solve(lst):
    return sorted(lst, key=lambda x: int(x))",0.8759,-2.25190715359
749,4,"

def solve(lst):
    return sorted(lst, key=lambda x: int(x))",0.8759,-2.25190715359
749,5,"

def solve(str_list):
    return sorted(str_list, key=lambda x: int(x))",0.7824,-4.663505298287001
750,1,"

def solve(lst, tpl):
    lst.append(tpl)
    return lst",0.8291,-2.9994219834159996
750,2,"

def solve(input_list, input_tuple):
    input_list.append(input_tuple)
    return input_list",0.8201,-3.966927412814
750,3,"

def solve(tup, lst):
    lst.append(tup)
    return lst",0.9111,-1.5830527082099997
750,4,"

def solve(lst, tup):
    lst.append(tup)
    return lst",0.9061,-1.577979364858
750,5,"

def solve(tup, lst):
    lst.append(tup)
    return lst",0.9111,-1.5830527082099997
751,1,"

def solve(arr):
    is_min_heap = True
    for i in range(len(arr)):
        if 2*i+1 < len(arr):
            if arr[i] > arr[2*i+1]:
                is_min_heap = False
        if 2*i+2 < len(arr):
            if arr[i] > arr[2*i+2]:
                is_min_heap = False
    return is_min_heap",0.8861,-10.5199967245104
751,2,"

def solve(arr):
    n = len(arr)
    for i in range(n//2 - 1, -1, -1):
        if arr[i] > arr[2*i + 1] or (2*i + 2 < n and arr[i] > arr[2*i + 2]):
            return False
    return True",0.9445,-4.114205549665001
751,3,"

def solve(arr):
    for i in range(len(arr)):
        if 2*i+1 < len(arr) and arr[i] > arr[2*i+1]:
            return False
        if 2*i+2 < len(arr) and arr[i] > arr[2*i+2]:
            return False
    return True",0.954,-3.2943322842662996
751,4,"

def solve(arr):
    for i in range(len(arr)):
        if 2*i+1 < len(arr) and arr[i] > arr[2*i+1]:
            return False
        if 2*i+2 < len(arr) and arr[i] > arr[2*i+2]:
            return False
    return True",0.954,-3.2943322842662996
751,5,"

def solve(arr):
    for i in range(len(arr)):
        if 2*i + 1 < len(arr) and arr[2*i + 1] < arr[i]:
            return False
        if 2*i + 2 < len(arr) and arr[2*i + 2] < arr[i]:
            return False
    return True",0.9327,-5.157037372727998
752,1,"
def solve(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return solve(n-1) + 2*solve(n-2)",0.8886,-5.313191097552001
752,2,"

def solve(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solve(n-1) + 2*solve(n-2)",0.9785,-1.0427392220210003
752,3,"

def solve(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solve(n-1) + 2*solve(n-2)",0.9785,-1.0427392220210003
752,4,"

def solve(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solve(n-1) + 2*solve(n-2)",0.9785,-1.0427392220210003
752,5,"

def solve(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return solve(n-1) + 2*solve(n-2)",0.9393,-2.815649379371001
753,1,"

def solve(tuple_list, k):
    sorted_tuples = sorted(tuple_list, key=lambda x: x[1])
    return sorted_tuples[:k]",0.885,-3.787887697578
753,2,"

def solve(tuple_list, k):
    return sorted(tuple_list)[:k]",0.8482,-2.634151052904
753,3,"

def solve(tuple_list, k):
    sorted_list = sorted(tuple_list, key=lambda x: x[1])
    return sorted_list[:k]",0.9204,-2.5728597501840005
753,4,"
def solve(tuples, k):
    return sorted(tuples, key=lambda x: x[1])[:k] ",0.6699,-10.418153541552
753,5,"

def solve(tuple_list, k):
    return sorted(tuple_list)[:k]",0.8482,-2.634151052904
754,1,"

def solve(list1, list2, list3):
    common = []
    for i in list1:
        if i in list2 and i in list3:
            common.append(i)
    return common",0.9323,-3.013574316216701
754,2,"

def solve(list1, list2, list3):
    common_indexes = []
    for i in range(len(list1)):
        if list1[i] in list2 and list1[i] in list3:
            common_indexes.append(i)
    return common_indexes",0.9267,-4.1102499600092
754,3,"

def solve(list1, list2, list3):
    common_elements = []
    for i in range(len(list1)):
        if list1[i] in list2 and list1[i] in list3:
            common_elements.append(list1[i])
    return common_elements",0.9455,-3.141267350483001
754,4,"

def solve(list1, list2, list3):
    common_elements = []
    for element in list1:
        if element in list2 and element in list3:
            common_elements.append(element)
    return common_elements",0.9243,-3.620338153205699
754,5,"

def solve(list1, list2, list3):
  result = []
  for i in range(len(list1)):
    if list1[i] in list2 and list1[i] in list3:
      result.append(i)
  return result",0.8777,-6.654991537729297
755,1,"

def solve(list):
    smallest = float('inf')
    second_smallest = float('inf')
    for num in list:
        if num < smallest:
            second_smallest = smallest
            smallest = num
        elif num < second_smallest and num != smallest:
            second_smallest = num
    return second_smallest",0.9272,-5.216810246722498
755,2,"

def solve(lst):
    smallest = float('inf')
    second_smallest = float('inf')
    for num in lst:
        if num < smallest:
            smallest = num
        elif num < second_smallest:
            second_smallest = num
    return second_smallest",0.9052,-5.779924371751002
755,3,"

def solve(lst):
    smallest = float('inf')
    second_smallest = float('inf')
    
    for num in lst:
        if num < smallest:
            second_smallest = smallest
            smallest = num
        elif num < second_smallest and num != smallest:
            second_smallest = num
    
    return second_smallest",0.9356,-4.65837002415
755,4,"

def solve(numbers):
    smallest = float('inf')
    second_smallest = float('inf')
    for num in numbers:
        if num < smallest:
            second_smallest = smallest
            smallest = num
        elif num < second_smallest:
            second_smallest = num
    return second_smallest",0.9387,-4.1096490932485015
755,5,"

def solve(lst):
    smallest = min(lst)
    second_smallest = float('inf')
    for num in lst:
        if num > smallest and num < second_smallest:
            second_smallest = num
    return second_smallest",0.8971,-5.4314210697383
756,1,"

def solve(string):
    if ""a"" in string:
        if ""b"" in string:
            return True
        else:
            return False
    else:
        return False",0.8675,-5.403178591102001
756,2,"

def solve(s):
    if 'a' in s:
        if s.count('b') == 0 or s.count('b') == 1:
            return True
        else:
            return False
    else:
        return False",0.8402,-8.707671985286002
756,3,"

def solve(string):
    import re
    pattern = r'a(b?)'
    match = re.search(pattern, string)
    if match:
        return True
    else:
        return False",0.9113,-3.715630974542
756,4,"

def solve(string):
    import re
    pattern = ""ab?""
    if re.search(pattern, string):
        return True
    return False",0.7856,-7.239157588793998
756,5,"

def solve(string):
    import re
    pattern = r'a{1}b{0,1}'
    match = re.search(pattern, string)
    if match:
        return True
    else:
        return False",0.8762,-6.081188698024001
757,1,"

def solve(string_list):
    count = 0
    for i in range(len(string_list)):
        for j in range(i+1, len(string_list)):
            if string_list[i][::-1] == string_list[j]:
                count += 1
    return count",0.9482,-3.0327269674412003
757,2,"

def solve(str_list):
    count = 0
    for i in range(len(str_list)):
        for j in range(i+1, len(str_list)):
            if str_list[i] == str_list[j][::-1]:
                count += 1
    return count",0.967,-1.9150019750709997
757,3,"

def solve(string_list):
    count = 0
    for i in range(len(string_list)):
        for j in range(i+1, len(string_list)):
            if string_list[i] == string_list[j][::-1]:
                count += 1
    return count",0.977,-1.3285697967640002
757,4,"

def solve(string_list):
    count = 0
    for i in range(len(string_list)):
        for j in range(i+1, len(string_list)):
            if string_list[i] == string_list[j][::-1]:
                count += 1
    return count",0.977,-1.3285697967640002
757,5,"

def solve(string_list):
    count = 0
    for i in range(len(string_list)):
        for j in range(i+1, len(string_list)):
            if string_list[i] == string_list[j][::-1]:
                count += 1
    return count",0.977,-1.3285697967640002
758,1,"

def solve(lst):
    unique_lists = set(tuple(l) for l in lst)
    return len(unique_lists)",0.855,-3.758572064096
758,2,"

def solve(lst):
  unique_lists = []
  for l in lst:
    if l not in unique_lists:
      unique_lists.append(l)
  return len(unique_lists)",0.8706,-4.988725078582002
758,3,"

def solve(input_list):
    unique_lists = set()
    for lst in input_list:
        unique_lists.add(tuple(lst))
    return len(unique_lists)",0.8087,-6.792624768662001
758,4,"

def solve(lst):
    unique_lists = []
    for l in lst:
        if l not in unique_lists:
            unique_lists.append(l)
    return len(unique_lists)",0.9336,-2.4752677562790004
758,5,"

def solve(lst):
    unique_lists = []
    for l in lst:
        if l not in unique_lists:
            unique_lists.append(l)
    return len(unique_lists)",0.9336,-2.4752677562790004
759,1,"

def solve(decimal):
    if isinstance(decimal, float):
        decimal = str(decimal)
    split = decimal.split('.')
    if len(split) != 2:
        return False
    elif len(split[1]) != 2:
        return False
    else:
        return True",0.7966,-13.191354938528002
759,2,"

def solve(decimal):
    return round(decimal, 2) == decimal",0.7913,-3.5103154091499995
759,3,"

def solve(num):
    if isinstance(num, float):
        return round(num, 2) == num
    return False",0.8797,-3.332300671477
759,4,"

def solve(num):
    if isinstance(num, float):
        num_str = str(num)
        if len(num_str.split('.')[1]) == 2:
            return True
        else:
            return False
    else:
        return False",0.8705,-6.7971516720519976
759,5,"

def solve(num):
    if isinstance(num, float):
        return round(num, 2) == num
    else:
        return False",0.8895,-3.394755433487
760,1,"

def solve(arr):
    if len(set(arr)) == 1:
        return True
    else:
        return False",0.9482,-1.3306949270170003
760,2,"

def solve(arr):
    if len(set(arr)) == 1:
        return True
    else:
        return False",0.9482,-1.3306949270170003
760,3,"

def solve(array):
    if array:
        distinct = array[0]
        for element in array:
            if element != distinct:
                return False
        return True
    return False",0.6658,-15.866638784066604
760,4,"

def solve(arr):
    for i in range(len(arr)-1):
        if arr[i] != arr[i+1]:
            return False
    return True",0.8851,-4.026873891773502
760,5,"

def solve(array):
  return len(set(array)) == 1",0.5618,-8.073254416160001
761,1,"

import math

def solve(angle, radius):
    return angle * radius * math.pi / 180",0.724,-6.7836594344884995
761,2,"

def solve(radius, angle):
    return (radius * angle * 3.14159) / 180",0.7792,-5.738194376939999
761,3,"

import math

def solve(angle, radius):
    arc_length = (angle / 360) * 2 * math.pi * radius
    return arc_length",0.852,-5.283833874427001
761,4,"

def solve(radius, angle):
    return (radius * angle * 3.14159) / 180",0.7792,-5.738194376939999
761,5,"

import math

def solve(radius, angle):
    return radius * angle * (math.pi / 180)",0.8107,-4.825426234207
762,1,"

def solve(month):
    thirty_days = [4, 6, 9, 11]
    if month in thirty_days:
        return True
    else:
        return False",0.94,-2.350248575887
762,2,"

def solve(month):
    if month == 4 or month == 6 or month == 9 or month == 11:
        return True
    else:
        return False",0.9445,-2.111921868109999
762,3,"

def solve(month):
    if month in [4, 6, 9, 11]:
        return True
    else:
        return False",0.9555,-1.4117754029619995
762,4,"

def solve(month):
    if month == 4 or month == 6 or month == 9 or month == 11:
        return True
    return False",0.8388,-5.976920064283998
762,5,"

def solve(month):
    if month in [4, 6, 9, 11]:
        return True
    else:
        return False",0.9555,-1.4117754029619995
763,1,"

def solve(arr):
    arr.sort()
    min_diff = float('inf')
    for i in range(len(arr)-1):
        diff = abs(arr[i] - arr[i+1])
        if diff < min_diff:
            min_diff = diff
    return min_diff",0.928,-4.258727749557498
763,2,"

def solve(arr):
    min_diff = float('inf')
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            diff = abs(arr[i] - arr[j])
            if diff < min_diff:
                min_diff = diff
    return min_diff",0.9676,-2.0112984354502
763,3,"

def solve(arr):
    min_diff = float('inf')
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            diff = abs(arr[i] - arr[j])
            if diff < min_diff:
                min_diff = diff
    return min_diff",0.9676,-2.0112984354502
763,4,"

def solve(arr):
    min_diff = float('inf')
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if abs(arr[i]-arr[j]) < min_diff:
                min_diff = abs(arr[i]-arr[j])
    return min_diff",0.9209,-5.023402656544702
763,5,"

def solve(arr):
    min_diff = float('inf')
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            diff = abs(arr[i] - arr[j])
            if diff < min_diff:
                min_diff = diff
    return min_diff",0.9676,-2.0112984354502
764,1,"

def solve(string):
  count = 0
  for char in string:
    if char.isdigit():
      count += 1
  return count",0.8774,-4.053536892972998
764,2,"

def solve(string):
    count = 0
    for char in string:
        if char.isdigit():
            count += 1
    return count",0.973,-0.847917031714
764,3,"

def solve(string):
    count = 0
    for char in string:
        if char.isnumeric():
            count += 1
    return count",0.9523,-1.56434117016
764,4,"

def solve(string):
    count = 0
    for char in string:
        if char.isdigit():
            count += 1
    return count",0.973,-0.847917031714
764,5,"

def solve(string):
    count = 0
    for char in string:
        if char.isdigit():
            count += 1
    return count",0.973,-0.847917031714
765,1,"

def solve(n):
    result = [1]
    counter = 1
    while len(result) < n:
        temp = []
        for i in range(counter):
            for j in range(1, counter+1):
                num = i+1 + j
                if num not in temp:
                    temp.append(num)
        result.extend(temp)
        counter += 1
    return result[n-1]",0.7029,-30.669623902083003
765,2,"

def solve(n):
    i = 1
    polite_nums = []
    while len(polite_nums) < n:
        if i % 2 == 0:
            polite_nums.append(i)
        else:
            if i % 3 == 0 or i % 5 == 0:
                polite_nums.append(i)
        i += 1
    return polite_nums[-1]",0.8379,-14.49965133842599
765,3,"

def solve(n):
    count = 0
    num = 1
    while count != n:
        if num % 2 == 0 and num % 3 == 0 and num % 5 == 0:
            count += 1
        if count == n:
            return num
        num += 1",0.8447,-11.814751732323996
765,4,"

def solve(n):
    result = []
    num = 1
    while len(result) < n:
        if num % 2 != 0 and num % 3 != 0 and num % 5 != 0:
            result.append(num)
        elif num % 2 == 0 and num % 3 == 0 and num % 5 == 0:
            result.append(num)
        num += 1
    return result[-1]",0.8649,-14.082802054138998
765,5,"

def solve(n):
    count = 0
    num = 1
    while count < n:
        if num % 2 == 0:
            num = num // 2
        elif num % 3 == 0:
            num = num // 3
        elif num % 5 == 0:
            num = num // 5
        else:
            count += 1
        num += 1
    return num - 1",0.9105,-9.188547681096
766,1,"

def solve(lst):
    for i in range(len(lst)-1):
        yield (lst[i], lst[i+1])",0.8581,-3.9789437335540008
766,2,"

def solve(lst):
    for i in range(len(lst)-1):
        print(lst[i], lst[i+1])",0.9452,-1.408205124663
766,3,"

def solve(lst):
    for i in range(len(lst)-1):
        print(lst[i], lst[i+1])",0.9452,-1.408205124663
766,4,"

def solve(lst):
    for i in range(len(lst)-1):
        print(lst[i], lst[i+1])",0.9452,-1.408205124663
766,5,"

def solve(lst):
    for i in range(len(lst)-1):
        print(lst[i], lst[i+1])",0.9452,-1.408205124663
767,1,"

def solve(lst, sum):
    count = 0
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            if lst[i] + lst[j] == sum:
                count += 1
    return count",0.9342,-3.675077036090999
767,2,"

def solve(arr, sum):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] + arr[j] == sum:
                count += 1
    return count",0.981,-1.0353881825753004
767,3,"

def solve(arr, sum):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] + arr[j] == sum:
                count += 1
    return count",0.981,-1.0353881825753004
767,4,"

def solve(arr, sum):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] + arr[j] == sum:
                count += 1
    return count",0.981,-1.0353881825753004
767,5,"

def solve(arr, sum):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] + arr[j] == sum:
                count += 1
    return count",0.981,-1.0353881825753004
768,1,"

def solve(num):
    parity = 0
    while num > 0:
        parity ^= num & 1
        num >>= 1
    return parity == 1",0.8663,-5.453605292741999
768,2,"

def solve(n):
    count = 0
    while n:
        count += n & 1
        n >>= 1
    return count % 2 == 1",0.8885,-4.492187400751001
768,3,"

def solve(num):
    count = 0
    while num:
        count += num & 1
        num = num >> 1
    return count % 2 == 1",0.8533,-6.344641932314
768,4,"

def solve(num):
    count = 0
    while num > 0:
        if num % 2 == 1:
            count += 1
        num //= 2
    if count % 2 == 1:
        return True
    else:
        return False ",0.8656,-8.803860011271997
768,5,"

def solve(n):
    parity = 0
    while n:
        parity = 1 - parity
        n = n & (n - 1)
    return parity",0.8644,-5.392723191196
769,1,"

def solve(list1, list2):
    return list(set(list1) - set(list2))",0.9351,-1.4085919513541998
769,2,"

def solve(list1, list2):
    return list(set(list1) - set(list2)) + list(set(list2) - set(list1))",0.8681,-4.525096371100199
769,3,"

def solve(list1, list2):
    diff = []
    for item in list1:
        if item not in list2:
            diff.append(item)
    return diff",0.8666,-5.153211190662199
769,4,"

def solve(list1, list2):
    return list(set(list1).difference(set(list2)))",0.8661,-3.0187267104481994
769,5,"

def solve(list1, list2):
    return list(set(list1) - set(list2))",0.9351,-1.4085919513541998
770,1,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i - 1)**4
    return sum",0.9166,-3.3111636575425
770,2,"

def solve(n):
    sum = 0
    for i in range(1,n+1):
        sum += (2*i-1)**4
    return sum",0.8995,-3.812899680862501
770,3,"

def solve(n):
    sum = 0
    for i in range(1, 2*n+1, 2):
        sum += i**4
    return sum",0.8942,-4.2489449833615
770,4,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += (2*i - 1)**4
    return sum",0.9166,-3.3111636575425
770,5,"

def solve(n):
    sum = 0
    for i in range(1, 2*n, 2):
        sum += i**4
    return sum",0.9578,-1.5505061957425004
771,1,"
def solve(expression):
    stack = []
    opening = ['(', '[', '{']
    closing = [')', ']', '}']
    for char in expression:
        if char in opening:
            stack.append(char)
        elif char in closing:
            if not stack or closing.index(char) != opening.index(stack.pop()):
                return False
    if stack:
        return False
    return True ",0.8116,-17.121559354003992
771,2,"

def solve(expression):
    stack = []
    for char in expression:
        if char in [""("", ""["", ""{""]:
            stack.append(char)
        else:
            if not stack:
                return False
            current_char = stack.pop()
            if current_char == ""("":
                if char != "")"":
                    return False
            elif current_char == ""["":
                if char != ""]"":
                    return False
            elif current_char == ""{"":
                if char != ""}"":
                    return False
    if stack:
        return False
    return True",0.9191,-9.368787423347396
771,3,"

def solve(expression):
    stack = []
    for char in expression:
        if char in ['(', '{', '[']:
            stack.append(char)
        elif char in [')', '}', ']']:
            if not stack:
                return False
            else:
                last_open = stack.pop()
                if (char == ')' and last_open != '(') or (char == '}' and last_open != '{') or (char == ']' and last_open != '['):
                    return False
    if stack:
        return False
    return True",0.9011,-11.565462879220004
771,4,"

def solve(expression):
    stack = []
    for char in expression:
        if char in ['(', '[', '{']:
            stack.append(char)
        elif char in [')', ']', '}']:
            if not stack:
                return False
            last = stack.pop()
            if (char == ')' and last != '(') or (char == ']' and last != '[') or (char == '}' and last != '{'):
                return False
    if stack:
        return False
    else:
        return True",0.8786,-13.852683741737
771,5,"

def solve(expression):
    stack = []
    for char in expression:
        if char in ""({["":
            stack.append(char)
        elif char in "")}]"":
            if len(stack) == 0:
                return False
            else:
                last_char = stack.pop()
                if last_char == ""("" and char != "")"":
                    return False
                elif last_char == ""{"" and char != ""}"":
                    return False
                elif last_char == ""["" and char != ""]"":
                    return False
    if len(stack) == 0:
        return True
    else:
        return False",0.9011,-12.805441626888294
772,1,"

def solve(string, k):
    words = string.split()
    result = []
    for word in words:
        if len(word) != k:
            result.append(word)
    return "" "".join(result)",0.9308,-3.0857872919245
772,2,"

def solve(string, k):
    words = string.split()
    filtered_words = [word for word in words if len(word) != k]
    return "" "".join(filtered_words)
",0.8062,-8.18605937337
772,3,"

def solve(string, k):
    words = string.split()
    result = []
    for word in words:
        if len(word) != k:
            result.append(word)
    return ' '.join(result)",0.9247,-3.3685420254754996
772,4,"

def solve(string, k):
    words = string.split()
    filtered_words = [word for word in words if len(word) != k]
    return "" "".join(filtered_words)",0.8918,-4.353547409370001
772,5,"

def solve(string, k):
    words = string.split()
    result = []
    for word in words:
        if len(word) != k:
            result.append(word)
    return "" "".join(result)",0.9308,-3.0857872919245
773,1,"

def solve(string, substring):
    occurrences = []
    positions = []
    for i in range(len(string)):
        if string[i:i+len(substring)] == substring:
            occurrences.append(substring)
            positions.append(i)
    return occurrences, positions",0.8786,-6.603056212252402
773,2,"
def solve(string, substring):
    positions = []
    occurrence = 0
    for i in range(len(string)):
        if string[i:i+len(substring)] == substring:
            occurrence += 1
            positions.append(i)
    return (occurrence, positions)",0.798,-12.634151409082994
773,3,"

def solve(string, substring):
    positions = []
    count = 0
    index = 0
    while index < len(string):
        if string[index:index+len(substring)] == substring:
            count += 1
            positions.append(index)
        index += 1
    return count, positions",0.8543,-10.075419778187998
773,4,"

def solve(string, substring):
    occurrence = 0
    positions = []
    start = 0
    while True:
        start = string.find(substring, start)
        if start == -1:
            break
        occurrence += 1
        positions.append(start)
        start += 1
    return (occurrence, positions)",0.8887,-8.495837892347001
773,5,"

def solve(string, substr):
    count = 0
    positions = []

    for i in range(len(string)):
        if string[i:].startswith(substr):
            count += 1
            positions.append(i)

    return count, positions",0.8383,-8.643541722565002
774,1,"

import re

def solve(email):
    pattern = r""^[\w\-.]+@[a-zA-Z0-9\-]+(\.[a-zA-Z0-9\-]+)*\.[a-zA-Z]{2,4}$""
    if re.match(pattern, email):
        return True
    else:
        return False",0.8304,-12.4537558723453
774,2,"

import re

def solve(email):
    pattern = r""^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$""
    if re.match(pattern, email):
        return True
    else:
        return False",0.954,-2.8237186859632
774,3,"

import re

def solve(email):
    pattern = r""^[\w\-.]+@[a-zA-Z0-9]+\.[a-zA-Z]{2,3}$""
    if re.match(pattern, email):
        return True
    else:
        return False",0.83,-10.0635938979521
774,4,"

import re

def solve(email):
    pattern = r""^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$""
    if re.match(pattern, email):
        return True
    else:
        return False",0.954,-2.8237186859632
774,5,"

import re

def solve(email):
    pattern = r""^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$""
    if re.match(pattern, email):
        return True
    else:
        return False",0.954,-2.8237186859632
775,1,"

def solve(lst):
    for i in range(1, len(lst), 2):
        if lst[i] % 2 == 0:
            return False
    return True",0.9803,-0.7550552530329999
775,2,"

def solve(lst):
    for i in range(1, len(lst), 2):
        if lst[i] % 2 == 0:
            return False
    return True",0.9803,-0.7550552530329999
775,3,"

def solve(lst):
    for i in range(1, len(lst), 2):
        if lst[i] % 2 == 0:
            return False
    return True",0.9803,-0.7550552530329999
775,4,"

def solve(lst):
    for i in range(1, len(lst), 2):
        if lst[i] % 2 != 1:
            return False
    return True",0.8809,-4.819009908118001
775,5,"

def solve(lst):
    for i in range(1, len(lst), 2):
        if lst[i] % 2 == 0:
            return False
    return True",0.9803,-0.7550552530329999
776,1,"

def solve(string):
    count = 0
    vowels = ""aeiou""
    for i in range(1, len(string) - 1):
        if string[i].lower() in vowels:
            if string[i - 1].lower() in vowels or string[i + 1].lower() in vowels:
                count += 1
    return count",0.881,-9.625915686569996
776,2,"

def solve(string):
    count = 0
    vowels = ""aeiou""
    for i in range(len(string)):
        if string[i].lower() in vowels:
            if i > 0 and string[i-1].lower() in vowels:
                count += 1
            if i < len(string)-1 and string[i+1].lower() in vowels:
                count += 1
    return count",0.9453,-4.893603664617503
776,3,"

def solve(string):
    count = 0
    vowels = ""aeiouAEIOU""
    for i in range(len(string)):
        if string[i] in vowels:
            if i == 0:
                if string[i+1] in vowels:
                    count += 1
            elif i == len(string)-1:
                if string[i-1] in vowels:
                    count += 1
            else:
                if string[i-1] in vowels or string[i+1] in vowels:
                    count += 1
    return count",0.9493,-5.9884012192237
776,4,"

def solve(string):
    count = 0
    vowels = ""aeiouAEIOU""
    for i in range(len(string)):
        if string[i] in vowels:
            if i > 0 and string[i-1] in vowels:
                count += 1
            if i < len(string)-1 and string[i+1] in vowels:
                count += 1
    return count",0.944,-4.8437330093002995
776,5,"

def solve(s):
    count = 0
    vowels = ""aeiou""
    for i in range(1, len(s) - 1):
        if s[i].lower() in vowels:
            if s[i-1].lower() in vowels or s[i+1].lower() in vowels:
                count += 1
    return count",0.8685,-10.430791034127305
777,1,"

def solve(arr):
    non_repeated = []
    for num in arr:
        if arr.count(num) == 1:
            non_repeated.append(num)
    return sum(non_repeated)",0.9009,-4.278043927714
777,2,"

def solve(arr):
    sum = 0
    for i in range(len(arr)):
        if arr.count(arr[i]) == 1:
            sum += arr[i]
    return sum",0.9463,-2.1532365781303
777,3,"

def solve(arr):
    unique_elements = set()
    non_repeated_sum = 0
    for num in arr:
        if num not in unique_elements:
            unique_elements.add(num)
            non_repeated_sum += num
    return non_repeated_sum",0.8399,-9.423914597025
777,4,"

def solve(arr):
    sum = 0
    repeated = []
    for i in arr:
        if i not in repeated:
            sum += i
            repeated.append(i)
    return sum",0.8118,-8.547885034448
777,5,"

def solve(arr):
    sum = 0
    for i in range(len(arr)):
        if arr.count(arr[i]) == 1:
            sum += arr[i]
    return sum",0.9463,-2.1532365781303
778,1,"

def solve(lst):
    result = []
    current = None
    temp = []
    for element in lst:
        if element == current:
            temp.append(element)
        else:
            if temp:
                result.append(temp)
                temp = []
            temp.append(element)
            current = element
    if temp:
        result.append(temp)
    return result",0.8705,-10.121883192030705
778,2,"

def solve(lst):
    result = []
    current = lst[0]
    sublst = [current]
    for i in range(1, len(lst)):
        if lst[i] == current:
            sublst.append(lst[i])
        else:
            result.append(sublst)
            current = lst[i]
            sublst = [current]
    result.append(sublst)
    return result",0.897,-8.698334656468598
778,3,"

def solve(lst):
    result = []
    current = None
    sublist = []
    for item in lst:
        if item == current:
            sublist.append(item)
        else:
            if sublist:
                result.append(sublist)
            sublist = [item]
            current = item
    if sublist:
        result.append(sublist)
    return result",0.9203,-5.983065257686199
778,4,"

def solve(lst):
    res = []
    temp = []

    for i in range(len(lst)):
        if i == 0:
            temp.append(lst[i])
        elif lst[i] == lst[i-1]:
            temp.append(lst[i])
        else:
            res.append(temp)
            temp = [lst[i]]
    
    res.append(temp)
    return res",0.8672,-10.689433703478503
778,5,"

def solve(lst):
    result = []
    current = [lst[0]]
    for i in range(1, len(lst)):
        if lst[i] == current[0]:
            current.append(lst[i])
        else:
            result.append(current)
            current = [lst[i]]
    result.append(current)
    return result",0.9276,-5.0329622472865
779,1,"

def solve(lst):
    unique_lists = []
    for l in lst:
        if l not in unique_lists:
            unique_lists.append(l)
    return len(unique_lists)",0.9396,-2.2418090461689997
779,2,"

def solve(lst):
    unique_lists = set(tuple(sublist) for sublist in lst)
    return len(unique_lists)",0.7947,-5.745648673768001
779,3,"
def solve(lst):
    unique_lists = []
    for l in lst:
        if l not in unique_lists:
            unique_lists.append(l)
    return len(unique_lists)",0.8642,-5.253258822899999
779,4,"

def solve(lst):
    unique_lists = []
    for item in lst:
        if item not in unique_lists:
            unique_lists.append(item)
    return len(unique_lists)",0.8987,-3.8464304651460006
779,5,"

def solve(lst):
    unique_lists = []
    for l in lst:
        if l not in unique_lists:
            unique_lists.append(l)
    return len(unique_lists)",0.9396,-2.2418090461689997
780,1,"

def solve(tuple_list):
    result = []
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            temp = tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]
            result.append(temp)
    return result",0.8975,-7.460345253481999
780,2,"

def solve(tuple_list):
    result = []
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            result.append((tuple_list[i], tuple_list[j], tuple_list[i][0] + tuple_list[j][0]))
    return result",0.9107,-5.611580897885001
780,3,"

def solve(tuple_list):
    result = []
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            result.append((tuple_list[i][0] + tuple_list[j][0], (tuple_list[i][1], tuple_list[j][1])))
    return result",0.9228,-5.221425292514
780,4,"

def solve(tuple_list):
    combinations = []
    for i in range(len(tuple_list)):
        for j in range(i+1, len(tuple_list)):
            combinations.append((tuple_list[i], tuple_list[j], tuple_list[i][0]+tuple_list[j][0], tuple_list[i][1]+tuple_list[j][1]))
    return combinations",0.9311,-5.071633852211502
780,5,"

def solve(tuple_list):
    # create an empty dictionary to store the sums as keys and the tuples as values
    sum_dict = {}
    
    # loop through the tuple list
    for tup in tuple_list:
        # calculate the sum of the tuple
        tup_sum = sum(tup)
        # check if the sum already exists in the dictionary
        if tup_sum in sum_dict:
            # if it does, append the current tuple to the list of tuples for that sum
            sum_dict[tup_sum].append(tup)
        else:
            # if it doesn't, create a new key-value pair with the sum as the key and the current tuple as the value
            sum_dict[tup_sum] = [tup]
    
    # create an empty list to store the combinations of sums with tuples
    sum_combinations = []
    
    # loop through the keys in the dictionary
    for key in sum_dict:
        # loop through the tuples for each sum
        for tup in sum_dict[key]:
            # loop through the remaining keys in the dictionary
            for other_key in sum_dict:
                # check if the other key is not the same as the current key
                if other_key != key:
                    # loop through the tuples for the other key
                    for other_tup in sum_dict[other_key]:
                        # append the combination of the current tuple and the other tuple to the list of combinations
                        sum_combinations.append((tup, other_tup))
    
    # return the list of combinations
    return sum_combinations",0.8706,-44.77401768781046
781,1,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        if n%i == 0:
            count += 1
    if count%2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.9431,-3.4547469856040007
781,2,"

def solve(n):
    count = 0
    for i in range(1,n+1):
        if n%i == 0:
            count += 1
    if count%2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.9329,-4.027507214691998
781,3,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        if n % i == 0:
            count += 1
    if count % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.9739,-1.6132996787550005
781,4,"

def solve(num):
    count = 0
    for i in range(1, num+1):
        if num % i == 0:
            count += 1
    if count % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.9619,-2.3712901153910004
781,5,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        if n % i == 0:
            count += 1
    if count % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.9739,-1.6132996787550005
782,1,"

def solve(arr):
    sum = 0
    for i in range(1, len(arr) + 1, 2):
        for j in range(len(arr) - i + 1):
            subarray = arr[j:j + i]
            sum += sum(subarray)
    return sum",0.8796,-8.083513865241002
782,2,"

def solve(arr):
    sum = 0
    n = len(arr)
    for i in range(n):
        for j in range(i, n, 2):
            for k in range(i, j+1):
                sum += arr[k]
    return sum",0.9229,-4.492828232215
782,3,"

def solve(arr):
    total = 0
    for i in range(len(arr)):
        for j in range(i, len(arr)):
            if (j - i + 1) % 2 == 1:
                total += sum(arr[i:j+1])
    return total",0.9074,-5.732974628001999
782,4,"

def solve(arr):
    total = 0
    for i in range(len(arr)):
        for j in range(i, len(arr), 2):
            total += sum(arr[i:j+1])
    return total",0.9263,-3.444755015957001
782,5,"

def solve(arr):
    total = 0
    n = len(arr)
    for i in range(n):
        for j in range(i, n, 2):
            total += sum(arr[i:j+1])
    return total",0.8986,-5.2382655654380015
783,1,"

def solve(r, g, b):
    r = r/255
    g = g/255
    b = b/255
    cmax = max(r, g, b)
    cmin = min(r, g, b)
    delta = cmax - cmin
    
    if delta == 0:
        h = 0
    elif cmax == r:
        h = 60 * ((g-b)/delta % 6)
    elif cmax == g:
        h = 60 * ((b-r)/delta + 2)
    else:
        h = 60 * ((r-g)/delta + 4)
        
    if cmax == 0:
        s = 0
    else:
        s = delta/cmax
        
    v = cmax
    
    return h, s, v",0.943,-10.215711620560509
783,2,"

def solve(r, g, b):
    r = r/255
    g = g/255
    b = b/255
    
    c_max = max(r, g, b)
    c_min = min(r, g, b)
    delta = c_max - c_min
    
    #Hue calculation
    if delta == 0:
        h = 0
    elif c_max == r:
        h = ((g-b)/delta) % 6
    elif c_max == g:
        h = ((b-r)/delta) + 2
    else:
        h = ((r-g)/delta) + 4
    h = round(h*60)
    
    #Saturation calculation
    if c_max == 0:
        s = 0
    else:
        s = delta/c_max
    s = round(s*100)
    
    #Value calculation
    v = c_max
    v = round(v*100)
    
    return (h, s, v)",0.9111,-19.833626116405092
783,3,"

def solve(rgb):
    r = rgb[0] / 255.0
    g = rgb[1] / 255.0
    b = rgb[2] / 255.0
    
    cmax = max(r, g, b)
    cmin = min(r, g, b)
    delta = cmax - cmin
    
    if delta == 0:
        h = 0
    elif cmax == r:
        h = 60 * ((g - b)/delta % 6)
    elif cmax == g:
        h = 60 * ((b - r)/delta + 2)
    else:
        h = 60 * ((r - g)/delta + 4)
    
    if cmax == 0:
        s = 0
    else:
        s = delta / cmax
        
    v = cmax
    
    hsv = (h, s, v)
    
    return hsv",0.9058,-19.6896830067051
783,4,"

def solve(r, g, b):
    r = r/255.0
    g = g/255.0
    b = b/255.0
    cmax = max(r, g, b)
    cmin = min(r, g, b)
    delta = cmax - cmin
    if delta == 0:
        h = 0
    elif cmax == r:
        h = 60 * (((g - b)/delta) % 6)
    elif cmax == g:
        h = 60 * (((b - r)/delta) + 2)
    else:
        h = 60 * (((r - g)/delta) + 4)
    if cmax == 0:
        s = 0
    else:
        s = delta/cmax
    v = cmax
    return h, s, v",0.9541,-8.6883381066605
783,5,"

def solve(r, g, b):
    r = r / 255.0
    g = g / 255.0
    b = b / 255.0
    
    cmax = max(r, g, b)
    cmin = min(r, g, b)
    delta = cmax - cmin
    
    if delta == 0:
        h = 0
    elif cmax == r:
        h = 60 * (((g - b) / delta) % 6)
    elif cmax == g:
        h = 60 * (((b - r) / delta) + 2)
    else:
        h = 60 * (((r - g) / delta) + 4)
        
    if cmax == 0:
        s = 0
    else:
        s = delta / cmax
        
    v = cmax
    
    return h, s, v",0.9542,-9.045732761022004
784,1,"

def solve(lst):
    even_prod = 1
    odd_prod = 1
    
    for num in lst:
        if num % 2 == 0:
            even_prod *= num
        else:
            odd_prod *= num
    
    return even_prod * odd_prod",0.9203,-4.7352881786847005
784,2,"

def solve(lst):
    even = 1
    odd = 1
    for num in lst:
        if num % 2 == 0:
            even *= num
        else:
            odd *= num
    return even * odd",0.9566,-2.2607694540790004
784,3,"

def solve(lst):
    even_product = 1
    odd_product = 1
    
    for num in lst:
        if num % 2 == 0:
            even_product *= num
        else:
            odd_product *= num
    
    return even_product * odd_product",0.932,-4.015362233104101
784,4,"

def solve(lst):
    prod_even = 1
    prod_odd = 1
    for num in lst:
        if num % 2 == 0:
            prod_even *= num
        else:
            prod_odd *= num
    return prod_even * prod_odd",0.9161,-4.99774383784
784,5,"

def solve(lst):
    even_product = 1
    odd_product = 1
    for num in lst:
        if num % 2 == 0:
            even_product *= num
        else:
            odd_product *= num
    return even_product * odd_product",0.9539,-2.6904514964310007
785,1,"

def solve(tup_str):
    tup_int = ()
    for i in tup_str:
        tup_int += (int(i),)
    return tup_int",0.8243,-6.183365791638999
785,2,"

def solve(tuple_string):
    integer_tuple = tuple(map(int, tuple_string.split(',')))
    return integer_tuple",0.7812,-5.678552095313
785,3,"

def solve(tuple_string):
    integer_tuple = tuple(map(int, tuple_string.split("","")))
    return integer_tuple",0.7602,-6.305809463452001
785,4,"

def solve(tuple_str):
    int_tuple = tuple(int(i) for i in tuple_str)
    return int_tuple",0.8009,-5.328237336065
785,5,"

def solve(tuple_str):
    tuple_int = tuple(map(int, tuple_str))
    return tuple_int",0.8478,-3.468480122675
786,1,"

def solve(arr, value):
    low = 0
    high = len(arr) - 1
    
    while low <= high:
        mid = (low + high) // 2
        
        if arr[mid] < value:
            low = mid + 1
        else:
            high = mid - 1
    
    return low",0.8942,-7.940948550750001
786,2,"

def solve(nums, target):
    left = 0
    right = len(nums) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if nums[mid] == target:
            return mid
        elif nums[mid] > target:
            right = mid - 1
        else:
            left = mid + 1
            
    return left",0.8814,-10.476498783569
786,3,"

def solve(arr, val):
    low = 0
    high = len(arr) - 1
    
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] == val:
            return mid
        elif arr[mid] < val:
            low = mid + 1
        else:
            high = mid - 1
    
    return low",0.9431,-4.864535163259002
786,4,"

def solve(sorted_list, value):
    for i in range(len(sorted_list)):
        if sorted_list[i] > value:
            return i
    return len(sorted_list)",0.8243,-6.954650391444002
786,5,"
def solve(arr, value):
    left = 0
    right = len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == value:
            return mid
        elif arr[mid] < value:
            left = mid + 1
        else:
            right = mid - 1
    return left",0.8779,-10.810185861041006
787,1,"

def solve(string):
    return re.search(r'a{1}b{3}', string)",0.7928,-4.643997978670998
787,2,"

def solve(string):
    import re
    pattern = ""ab{3}""
    if re.search(pattern, string):
        return True
    else:
        return False",0.8371,-6.223986685917999
787,3,"

def solve(string):
    import re
    regex = r""a(b{3})""
    matches = re.findall(regex, string)
    return bool(matches)",0.6493,-13.817668647397
787,4,"

def solve(string):
    if 'a' in string:
        if string.count('b') == 3:
            return True
        else:
            return False
    else:
        return False",0.8563,-6.360536102963998
787,5,"

def solve(string):
    return re.search(""a{1}b{3}"", string) is not None",0.7593,-6.334602310591
788,1,"

def solve(string, lst):
    new_tuple = (string, lst)
    return new_tuple",0.9223,-1.6166171954399997
788,2,"

def solve(string, list):
    new_tuple = (string, list)
    return new_tuple",0.8858,-2.425364409795999
788,3,"

def solve(string, lst):
    return (string,) + tuple(lst)",0.7774,-4.02930547521
788,4,"

def solve(string, lst):
    new_tuple = (string, lst)
    return new_tuple",0.9223,-1.6166171954399997
788,5,"

def solve(string, list):
    new_tuple = (string, list)
    return new_tuple",0.8858,-2.425364409795999
789,1,"

def solve(n, s):
    perimeter = n * s
    return perimeter",0.9233,-1.3565496870500002
789,2,"

def solve(n, s):
    perimeter = n * s
    return perimeter",0.9233,-1.3565496870500002
789,3,"

def solve(n, s):
    perimeter = n * s
    return perimeter",0.9233,-1.3565496870500002
789,4,"

def solve(n, s):
    return n * s",0.8597,-1.81391601794
789,5,"

def solve(n, length):
    perimeter = n * length
    return perimeter",0.8528,-2.7069941432860003
790,1,"

def solve(lst):
    for i in range(0, len(lst), 2):
        if lst[i] % 2 != 0:
            return False
    return True",0.9831,-0.6494596548160003
790,2,"

def solve(nums):
    for i in range(0, len(nums), 2):
        if nums[i] % 2 != 0:
            return False
    return True",0.9088,-3.632655645309
790,3,"

def solve(lst):
    for i in range(0, len(lst), 2):
        if lst[i] % 2 != 0:
            return False
    return True",0.9831,-0.6494596548160003
790,4,"

def solve(lst):
    for i in range(0, len(lst), 2):
        if lst[i] % 2 != 0:
            return False
    return True",0.9831,-0.6494596548160003
790,5,"

def solve(lst):
    for i in range(0, len(lst), 2):
        if lst[i] % 2 != 0:
            return False
    return True",0.9831,-0.6494596548160003
791,1,"

def solve(tuple):
    new_tuple = ()
    for i in tuple:
        if type(i) != tuple:
            new_tuple += (i,)
    return new_tuple",0.8116,-7.305893927839999
791,2,"

def solve(input_tuple):
    new_tuple = ()
    for item in input_tuple:
        if not isinstance(item, tuple):
            new_tuple += (item,)
    return new_tuple",0.8317,-6.820662231482999
791,3,"

def solve(tup):
    new_tup = []
    for i in tup:
        if type(i) != tuple:
            new_tup.append(i)
    return tuple(new_tup)",0.8367,-7.131594915859998
791,4,"

def solve(tup):
    tup_list = list(tup)
    for i in range(len(tup_list)):
        if type(tup_list[i]) == tuple:
            tup_list.pop(i)
            break
    return tuple(tup_list)",0.8438,-8.660073465917698
791,5,"

def solve(tuple):
    new_tuple = ()
    for item in tuple:
        if type(item) == tuple:
            continue
        else:
            new_tuple += (item,)
    return new_tuple",0.8613,-6.122759714177998
792,1,"
def solve(nested_lists):
    count = 0
    for item in nested_lists:
        if isinstance(item, list):
            count += 1
    return count",0.7869,-8.626386977231995
792,2,"

def solve(lst):
    count = 0
    for i in lst:
        if type(i) == list:
            count += 1
    return count",0.8998,-3.5900683726940006
792,3,"

def solve(l):
    count = 0
    for i in l:
        if isinstance(i, list):
            count += 1
    return count",0.8005,-7.341723132598001
792,4,"

def solve(lists):
    count = 0
    for item in lists:
        if isinstance(item, list):
            count += 1
    return count",0.9398,-2.112745236887001
792,5,"

def solve(lists):
    count = 0
    for i in lists:
        if isinstance(i, list):
            count += 1
    return count",0.8963,-3.7235736071519994
793,1,"

def solve(arr, target):
  low = 0
  high = len(arr) - 1
  last_position = -1

  while low <= high:
    mid = (low + high) // 2
    if arr[mid] == target:
      last_position = mid
      low = mid + 1
    elif arr[mid] < target:
      low = mid + 1
    else:
      high = mid - 1
  
  return last_position",0.8944,-11.267055093937014
793,2,"

def solve(arr, target):
    low = 0
    high = len(arr) - 1
    result = -1

    while low <= high:
        mid = (low + high) // 2

        if arr[mid] == target:
            result = mid
            low = mid + 1
        elif arr[mid] < target:
            low = mid + 1
        else:
            high = mid - 1

    return result",0.9212,-8.046596935056499
793,3,"

def solve(arr, target):
    left = 0
    right = len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            if mid == len(arr) - 1 or arr[mid+1] != target:
                return mid
            else:
                left = mid + 1
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1",0.9519,-5.618975234332001
793,4,"

def solve(arr, element):
    left = 0
    right = len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == element:
            if mid == len(arr) - 1 or arr[mid+1] != element:
                return mid
            else:
                left = mid + 1
        elif arr[mid] < element:
            left = mid + 1
        else:
            right = mid - 1
    return -1",0.9376,-7.348525150849999
793,5,"

def solve(arr, element):
    low = 0
    high = len(arr) - 1
    while low <= high:
        mid = (low + high) // 2
        if arr[mid] > element:
            high = mid - 1
        elif arr[mid] < element:
            low = mid + 1
        else:
            if mid == len(arr) - 1 or arr[mid + 1] != element:
                return mid
            else:
                low = mid + 1
    return -1",0.9349,-7.744567929477002
794,1,"

def solve(string):
    import re
    pattern = r'a.*b$'
    match = re.search(pattern, string)
    if match:
        return True
    else:
        return False",0.9172,-3.543185897135999
794,2,"

def solve(string):
    if 'a' in string and 'b' in string:
        index_a = string.index('a')
        index_b = string.index('b')
        if index_a < index_b:
            return True
    return False",0.907,-5.0766726988735025
794,3,"

def solve(string):
    import re
    pattern = r'a.*b$'
    if re.search(pattern, string):
        return True
    else:
        return False",0.907,-3.514434558188
794,4,"

def solve(string):
    import re
    return re.match('a.*b$', string) is not None",0.7185,-7.603287286414999
794,5,"

def solve(string):
    import re
    pattern = ""a.*b$""
    if re.match(pattern, string):
        return True
    else:
        return False",0.8425,-6.169847110093002
795,1,"

import heapq

def solve(dataset, n):
    # create a min heap
    heap = []
    # loop through the dataset and add the prices to the heap
    for price in dataset:
        heapq.heappush(heap, price)
    # create an empty list to store the n cheapest items
    cheapest_items = []
    # loop n times
    for i in range(n):
        # pop the smallest item from the heap and add it to the list
        cheapest_items.append(heapq.heappop(heap))
    # return the list of n cheapest items
    return cheapest_items",0.8384,-21.5106122807714
795,2,"

import heapq

def solve(dataset, n):
    heap = []
    for item in dataset:
        heapq.heappush(heap, item)
    
    cheapest_items = []
    for i in range(n):
        cheapest_items.append(heapq.heappop(heap))
    
    return cheapest_items",0.9205,-4.805092011134301
795,3,"

import heapq
def solve(dataset, n):
    heap = []
    for item in dataset:
        heapq.heappush(heap, item)
    cheapest_items = []
    for i in range(n):
        cheapest_items.append(heapq.heappop(heap))
    return cheapest_items",0.8754,-7.453383146372601
795,4,"

import heapq

def solve(dataset, n):
    heap = []
    for item in dataset:
        heapq.heappush(heap, item)
    
    cheap_items = []
    for i in range(n):
        cheap_items.append(heapq.heappop(heap))
    
    return cheap_items",0.9107,-5.4241008014437995
795,5,"

def solve(dataset, n):
    heap = []
    for item in dataset:
        heapq.heappush(heap, item)
    result = []
    for i in range(n):
        result.append(heapq.heappop(heap))
    return result",0.9022,-5.143291304266398
796,1,"

def solve(dictionary):
    sum = 0
    for key in dictionary:
        sum += dictionary[key]
    return sum",0.9253,-2.017609698967
796,2,"

def solve(dictionary):
    sum = 0
    for key in dictionary:
        sum += dictionary[key]
    return sum",0.9253,-2.017609698967
796,3,"

def solve(dictionary):
    sum = 0
    for key in dictionary:
        sum += dictionary[key]
    return sum",0.9253,-2.017609698967
796,4,"

def solve(dictionary):
    sum = 0
    for key in dictionary:
        sum += dictionary[key]
    return sum",0.9253,-2.017609698967
796,5,"

def solve(dictionary):
    sum = 0
    for key, value in dictionary.items():
        sum += value
    return sum",0.9047,-2.8030124549350006
797,1,"
def solve(l, r):
    sum = 0
    for i in range(l, r+1):
        if i % 2 != 0:
            sum += i
    return sum",0.9013,-4.364502122595
797,2,"
def solve(l, r):
    sum = 0
    for i in range(l, r+1):
        if i % 2 != 0:
            sum += i
    return sum",0.9013,-4.364502122595
797,3,"

def solve(l, r):
    sum = 0
    for i in range(l, r+1):
        if i % 2 != 0:
            sum += i
    return sum",0.9619,-1.6316355512110003
797,4,"

def solve(l,r):
    sum = 0
    for i in range(l,r+1):
        if i%2 != 0:
            sum += i
    return sum",0.9299,-2.832368743444301
797,5,"

def solve(l, r):
    if l > r:
        return 0
    elif l % 2 == 0:
        l += 1
    elif r % 2 == 0:
        r -= 1
    return sum(range(l, r+1, 2))",0.8073,-13.485673067486005
798,1,"

def solve(arr):
    total = 0
    for num in arr:
        total += num
    return total",0.908,-2.4118152544549996
798,2,"

def solve(arr):
    sum = 0
    for num in arr:
        sum += num
    return sum",0.9698,-0.7668499427984002
798,3,"

def solve(arr):
    sum = 0
    for num in arr:
        sum += num
    return sum",0.9698,-0.7668499427984002
798,4,"

def solve(arr):
    sum = 0
    for i in arr:
        sum += i
    return sum",0.9143,-2.2407075337700006
798,5,"

def solve(arr):
    sum = 0
    for num in arr:
        sum += num
    return sum",0.9698,-0.7668499427984002
799,1,"

def solve(n, d):
    return (n << d) | (n >> (32 - d))",0.8843,-2.8291246088340007
799,2,"

def solve(n, d):
    bin_n = bin(n)[2:]
    new_bin = bin_n[d:] + bin_n[:d]
    return int(new_bin, 2)",0.7501,-11.2140477288993
799,3,"

def solve(num, rotations):
    # convert number to binary string
    binary = bin(num)[2:]

    # left rotate the binary string by the given number of rotations
    rotated_binary = binary[rotations:] + binary[:rotations]

    # convert back to integer
    result = int(rotated_binary, 2)

    return result",0.8135,-15.071847913099
799,4,"

def solve(num, rotate):
    return ((num << rotate) | (num >> (32 - rotate))) & 0xFFFFFFFF",0.833,-4.932739984241
799,5,"

def solve(n, d):
    return (n << d) | (n >> (32 - d))",0.8843,-2.8291246088340007
800,1,"

def solve(string):
    return string.replace("" "", """")",0.9195,-1.00652237075
800,2,"

def solve(string):
    return string.replace("" "", """")",0.9195,-1.00652237075
800,3,"

def solve(string):
    return string.replace("" "", """")",0.9195,-1.00652237075
800,4,"

def solve(string):
    return string.replace("" "", """")",0.9195,-1.00652237075
800,5,"

def solve(string):
    return string.replace("" "", """")",0.9195,-1.00652237075
801,1,"

def solve(num1, num2, num3):
    count = 0
    if num1 == num2 == num3:
        count = 3
    elif num1 == num2 or num1 == num3 or num2 == num3:
        count = 2
    else:
        count = 0
    return count",0.9404,-4.483554665277399
801,2,"

def solve(a, b, c):
    count = 0
    if a == b == c:
        count = 3
    elif a == b or a == c or b == c:
        count = 2
    else:
        count = 0
    return count",0.9177,-5.2387639840619995
801,3,"

def solve(num1, num2, num3):
    count = 0
    if num1 == num2 == num3:
        count = 3
    elif num1 == num2 or num1 == num3 or num2 == num3:
        count = 2
    return count",0.9563,-2.863039281087399
801,4,"

def solve(a,b,c):
    count = 0
    if a == b:
        count += 1
    if a == c:
        count += 1
    if b == c:
        count += 1
    return count
",0.8422,-9.101767994959
801,5,"

def solve(num1, num2, num3):
    count = 0
    if num1 == num2 == num3:
        count = 3
    elif num1 == num2 or num1 == num3 or num2 == num3:
        count = 2
    return count",0.9563,-2.863039281087399
802,1,"

def solve(arr):
    min_val = min(arr)
    min_index = arr.index(min_val)
    return min_index",0.7526,-7.1060941654019985
802,2,"

def solve(arr):
    count = 0
    for i in range(len(arr) - 1):
        if arr[i] > arr[i+1]:
            count += 1
    return count",0.8998,-4.5397955628519995
802,3,"

def solve(arr):
  count = 0
  for i in range(len(arr)):
    if arr[i] > arr[i+1]:
      count += 1
  return count",0.8397,-6.8136144111839965
802,4,"

def solve(arr):
    count = 0
    if len(arr) == 0:
        return count
    min_val = min(arr)
    min_index = arr.index(min_val)
    while min_index != 0:
        arr = arr[min_index:] + arr[:min_index]
        count += min_index
        min_val = min(arr)
        min_index = arr.index(min_val)
    return count",0.8223,-16.827314609895407
802,5,"

def solve(arr):
    # Initialize the count of rotations to 0
    count = 0
    # Loop through the array
    for i in range(len(arr)):
        # Check if the current element is smaller than the previous element
        if arr[i] < arr[i-1]:
            # If yes, increment the count of rotations
            count += 1
    # Return the count of rotations
    return count",0.7859,-21.68510511666799
803,1,"

def solve(n):
    if n < 0:
        return False
    else:
        root = n ** 0.5
        if int(root) == root:
            return True
        else:
            return False",0.8805,-5.979438143168999
803,2,"

def solve(n):
    root = n ** 0.5
    if root == int(root):
        return True
    else:
        return False",0.8507,-5.173704010873701
803,3,"

def solve(num):
    if num < 0:
        return False
    elif num == 0:
        return True
    else:
        root = int(num ** 0.5)
        if root * root == num:
            return True
        else:
            return False",0.9008,-6.161781023501
803,4,"

def solve(num):
    if num < 0:
        return False
    else:
        root = num ** 0.5
        if int(root) ** 2 == num:
            return True
        else:
            return False",0.9011,-5.205303449639798
803,5,"

def solve(n):
    if n < 0:
        return False
    elif n == 0:
        return True
    else:
        for i in range(1, n+1):
            if i * i == n:
                return True
    return False",0.8371,-10.137979731062
804,1,"

def solve(numbers):
    product = 1
    for num in numbers:
        product *= num
    if product % 2 == 0:
        return True
    else:
        return False",0.9756,-1.035654654583
804,2,"

def solve(numbers):
    product = 1
    for num in numbers:
        product *= num
    if product % 2 == 0:
        return True
    else:
        return False",0.9756,-1.035654654583
804,3,"

def solve(numbers):
    product = 1
    for num in numbers:
        product *= num
    if product % 2 == 0:
        return True
    else:
        return False",0.9756,-1.035654654583
804,4,"

def solve(num_list):
    product = 1
    for num in num_list:
        product *= num
    if product % 2 == 0:
        return True
    else:
        return False",0.913,-4.0036460483630005
804,5,"

def solve(numbers):
    product = 1
    for num in numbers:
        product *= num
    if product % 2 == 0:
        return True
    else:
        return False",0.9756,-1.035654654583
805,1,"

def solve(lst):
    highest_sum = 0
    highest_list = []
    for sub_list in lst:
        if sum(sub_list) > highest_sum:
            highest_sum = sum(sub_list)
            highest_list = sub_list
    return highest_list",0.8388,-9.315576019091598
805,2,"

def solve(list_of_lists):
    max_sum = float(""-inf"")
    max_list = None
    
    for list in list_of_lists:
        sum = 0
        for element in list:
            sum += element
        if sum > max_sum:
            max_sum = sum
            max_list = list
    
    return max_list",0.8464,-11.502891408535396
805,3,"

def solve(lst):
  max_sum = 0
  result = []
  for sublst in lst:
    sum = 0
    for num in sublst:
      sum += num
    if sum > max_sum:
      max_sum = sum
      result = sublst
  return result",0.8237,-12.215416883438996
805,4,"

def solve(list_of_lists):
    max_sum = 0
    max_list = []
    for lst in list_of_lists:
        curr_sum = sum(lst)
        if curr_sum > max_sum:
            max_sum = curr_sum
            max_list = lst
    return max_list",0.9227,-4.745213023321599
805,5,"

def solve(list_of_lists):
    max_sum = 0
    max_list = []
    
    for lst in list_of_lists:
        sum_lst = sum(lst)
        if sum_lst > max_sum:
            max_sum = sum_lst
            max_list = lst
    
    return max_list",0.898,-6.4538054344709
806,1,"

def solve(string):
    max_count = 0
    current_count = 0
    for char in string:
        if char.isupper():
            current_count += 1
            if current_count > max_count:
                max_count = current_count
        else:
            current_count = 0
    return max_count",0.9362,-4.414623010146997
806,2,"

def solve(string):
    max_run = 0
    curr_run = 0
    
    for char in string:
        if char.isupper():
            curr_run += 1
        else:
            max_run = max(max_run, curr_run)
            curr_run = 0
    
    return max_run",0.8805,-8.019111050159001
806,3,"

def solve(string):
    max_run = 0
    current_run = 0
    for char in string:
        if char.isupper():
            current_run += 1
            if current_run > max_run:
                max_run = current_run
        else:
            current_run = 0
    return max_run",0.9611,-2.6590204898645
806,4,"

def solve(string):
    max_run = 0
    current_run = 0
    
    for char in string:
        if char.isupper():
            current_run += 1
            if current_run > max_run:
                max_run = current_run
        else:
            current_run = 0
    
    return max_run",0.9394,-4.190695283706001
806,5,"

def solve(s):
    max_run = 0
    curr_run = 0
    for i in range(len(s)):
        if s[i].isupper():
            curr_run += 1
            if curr_run > max_run:
                max_run = curr_run
        else:
            curr_run = 0
    return max_run",0.9165,-6.194503238473998
807,1,"

def solve(numbers):
    for num in numbers:
        if num % 2 != 0:
            return num",0.9599,-0.9810048173647
807,2,"

def solve(nums):
    for num in nums:
        if num % 2 == 1:
            return num
    return None",0.8319,-5.151537678522301
807,3,"

def solve(numbers):
    for num in numbers:
        if num % 2 != 0:
            return num",0.9599,-0.9810048173647
807,4,"

def solve(lst):
    for num in lst:
        if num % 2 != 0:
            return num",0.8933,-2.7086980776146
807,5,"

def solve(numbers):
    for num in numbers:
        if num % 2 != 0:
            return num",0.9599,-0.9810048173647
808,1,"

def solve(tuples, k):
    for tup in tuples:
        if k in tup:
            return True
    return False",0.9642,-0.98560300509
808,2,"

def solve(tuples, k):
    for tup in tuples:
        if k in tup:
            return True
    return False",0.9642,-0.98560300509
808,3,"

def solve(tuples, k):
    for tup in tuples:
        if k in tup:
            return True
    return False",0.9642,-0.98560300509
808,4,"

def solve(tuples, k):
    for tup in tuples:
        if k in tup:
            return True
    return False",0.9642,-0.98560300509
808,5,"

def solve(tuples, k):
    for tup in tuples:
        if k in tup:
            return True
    return False",0.9642,-0.98560300509
809,1,"

def solve(tup1, tup2):
    for i in range(len(tup1)):
        if tup2[i] >= tup1[i]:
            return False
    return True",0.948,-2.0288912874213
809,2,"

def solve(first_tuple, second_tuple):
    for i in range(len(first_tuple)):
        if second_tuple[i] >= i:
            return False
    return True",0.91,-3.2076405680310005
809,3,"

def solve(tuple1, tuple2):
    for i in range(len(tuple1)):
        if tuple2[i] >= tuple1[i]:
            return False
    return True",0.9244,-2.8295888606958983
809,4,"

def solve(first_tuple, second_tuple):
    for i in range(len(first_tuple)):
        if second_tuple[i] >= first_tuple[i]:
            return False
    return True",0.9316,-2.548798496224
809,5,"

def solve(t1, t2):
    for i in range(len(t1)):
        if t2[i] >= t1[i]:
            return False
    return True",0.9129,-3.2797594299716
810,1,"

def solve(arr):
    result = []
    for i in arr:
        for j in range(i.count):
            result.append(i.element)
    return result",0.739,-9.679669984747004
810,2,"

def solve(lst):
    new_lst = []
    for ele in lst:
        count = lst.count(ele)
        for i in range(count):
            new_lst.append(ele)
    return new_lst",0.8247,-7.710282439835002
810,3,"

def solve(elements):
    result = []
    for element in elements:
        for i in range(elements[element]):
            result.append(element)
    return result",0.8631,-4.564786863275001
810,4,"

def solve(elements):
    result = []
    for element in elements:
        result.extend([element] * elements.count(element))
    return result",0.8357,-5.203910396202
810,5,"

def solve(elements):
    result = []
    for element in elements:
        count = elements.count(element)
        for i in range(count):
            result.append(element)
    return result",0.8896,-4.329298262795
811,1,"
def solve(list1, list2):
    if len(list1) != len(list2):
        return False
    
    for i in range(len(list1)):
        if list1[i] != list2[i]:
            return False
    
    return True ",0.8493,-8.494895654683601
811,2,"

def solve(list1, list2):
    if len(list1) != len(list2):
        return False
    
    for i in range(len(list1)):
        if list1[i] != list2[i]:
            return False
    
    return True",0.9473,-2.761892387210101
811,3,"

def solve(list1, list2):
    if len(list1) != len(list2):
        return False
    else:
        for i in range(len(list1)):
            if list1[i] != list2[i]:
                return False
        return True",0.9652,-1.9135215644310997
811,4,"

def solve(list1, list2):
    if len(list1) != len(list2):
        return False
    
    for i in range(len(list1)):
        if list1[i] != list2[i]:
            return False
    return True",0.9073,-4.962409443405101
811,5,"

def solve(list1, list2):
    if len(list1) != len(list2):
        return False
    else:
        for i in range(len(list1)):
            if list1[i] != list2[i]:
                return False
        return True",0.9652,-1.9135215644310997
812,1,"

def solve(s):
  return s.replace('road', 'rd.')",0.6915,-5.534020506930001
812,2,"

def solve(string):
    string = string.replace('road', 'rd.')
    return string ",0.7218,-6.518936072171999
812,3,"

def solve(string):
    string = string.replace(""road"", ""rd."")
    return string",0.8355,-3.414534740883999
812,4,"

def solve(string):
    return string.replace('road', 'rd.')",0.8849,-1.833937366412
812,5,"

def solve(string):
    return string.replace('road', 'rd.')",0.8849,-1.833937366412
813,1,"

def solve(string):
    return len(string)",0.9168,-0.8681733532559999
813,2,"

def solve(string):
    return len(string)",0.9168,-0.8681733532559999
813,3,"

def solve(string):
    return len(string)",0.9168,-0.8681733532559999
813,4,"

def solve(string):
    length = 0
    for char in string:
        length += 1
    return length",0.9347,-1.7564803382319998
813,5,"

def solve(str):
    return len(str)",0.7148,-3.356841867666
814,1,"

def solve(base, height):
    return base * height",0.8603,-1.8050426337
814,2,"

def solve(diagonal1, diagonal2):
    return (diagonal1 * diagonal2) / 2",0.8622,-3.410180674086
814,3,"

def solve(a, b):
    return (a*b)/2",0.7843,-3.401681402959999
814,4,"

def solve(base, height):
    return base * height",0.8603,-1.8050426337
814,5,"

def solve(base, height):
    area = base * height
    return area",0.8597,-2.568958630397999
815,1,"

def solve(arr):
    count_0 = 0
    count_1 = 0
    count_2 = 0
    
    for num in arr:
        if num == 0:
            count_0 += 1
        elif num == 1:
            count_1 += 1
        else:
            count_2 += 1
            
    sorted_arr = [0] * count_0 + [1] * count_1 + [2] * count_2
    
    return sorted_arr",0.9348,-7.285931451918597
815,2,"

def solve(arr):
    # count the number of 0s, 1s, and 2s in the array
    count0 = 0
    count1 = 0
    count2 = 0
    
    for num in arr:
        if num == 0:
            count0 += 1
        elif num == 1:
            count1 += 1
        else:
            count2 += 1
    
    # update the array with the correct number of 0s, 1s, and 2s in order
    for i in range(len(arr)):
        if count0 > 0:
            arr[i] = 0
            count0 -= 1
        elif count1 > 0:
            arr[i] = 1
            count1 -= 1
        else:
            arr[i] = 2
            count2 -= 1
    
    return arr",0.9159,-16.87166542064845
815,3,"

def solve(arr):
    count_0 = 0
    count_1 = 0
    count_2 = 0
    
    for num in arr:
        if num == 0:
            count_0 += 1
        elif num == 1:
            count_1 += 1
        else:
            count_2 += 1
            
    sorted_arr = [0] * count_0 + [1] * count_1 + [2] * count_2
    
    return sorted_arr",0.9348,-7.285931451918597
815,4,"

def solve(arr):
    left, mid, right = 0, 0, len(arr)-1
    
    while mid <= right:
        if arr[mid] == 0:
            arr[left], arr[mid] = arr[mid], arr[left]
            left += 1
            mid += 1
        elif arr[mid] == 1:
            mid += 1
        else:
            arr[mid], arr[right] = arr[right], arr[mid]
            right -= 1
    
    return arr",0.9049,-10.487409913259002
815,5,"

def solve(arr):
    count = [0, 0, 0]
    for num in arr:
        count[num] += 1
    idx = 0
    for i in range(3):
        for j in range(count[i]):
            arr[idx] = i
            idx += 1
    return arr",0.8796,-8.848508414780804
816,1,"

def solve(tuples):
    return [tuple() for _ in tuples]",0.7148,-5.37165004597
816,2,"

def solve(tuples):
    for t in tuples:
        tuples[t] = None
    return tuples",0.7655,-5.87922468343
816,3,"

def solve(tup):
    tup = ()
    return tup",0.7018,-4.603456469199999
816,4,"

def solve(tuples):
    return tuple(tuple() for _ in tuples)",0.688,-5.9826237966499995
816,5,"

def solve(tup):
    tup = ()
    return tup",0.7018,-4.603456469199999
817,1,"

def solve(numbers, m, n):
    return list(filter(lambda x: x % m == 0 or x % n == 0, numbers))",0.9505,-1.6235060503040002
817,2,"

def solve(nums, m, n):
    return list(filter(lambda x: x%m == 0 or x%n == 0, nums))",0.8663,-4.305764674513999
817,3,"

def solve(numbers, m, n):
    return list(filter(lambda x: x % m == 0 or x % n == 0, numbers))",0.9505,-1.6235060503040002
817,4,"

def solve(m, n, numbers):
    return list(filter(lambda x: x % m == 0 or x % n == 0, numbers))",0.8674,-4.553110809886799
817,5,"

def solve(lst, m, n):
    return list(filter(lambda x: x % m == 0 or x % n == 0, lst))",0.9315,-2.2692803974260003
818,1,"

def solve(string):
    lower_count = 0
    for char in string:
        if char.islower():
            lower_count += 1
    return lower_count",0.8769,-4.598380638848
818,2,"

def solve(s):
    count = 0
    for letter in s:
        if letter.islower():
            count += 1
    return count",0.9077,-3.0995733340790004
818,3,"

def solve(string):
    count = 0
    for letter in string:
        if letter.islower():
            count += 1
    return count",0.9483,-1.6991689899503
818,4,"

def solve(s):
    count = 0
    for letter in s:
        if letter.islower():
            count += 1
    return count",0.9077,-3.0995733340790004
818,5,"

def solve(s):
    count = 0
    for char in s:
        if char.islower():
            count += 1
    return count",0.9192,-2.6974021262066
819,1,"

def solve(lst):
    count = 0
    for i in range(len(lst)-1):
        if lst[i] == lst[i+1]:
            count += 1
    return count",0.9419,-2.4542684025785
819,2,"

def solve(lst):
    count = 0
    for i in range(len(lst)-1):
        if lst[i] == lst[i+1]:
            count += 1
    return count",0.9419,-2.4542684025785
819,3,"

def solve(lst):
    count = 0
    for i in range(len(lst)-1):
        if lst[i] == lst[i+1]:
            count += 1
    return count",0.9419,-2.4542684025785
819,4,"

def solve(lst):
    count = 0
    for i in range(len(lst)-1):
        if lst[i] == lst[i+1]:
            count += 1
    return count",0.9419,-2.4542684025785
819,5,"

def solve(lst):
    count = 0
    prev = None
    for num in lst:
        if num == prev:
            count += 1
        else:
            prev = num
    return count",0.8995,-4.7637891393139995
820,1,"

def solve(month):
    if month == 2:
        return True
    else:
        return False",0.9588,-0.9261096536440002
820,2,"

def solve(month):
    if month == 2:
        return True
    else:
        return False",0.9588,-0.9261096536440002
820,3,"

def solve(month):
    if month in [2]:
        return ""This month contains 28 days.""
    else:
        return ""This month does not contain 28 days.""",0.8459,-6.190375441521
820,4,"

def solve(month):
    if month == 2:
        return True
    else:
        return False",0.9588,-0.9261096536440002
820,5,"

def solve(month):
    if month == 2:
        return True
    else:
        return False",0.9588,-0.9261096536440002
821,1,"

def solve(dict1, dict2):
    return {**dict1, **dict2}",0.9782,-0.4412776936096
821,2,"

def solve(dict1, dict2):
    return {**dict1, **dict2}",0.9782,-0.4412776936096
821,3,"

def solve(dict1, dict2):
    return {**dict1, **dict2}",0.9782,-0.4412776936096
821,4,"

def solve(dict1, dict2):
    return {**dict1, **dict2}",0.9782,-0.4412776936096
821,5,"

def solve(dict1, dict2):
    return {**dict1, **dict2}",0.9782,-0.4412776936096
822,1,"

def solve(password):
    if len(password) < 8:
        return False
    if not any(char.isdigit() for char in password):
        return False
    if not any(char.isupper() for char in password):
        return False
    if not any(char.islower() for char in password):
        return False
    if not any(char in ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '+']
        for char in password):
        return False
    return True",0.8741,-14.671059711888502
822,2,"

def solve(password):
    if len(password) < 8:
        return False
    has_upper = False
    has_lower = False
    has_digit = False
    for char in password:
        if char.isupper():
            has_upper = True
        if char.islower():
            has_lower = True
        if char.isdigit():
            has_digit = True
    if has_upper and has_lower and has_digit:
        return True
    else:
        return False",0.9355,-6.531509659884697
822,3,"

def solve(password):
    if len(password) < 8:
        return False
    if not any(char.isdigit() for char in password):
        return False
    if not any(char.isupper() for char in password):
        return False
    if not any(char.islower() for char in password):
        return False
    if not any(char in ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '+', '=', '{', '}', '[', ']', '\\', '|', ':', ';', '""', ""'"", '<', '>', ',', '.', '?', '/'] for char in password):
        return False
    return True",0.8886,-16.422088906256505
822,4,"

def solve(password):
    if len(password) < 8:
        return False
    elif password.isdigit() or password.isalpha():
        return False
    elif password.islower() or password.isupper():
        return False
    else:
        return True",0.8299,-9.882077312142002
822,5,"

def solve(password):
    if len(password) < 8:
        return False
        
    has_upper = False
    has_lower = False
    has_digit = False
    
    for char in password:
        if char.isupper():
            has_upper = True
        elif char.islower():
            has_lower = True
        elif char.isdigit():
            has_digit = True
            
    return has_upper and has_lower and has_digit",0.8944,-9.708463257672
823,1,"

import re

def solve(string, substring):
    pattern = ""^"" + substring
    if re.search(pattern, string):
        return True
    else:
        return False",0.9156,-3.174241805663
823,2,"

def solve(string, substring):
    pattern = ""^"" + substring
    if re.search(pattern, string):
        return True
    else:
        return False",0.9092,-3.142895782846999
823,3,"

import re

def solve(s, sub):
    pattern = ""^"" + sub
    if re.search(pattern, s):
        return True
    else:
        return False",0.8109,-7.544150372018002
823,4,"

import re

def solve(string, substring):
    pattern = ""^"" + substring
    match = re.search(pattern, string)
    if match:
        return True
    else:
        return False",0.9227,-3.2999806711299993
823,5,"

import re

def solve(string, substring):
    pattern = ""^"" + substring
    if re.match(pattern, string):
        return True
    else:
        return False",0.8921,-4.110766406483
824,1,"

def solve(lst):
    new_list = []
    for num in lst:
        if num % 2 != 0:
            new_list.append(num)
    return new_list",0.8702,-5.0051571635226
824,2,"

def solve(lst):
    result = []
    for num in lst:
        if num % 2 != 0:
            result.append(num)
    return result",0.9068,-3.229620316589098
824,3,"

def solve(lst):
    new_lst = [num for num in lst if num % 2 != 0]
    return new_lst",0.8454,-4.701285027878598
824,4,"

def solve(lst):
    result = []
    for num in lst:
        if num % 2 != 0:
            result.append(num)
    return result",0.9068,-3.229620316589098
824,5,"

def solve(lst):
    new_lst = []
    for num in lst:
        if num % 2 != 0:
            new_lst.append(num)
    return new_lst",0.9408,-2.197892414280601
825,1,"

def solve(lst, *indices):
    return [lst[i] for i in indices]",0.8337,-3.4568787320950007
825,2,"

def solve(lst, indices):
    return [lst[i] for i in indices]",0.9132,-1.6341199286360002
825,3,"

def solve(lst, indices):
    return [lst[i] for i in indices]",0.9132,-1.6341199286360002
825,4,"

def solve(lst, indices):
    return [lst[i] for i in indices]",0.9132,-1.6341199286360002
825,5,"

def solve(lst, indices):
    return [lst[i] for i in indices]",0.9132,-1.6341199286360002
826,1,"

def solve(a, b, c):
    if a == b == c:
        return ""Equilateral Triangle""
    elif a == b or b == c or a == c:
        return ""Isosceles Triangle""
    else:
        return ""Scalene Triangle""",0.9376,-3.737737374242
826,2,"

def solve(side1, side2, side3):
    if side1 == side2 == side3:
        return ""Equilateral Triangle""
    elif side1 == side2 or side1 == side3 or side2 == side3:
        return ""Isosceles Triangle""
    else:
        return ""Scalene Triangle""",0.9593,-2.9060230205716993
826,3,"

def solve(a, b, c):
    if a == b == c:
        return ""Equilateral""
    elif a == b or b == c or a == c:
        return ""Isosceles""
    else:
        return ""Scalene""",0.9224,-4.4408261121905035
826,4,"

def solve(side1, side2, side3):
    if side1 == side2 and side2 == side3:
        return ""Equilateral Triangle""
    elif side1 == side2 or side2 == side3 or side1 == side3:
        return ""Isosceles Triangle""
    else:
        return ""Scalene Triangle""",0.9488,-3.839991380044699
826,5,"

def solve(side1, side2, side3):
    # Check if all sides are equal
    if side1 == side2 == side3:
        return ""Equilateral triangle""
    # Check if two sides are equal
    elif side1 == side2 or side1 == side3 or side2 == side3:
        return ""Isosceles triangle""
    # Check if all sides are different
    else:
        return ""Scalene triangle""",0.8541,-15.297779336226196
827,1,"

def solve(lists, column):
    total = 0
    for lst in lists:
        total += lst[column]
    return total",0.8952,-3.210798094901
827,2,"

def solve(list_of_lists, column):
    total = 0
    for lst in list_of_lists:
        total += lst[column]
    return total",0.9092,-3.045946385095
827,3,"

def solve(list_of_lists, column_index):
    total_sum = 0
    for l in list_of_lists:
        total_sum += l[column_index]
    return total_sum",0.7491,-10.690326339853302
827,4,"

def solve(list_of_lists, column):
    sum = 0
    for list in list_of_lists:
        sum += list[column]
    return sum",0.8377,-5.665935957806001
827,5,"

def solve(lst, col):
    total = 0
    for row in lst:
        total += row[col]
    return total",0.8954,-3.0946226148679985
828,1,"

def solve(string):
    alpha = 0
    digit = 0
    special = 0
    for char in string:
        if char.isalpha():
            alpha += 1
        elif char.isdigit():
            digit += 1
        else:
            special += 1
    return alpha, digit, special",0.937,-4.4223630494998
828,2,"

def solve(string):
    alphabets = 0
    digits = 0
    special = 0

    for char in string:
        if char.isalpha():
            alphabets += 1
        elif char.isdigit():
            digits += 1
        else:
            special += 1

    return alphabets, digits, special",0.9165,-6.456158013757
828,3,"

def solve(s):
    alphabets = 0
    digits = 0
    special_chars = 0
    
    for char in s:
        if char.isalpha():
            alphabets += 1
        elif char.isdigit():
            digits += 1
        else:
            special_chars += 1
    
    return alphabets, digits, special_chars",0.9359,-5.099010696727796
828,4,"

def solve(string):
    alpha = 0
    digit = 0
    special = 0
    
    for char in string:
        if char.isalpha():
            alpha += 1
        elif char.isdigit():
            digit += 1
        else:
            special += 1
    
    return alpha, digit, special",0.9258,-5.239344856261302
828,5,"

def solve(string):
    alphabet_count = 0
    digit_count = 0
    special_char_count = 0
    
    for char in string:
        if char.isalpha():
            alphabet_count += 1
        elif char.isdigit():
            digit_count += 1
        else:
            special_char_count += 1
    
    return alphabet_count, digit_count, special_char_count",0.9514,-3.989186036880001
829,1,"

def solve(seq):
    freq = {}
    for s in seq:
        if s in freq:
            freq[s] += 1
        else:
            freq[s] = 1
    
    max_freq = 0
    second_freq = 0
    max_s = ''
    second_s = ''

    for s in freq:
        if freq[s] > max_freq:
            second_freq = max_freq
            max_freq = freq[s]
            second_s = max_s
            max_s = s
        elif freq[s] > second_freq:
            second_freq = freq[s]
            second_s = s
    
    return second_s",0.8671,-18.829691024423003
829,2,"

def solve(sequence):
    # create a dictionary to store the count of each string
    freq = {}
    for string in sequence:
        if string in freq:
            freq[string] += 1
        else:
            freq[string] = 1
    
    # create a list to store the count of each string in descending order
    count_list = sorted(freq.values(), reverse=True)
    
    # find the second most frequent count
    second_freq = count_list[1]
    
    # create a list to store the strings with the second most frequent count
    second_most_common = []
    for key, value in freq.items():
        if value == second_freq:
            second_most_common.append(key)
    
    # return the first string in the list as the second most repeated string
    return second_most_common[0]",0.8388,-29.88630932221001
829,3,"

def solve(sequence):
    freq_dict = {}
    for string in sequence:
        if string not in freq_dict:
            freq_dict[string] = 1
        else:
            freq_dict[string] += 1
    
    sorted_freq = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)
    return sorted_freq[1][0]",0.8741,-9.955484943828496
829,4,"

def solve(seq):
    freq_dict = {}
    for string in seq:
        if string in freq_dict:
            freq_dict[string] += 1
        else:
            freq_dict[string] = 1
    
    sorted_freq = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)
    return sorted_freq[1][0]",0.9085,-7.0045051525919995
829,5,"

def solve(seq):
  # create a dictionary to store the count of each string
  count_dict = {}
  # loop through the sequence and update the count for each string
  for string in seq:
    if string in count_dict:
      count_dict[string] += 1
    else:
      count_dict[string] = 1
  # sort the dictionary by value in descending order
  sorted_dict = sorted(count_dict.items(), key=lambda x: x[1], reverse=True)
  # return the second most repeated string
  return sorted_dict[1][0]",0.8696,-16.763378245483
830,1,"

def solve(num, digits):
    return round(num, digits)",0.9421,-0.83442772697
830,2,"

def solve(num, digits):
    return round(num, digits)",0.9421,-0.83442772697
830,3,"

def solve(num, digits):
    multiplier = 10 ** digits
    return int(num * multiplier + 0.5) / multiplier",0.834,-5.262435321229999
830,4,"

def solve(num, digits):
    return round(num, digits)",0.9421,-0.83442772697
830,5,"

def solve(num, digits):
    return round(num, digits)",0.9421,-0.83442772697
831,1,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] == arr[j]:
                count += 1
    return count",0.9898,-0.5011823614092998
831,2,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] == arr[j]:
                count += 1
    return count",0.9898,-0.5011823614092998
831,3,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] == arr[j]:
                count += 1
    return count",0.9898,-0.5011823614092998
831,4,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] == arr[j]:
                count += 1
    return count",0.9898,-0.5011823614092998
831,5,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] == arr[j]:
                count += 1
    return count",0.9898,-0.5011823614092998
832,1,"

import re

def solve(string):
    numbers = re.findall(r'\d+', string)
    return max(map(int, numbers))",0.8525,-4.3093810758505
832,2,"

import re
def solve(string):
    nums = re.findall(r'\d+', string)
    nums = [int(num) for num in nums]
    return max(nums)",0.8378,-6.371346336566502
832,3,"

import re

def solve(string):
    regex = r'\d+'
    numbers = re.findall(regex, string)
    numbers = [int(num) for num in numbers]
    return max(numbers)",0.8205,-8.308395316324301
832,4,"

import re
def solve(string):
    numbers = re.findall(""[0-9]+"", string)
    max_number = max(numbers, key=int)
    return max_number",0.7244,-11.286419291423998
832,5,"
def solve(string):
    import re
    nums = re.findall(r""\d+"", string)
    max_num = max(map(int, nums))
    return max_num",0.7058,-11.846365878188005
833,1,"

def solve(dictionary):
    return list(dictionary.keys())",0.9339,-0.75217597244
833,2,"

def solve(dictionary):
    keys = list(dictionary.keys())
    return keys",0.8478,-2.47585380704
833,3,"

def solve(dictionary):
    return list(dictionary.keys())",0.9339,-0.75217597244
833,4,"

def solve(dictionary):
    return list(dictionary.keys())",0.9339,-0.75217597244
833,5,"

def solve(dictionary):
    return list(dictionary.keys())",0.9339,-0.75217597244
834,1,"

def solve(n):
    matrix = [[0 for i in range(n)] for j in range(n)]
    left = 0
    right = n-1
    top = 0
    bottom = n-1
    num = 1

    while left <= right and top <= bottom:
        for i in range(left, right+1):
            matrix[top][i] = num**2
            num += 1
        top += 1

        for i in range(top, bottom+1):
            matrix[i][right] = num**2
            num += 1
        right -= 1

        for i in range(right, left-1, -1):
            matrix[bottom][i] = num**2
            num += 1
        bottom -= 1

        for i in range(bottom, top-1, -1):
            matrix[i][left] = num**2
            num += 1
        left += 1

    return matrix",0.9654,-7.3915045548338
834,2,"

def solve(n):
    matrix = [[0 for i in range(n)] for j in range(n)]
    num = 1
    top = 0
    bottom = n - 1
    left = 0
    right = n - 1

    while top <= bottom and left <= right:
        for i in range(left, right + 1):
            matrix[top][i] = num ** 2
            num += 1
        top += 1

        for i in range(top, bottom + 1):
            matrix[i][right] = num ** 2
            num += 1
        right -= 1

        for i in range(right, left - 1, -1):
            matrix[bottom][i] = num ** 2
            num += 1
        bottom -= 1

        for i in range(bottom, top - 1, -1):
            matrix[i][left] = num ** 2
            num += 1
        left += 1

    return matrix",0.9663,-7.549204971111798
834,3,"

def solve(n):
    matrix = [[0 for i in range(n)] for j in range(n)]
    row_start = 0
    row_end = n - 1
    col_start = 0
    col_end = n - 1
    num = 1

    while row_start <= row_end and col_start <= col_end:
        for i in range(col_start, col_end + 1):
            matrix[row_start][i] = num * num
            num += 1
        row_start += 1

        for i in range(row_start, row_end + 1):
            matrix[i][col_end] = num * num
            num += 1
        col_end -= 1

        if row_start <= row_end:
            for i in range(col_end, col_start - 1, -1):
                matrix[row_end][i] = num * num
                num += 1
            row_end -= 1

        if col_start <= col_end:
            for i in range(row_end, row_start - 1, -1):
                matrix[i][col_start] = num * num
                num += 1
            col_start += 1

    return matrix",0.9611,-10.123212382321316
834,4,"

def solve(n):
    matrix = [[0 for i in range(n)] for j in range(n)]
    top = 0
    bottom = n - 1
    left = 0
    right = n - 1
    num = 1

    while num <= n*n:
        for i in range(left, right+1):
            matrix[top][i] = num
            num += 1
        top += 1

        for i in range(top, bottom+1):
            matrix[i][right] = num
            num += 1
        right -= 1

        for i in range(right, left-1, -1):
            matrix[bottom][i] = num
            num += 1
        bottom -= 1

        for i in range(bottom, top-1, -1):
            matrix[i][left] = num
            num += 1
        left += 1

    return matrix",0.951,-10.1023074938319
834,5,"

def solve(n):
    matrix = [[0 for i in range(n)] for j in range(n)]
    start_row = 0
    end_row = n-1
    start_col = 0
    end_col = n-1
    num = 1

    while start_row <= end_row and start_col <= end_col:
        for i in range(start_col, end_col+1):
            matrix[start_row][i] = num
            num += 1
        start_row += 1

        for i in range(start_row, end_row+1):
            matrix[i][end_col] = num
            num += 1
        end_col -= 1

        for i in range(end_col, start_col-1, -1):
            matrix[end_row][i] = num
            num += 1
        end_row -= 1

        for i in range(end_row, start_row-1, -1):
            matrix[i][start_col] = num
            num += 1
        start_col += 1

    return matrix",0.9578,-9.7046887707347
835,1,"

def solve(x1, y1, x2, y2):
    slope = (y2 - y1) / (x2 - x1)
    return slope",0.9736,-0.9644030393096004
835,2,"

def solve(x1, y1, x2, y2):
    slope = (y2 - y1) / (x2 - x1)
    return slope",0.9736,-0.9644030393096004
835,3,"

def solve(x1, y1, x2, y2):
    slope = (y2 - y1) / (x2 - x1)
    return slope",0.9736,-0.9644030393096004
835,4,"

def solve(x1, y1, x2, y2):
    slope = (y2 - y1) / (x2 - x1)
    return slope",0.9736,-0.9644030393096004
835,5,"

def solve(x1, y1, x2, y2):
    slope = (y2-y1)/(x2-x1)
    return slope",0.9511,-1.6053432163534
836,1,"

def solve(arr):
    max_sum = 0
    curr_sum = 0
    max_len = 0
    curr_len = 0
    for num in arr:
        curr_sum += num
        curr_len += 1
        if curr_sum > max_sum:
            max_sum = curr_sum
            max_len = curr_len
        elif curr_sum < 0:
            curr_sum = 0
            curr_len = 0
    return max_len",0.9358,-6.634670764784002
836,2,"

def solve(arr):
  max_sum = float('-inf')
  max_length = 0
  curr_sum = 0
  curr_length = 0
  for i in range(len(arr)):
    curr_sum += arr[i]
    curr_length += 1
    if curr_sum > max_sum:
      max_sum = curr_sum
      max_length = curr_length
    elif curr_sum < 0:
      curr_sum = 0
      curr_length = 0
  return max_length",0.8783,-13.490492662796804
836,3,"

def solve(arr):
    max_len = 0
    max_sum = 0
    current_len = 0
    current_sum = 0
    
    for num in arr:
        current_len += 1
        current_sum += num
        
        if current_sum > max_sum:
            max_sum = current_sum
            max_len = current_len
        elif current_sum < 0:
            current_len = 0
            current_sum = 0
    
    return max_len",0.915,-8.887013925242602
836,4,"

def solve(arr):
    max_length = 0
    curr_length = 0
    max_sum = 0
    curr_sum = 0

    for i in range(len(arr)):
        curr_length += 1
        curr_sum += arr[i]

        if curr_sum > max_sum:
            max_sum = curr_sum
            max_length = curr_length
        elif curr_sum < 0:
            curr_sum = 0
            curr_length = 0

    return max_length",0.8875,-12.298051634057002
836,5,"

def solve(arr):
    max_sum = 0
    cur_sum = 0
    start = 0
    end = 0
    for i in range(len(arr)):
        cur_sum += arr[i]
        if cur_sum > max_sum:
            max_sum = cur_sum
            end = i
        if cur_sum < 0:
            cur_sum = 0
            start = i + 1
    return end - start + 1",0.9276,-7.286730905040002
837,1,"

def solve(n):
    sum = 0
    for i in range(1, 2*n, 2):
        sum += i**3
    return sum",0.9433,-2.1000861562370003
837,2,"

def solve(n): 
    result = 0
    for i in range(1, n*2, 2): 
        result += i**3 
    return result",0.7259,-12.172606814742997
837,3,"

def solve(n):
    sum = 0
    for i in range(1, n*2, 2):
        sum += i**3
    return sum",0.9219,-2.9268030123810007
837,4,"

def solve(n):
    sum = 0
    for i in range(1, n*2, 2):
        sum += i**3
    return sum",0.9219,-2.9268030123810007
837,5,"

def solve(n):
    sum = 0
    for i in range(1, n*2, 2):
        sum += i**3
    return sum",0.9219,-2.9268030123810007
838,1,"

def solve(s1, s2):
    count = 0
    for i in range(len(s1)):
        if s1[i] != s2[i]:
            count += 1
    return count//2",0.9619,-1.786842301875
838,2,"

def solve(s1, s2):
    count = 0
    for i in range(len(s1)):
        if s1[i] != s2[i]:
            count += 1
    return count // 2",0.9501,-2.4075620562155
838,3,"

def solve(s1, s2):
    count = 0
    for i in range(len(s1)):
        if s1[i] != s2[i]:
            count += 1
    return count//2",0.9619,-1.786842301875
838,4,"

def solve(s1, s2):
    count = 0
    for i in range(len(s1)):
        if s1[i] != s2[i]:
            count += 1
    return count//2",0.9619,-1.786842301875
838,5,"

def solve(s1, s2):
    count = 0
    for i in range(len(s1)):
        if s1[i] != s2[i]:
            count += 1
    return count // 2",0.9501,-2.4075620562155
839,1,"

def solve(tuples):
    return sorted(tuples, key=lambda x: x[0])",0.956,-0.9008978707
839,2,"

def solve(tuples): 
    return sorted(tuples, key=lambda x: x[0])",0.8284,-3.9526932099040017
839,3,"

def solve(tuples): 
    return sorted(tuples, key=lambda x: x[0])",0.8284,-3.9526932099040017
839,4,"

def solve(tuples):
    return sorted(tuples, key=lambda x: x[0])",0.956,-0.9008978707
839,5,"

def solve(tuples):
    return sorted(tuples, key=lambda tup: tup[0])",0.8479,-3.300045664192
840,1,"

def solve(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant < 0:
        return False
    elif discriminant == 0:
        return True
    else:
        root1 = (-b + discriminant**0.5) / (2*a)
        root2 = (-b - discriminant**0.5) / (2*a)
        if root1 == -root2:
            return True
        else:
            return False",0.9434,-6.174655554425701
840,2,"

def solve(a, b, c):
    discriminant = (b**2) - (4*a*c)
    if discriminant < 0:
        return False
    else:
        root1 = (-b+ (discriminant)**0.5) / (2*a)
        root2 = (-b- (discriminant)**0.5) / (2*a)
        if root1 == -root2:
            return True
        else:
            return False",0.8812,-12.649694823372096
840,3,"

def solve(a, b, c):
    discriminant = (b**2) - (4*a*c)
    if discriminant < 0:
        return False
    else:
        root1 = (-b + (discriminant ** 0.5)) / (2*a)
        root2 = (-b - (discriminant ** 0.5)) / (2*a)
        if root1 == -root2:
            return True
        else:
            return False",0.9409,-6.213258892105098
840,4,"

def solve(a, b, c):
    discriminant = (b**2) - (4*a*c)
    if discriminant >= 0:
        root1 = (-b + (discriminant**0.5)) / (2*a)
        root2 = (-b - (discriminant**0.5)) / (2*a)
        if root1 == -root2:
            if root1 > 0:
                return True
            else:
                return False
        else:
            return False
    else:
        return False",0.9035,-11.675784963713502
840,5,"

def solve(a,b,c):
    discriminant = (b**2) - (4*a*c)
    if discriminant >= 0:
        root1 = (-b + (discriminant)**0.5)/(2*a)
        root2 = (-b - (discriminant)**0.5)/(2*a)
        if root1 == -root2:
            return True
        else:
            return False
    else:
        return False",0.9113,-8.7275779619886
841,1,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] > arr[j]:
                count += 1
    return count",0.9855,-0.7153593405442
841,2,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] > arr[j]:
                count += 1
    return count",0.9855,-0.7153593405442
841,3,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] > arr[j]:
                count += 1
    return count",0.9855,-0.7153593405442
841,4,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] > arr[j]:
                count += 1
    return count",0.9855,-0.7153593405442
841,5,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if arr[i] > arr[j]:
                count += 1
    return count",0.9855,-0.7153593405442
842,1,"

def solve(arr):
    count_dict = {}
    for num in arr:
        if num in count_dict:
            count_dict[num] += 1
        else:
            count_dict[num] = 1
    
    for key, value in count_dict.items():
        if value % 2 != 0:
            return key",0.9209,-5.5197450618765025
842,2,"

def solve(arr):
    counts = {} 
    for num in arr: 
        if num in counts: 
            counts[num] += 1
        else: 
            counts[num] = 1
    for key, value in counts.items(): 
        if value % 2 == 1: 
            return key",0.8422,-11.678707841033
842,3,"

def solve(arr):
    count = {}
    for num in arr:
        if num in count:
            count[num] += 1
        else:
            count[num] = 1
    for key, val in count.items():
        if val % 2 != 0:
            return key",0.9164,-5.41308886404
842,4,"

def solve(arr):
    result = 0
    for num in arr:
        result ^= num
    return result",0.9012,-2.601795299705
842,5,"

def solve(arr):
    # initialize a dictionary to store the count of each number
    count = {}
    
    # loop through the array and update the count for each number
    for num in arr:
        if num in count:
            count[num] += 1
        else:
            count[num] = 1
    
    # loop through the dictionary and find the number with odd count
    for num, cnt in count.items():
        if cnt % 2 != 0:
            return num",0.8726,-14.172838606688003
843,1,"

import heapq

def solve(n, primes):
    uglies = [1]
    heap = [(1, 0)]
    for _ in range(n):
        next_ugly, idx = heapq.heappop(heap)
        for i in range(idx, len(primes)):
            new_ugly = next_ugly * primes[i]
            if new_ugly not in uglies:
                heapq.heappush(heap, (new_ugly, i))
                uglies.append(new_ugly)
    return uglies[-1]",0.841,-19.7410160018673
843,2,"

import heapq

def solve(n, primes):
    heap = [1]
    heapq.heapify(heap)
    visited = set()
    
    for i in range(n):
        ugly = heapq.heappop(heap)
        for p in primes:
            if ugly*p not in visited:
                visited.add(ugly*p)
                heapq.heappush(heap, ugly*p)
    return ugly",0.7964,-17.987006474549602
843,3,"

import heapq

def solve(n, primes):
    heap = [1]
    count = 0
    while count < n:
        num = heapq.heappop(heap)
        for prime in primes:
            heapq.heappush(heap, prime * num)
        
        count += 1
        
    return num",0.7596,-17.593876532642106
843,4,"

import heapq

def solve(n, primes):
    
    heap = [1]
    heapq.heapify(heap)
    
    for i in range(n):
        ugly_num = heapq.heappop(heap)
        
        for prime in primes:
            heapq.heappush(heap, ugly_num * prime)
            
            if ugly_num % prime == 0:
                break
                
    return ugly_num",0.8607,-11.703601798211803
843,5,"

import heapq

def solve(n, primes):
    heap = [1]
    heapq.heapify(heap)
    count = 0
    while count < n:
        curr = heapq.heappop(heap)
        for p in primes:
            heapq.heappush(heap, p * curr)
        count += 1
    return curr",0.8346,-12.4767699281928
844,1,"

def solve(arr, k):
  odd_arr = []
  even_arr = []
  for i in arr:
    if i % 2 == 1:
      odd_arr.append(i)
    else:
      even_arr.append(i)
  merged_arr = odd_arr + even_arr
  return merged_arr[k-1]",0.8407,-11.452971219701997
844,2,"

def solve(arr, k):
    odd = []
    even = []
    for i in arr:
        if i % 2 == 0:
            even.append(i)
        else:
            odd.append(i)
    if k <= len(odd):
        return odd[k-1]
    else:
        return even[k-len(odd)-1]
        ",0.844,-12.382095915183
844,3,"

def solve(arr, k):
    odd = []
    even = []
    for num in arr:
        if num % 2 == 0:
            even.append(num)
        else:
            odd.append(num)

    merged = odd + even
    return merged[k-1]",0.8442,-9.823568775170305
844,4,"

def solve(arr, k):
    odd = []
    even = []
    for num in arr:
        if num % 2 == 0:
            even.append(num)
        else:
            odd.append(num)
    return odd[k-1] if k <= len(odd) else even[k-len(odd)-1]",0.9422,-3.9893013176728
844,5,"

def solve(arr, k):
    odd = []
    even = []
    for i in range(len(arr)):
        if arr[i] % 2 != 0:
            odd.append(arr[i])
        else:
            even.append(arr[i])
    return odd[k-1] if k <= len(odd) else even[k-len(odd)-1]",0.8976,-7.8825066365810015
845,1,"

def solve(n):
    factorial = 1
    for i in range(1, n+1):
        factorial *= i
    return len(str(factorial))",0.9269,-2.6583394156640003
845,2,"

def solve(number):
    factorial = 1
    for i in range(1, number+1):
        factorial *= i
    return len(str(factorial))",0.8347,-6.325911494779998
845,3,"

def solve(n):
    factorial = 1
    for i in range(1, n+1):
        factorial = factorial * i
    return len(str(factorial))",0.8974,-4.0035923241885
845,4,"
def solve(number):
    factorial = 1
    for i in range(1, number + 1):
        factorial *= i
    
    return len(str(factorial))",0.7152,-12.065872828351996
845,5,"

def solve(n):
    factorial = 1
    for i in range(1, n+1):
        factorial *= i
    return len(str(factorial))",0.9269,-2.6583394156640003
846,1,"

def solve(arrival, departure):
    arrival.sort()
    departure.sort()
    n = len(arrival)
    platform = 1
    min_platform = 1
    i = 1
    j = 0
    while i < n and j < n:
        if arrival[i] <= departure[j]:
            platform += 1
            i += 1
            if platform > min_platform:
                min_platform = platform
        else:
            platform -= 1
            j += 1
    return min_platform",0.9067,-10.871475134189
846,2,"

def solve(arrival, departure):
    arrival.sort()
    departure.sort()
    platforms = 1
    i = 1
    j = 0
    ans = 1
    while i < len(arrival) and j < len(departure):
        if arrival[i] < departure[j]:
            platforms += 1
            i += 1
            if platforms > ans:
                ans = platforms
        else:
            platforms -= 1
            j += 1
    return ans",0.8938,-11.899260552467007
846,3,"

def solve(arr, dep):
    arr.sort()
    dep.sort()
    n = len(arr)
    i = 0
    j = 0
    plat = 0
    res = 0
    while i < n and j < n:
        if arr[i] <= dep[j]:
            plat += 1
            i += 1
            if plat > res:
                res = plat
        else:
            plat -= 1
            j += 1
    return res",0.8769,-13.790263834222005
846,4,"

def solve(arrival, departure):
    arrival.sort()
    departure.sort()
    i = 0
    j = 0
    platforms = 0
    max_platforms = 0
    while i < len(arrival):
        if arrival[i] < departure[j]:
            platforms += 1
            i += 1
        else:
            platforms -= 1
            j += 1
        if platforms > max_platforms:
            max_platforms = platforms
    return max_platforms",0.9227,-8.532885604295503
846,5,"

def solve(arrival, departure):
  arrival.sort()
  departure.sort()

  num_platforms = 1
  max_platforms = 1
  i = 1
  j = 0

  while i < len(arrival) and j < len(departure):
    if arrival[i] <= departure[j]:
      num_platforms += 1
      i += 1
      if num_platforms > max_platforms:
        max_platforms = num_platforms
    else:
      num_platforms -= 1
      j += 1

  return max_platforms",0.8951,-13.747295349648
847,1,"

def solve(tuple):
    return list(tuple)",0.7476,-2.90878079117
847,2,"

def solve(tup):
    lst = list(tup)
    return lst",0.8904,-1.856692121977
847,3,"

def solve(tup):
    lst = list(tup)
    return lst",0.8904,-1.856692121977
847,4,"

def solve(tuple):
    return list(tuple)",0.7476,-2.90878079117
847,5,"

def solve(tuple):
    list = []
    for item in tuple:
        list.append(item)
    return list",0.8105,-4.832652927909999
848,1,"
def solve(base1, base2, height):
    area = (base1 + base2) / 2 * height
    return area",0.8008,-6.664339041298001
848,2,"

def solve(a, b, h):
    area = 0.5 * (a + b) * h
    return area",0.8571,-4.317342072347799
848,3,"

def solve(base1, base2, height):
    area = 0.5 * (base1 + base2) * height
    return area",0.9252,-2.488448328232
848,4,"

def solve(base1, base2, height):
    area = (base1 + base2) * height / 2
    return area",0.953,-1.443918796117
848,5,"

def solve(base1, base2, height):
    return (base1 + base2) * height / 2",0.8919,-2.8604365648419994
849,1,"

def solve(num):
    sum = 0
    for i in range(2,num+1):
        if num%i == 0:
            isPrime = True
            for j in range(2,i):
                if i%j == 0:
                    isPrime = False
                    break
            if isPrime:
                sum += i
    return sum",0.896,-8.346262166912398
849,2,"

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def solve(n):
    sum = 0
    for i in range(2, n+1):
        if n % i == 0 and is_prime(i):
            sum += i
    return sum",0.9161,-8.412135395690505
849,3,"

def solve(num):
    divisors = []
    for i in range(2, num+1):
        if num % i == 0:
            divisors.append(i)
    prime_divisors = []
    for j in divisors:
        is_prime = True
        for k in range(2, j):
            if j % k == 0:
                is_prime = False
                break
        if is_prime:
            prime_divisors.append(j)
    return sum(prime_divisors)",0.8982,-11.161688644060996
849,4,"

def solve(num):
    sum = 0
    for i in range(2, num+1):
        if num % i == 0:
            for j in range(2, i):
                if i % j == 0:
                    break
            else:
                sum += i
    return sum",0.9402,-4.005088890057
849,5,"

def solve(num):
    sum = 0
    for i in range(2, num+1):
        if num % i == 0:
            flag = True
            for j in range(2, i):
                if i % j == 0:
                    flag = False
                    break
            if flag:
                sum += i
    return sum",0.9289,-5.6049514440701005
850,1,"

def solve(angle1, angle2, angle3):
    if angle1 + angle2 + angle3 == 180 and angle1 > 0 and angle2 > 0 and angle3 > 0:
        return True
    else:
        return False",0.9678,-1.7656480760132
850,2,"

def solve(angle1, angle2, angle3):
    if angle1 + angle2 + angle3 == 180 and angle1 > 0 and angle2 > 0 and angle3 > 0:
        return True
    else:
        return False",0.9678,-1.7656480760132
850,3,"

def solve(angle1, angle2, angle3):
    if angle1 + angle2 + angle3 != 180:
        return False
    elif angle1 <= 0 or angle2 <= 0 or angle3 <= 0:
        return False
    else:
        return True",0.9598,-2.4610166463717005
850,4,"

def solve(angle1, angle2, angle3):
    if angle1 + angle2 + angle3 != 180:
        return False
    elif angle1 <= 0 or angle2 <= 0 or angle3 <= 0:
        return False
    else:
        return True",0.9598,-2.4610166463717005
850,5,"

def solve(angle1, angle2, angle3):
    if angle1 + angle2 + angle3 == 180 and angle1 > 0 and angle2 > 0 and angle3 > 0:
        return True
    else:
        return False",0.9678,-1.7656480760132
851,1,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        if n % i == 0:
            sum += 1/i
    return sum",0.9597,-1.729701539153
851,2,"

def solve(n):
    total = 0
    for i in range(1, n+1):
        if n % i == 0:
            total += 1/i
    return total",0.935,-2.824839132530801
851,3,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        if n % i == 0:
            sum += 1/i
    return sum",0.9597,-1.729701539153
851,4,"

def solve(n):
    total = 0
    for i in range(1, n+1):
        if n % i == 0:
            total += 1/i
    return total",0.935,-2.824839132530801
851,5,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        if n % i == 0:
            sum += 1/i
    return sum",0.9597,-1.729701539153
852,1,"

def solve(lst):
    new_lst = []
    for num in lst:
        if num >= 0:
            new_lst.append(num)
    return new_lst",0.926,-2.537135495221301
852,2,"

def solve(lst):
    new_lst = [num for num in lst if num >= 0]
    return new_lst",0.8808,-3.1745141161605
852,3,"

def solve(lst):
    new_lst = [num for num in lst if num >= 0]
    return new_lst",0.8808,-3.1745141161605
852,4,"

def solve(lst):
    result = [x for x in lst if x >= 0]
    return result",0.8225,-4.494488146164998
852,5,"

def solve(lst):
    result = []
    for num in lst:
        if num >= 0:
            result.append(num)
    return result ",0.789,-7.3477658519077
853,1,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        if n % i == 0 and i % 2 != 0:
            sum += i
    return sum",0.9569,-2.1156897538220005
853,2,"

def solve(num):
    sum = 0
    for i in range(1, num+1):
        if num % i == 0 and i % 2 != 0:
            sum += i
    return sum",0.9498,-2.469930506463
853,3,"

def solve(num):
    sum = 0
    for i in range(1, num+1):
        if num % i == 0 and i % 2 != 0:
            sum += i
    return sum",0.9498,-2.469930506463
853,4,"

def solve(num):
    sum = 0
    for i in range(1, num+1):
        if num % i == 0 and i % 2 != 0:
            sum += i
    return sum",0.9498,-2.469930506463
853,5,"

def solve(num):
    sum = 0
    for i in range(1, num+1):
        if num % i == 0 and i % 2 != 0:
            sum += i
    return sum",0.9498,-2.469930506463
854,1,"

def solve(lst):
    import heapq
    heap = []
    for num in lst:
        heapq.heappush(heap, num)
    return heap",0.8363,-5.540625486210999
854,2,"

def solve(lst):
    import heapq
    heapq.heapify(lst)
    return lst",0.9339,-1.2312627343270004
854,3,"

def solve(arr):
    import heapq
    heapq.heapify(arr)
    return arr",0.8031,-3.9463035821460006
854,4,"

def solve(lst):
    import heapq
    heapq.heapify(lst)
    return lst",0.9339,-1.2312627343270004
854,5,"

def solve(lst):
  import heapq
  heapq.heapify(lst)
  return lst",0.8437,-3.0598381326150004
855,1,"

def solve(num):
    parity = 0
    for i in range(num.bit_length()):
        parity ^= (num >> i) & 1
    return parity == 0",0.7952,-8.708926963469997
855,2,"

def solve(num):
    count = 0
    for i in range(len(bin(num)) - 2):
        if bin(num)[i+2] == '1':
            count += 1
    if count % 2 == 0:
        return True
    else:
        return False",0.8381,-11.130260606527004
855,3,"

def solve(number):
    count = 0
    while number > 0:
        if number % 2 == 1:
            count += 1
        number //= 2
    return count % 2 == 0",0.8638,-7.173734192783999
855,4,"

def solve(num):
    count = 0
    while num:
        count += num & 1
        num >>= 1
    return count % 2 == 0",0.8878,-4.522396344941002
855,5,"
def solve(num):
    binary = bin(num)[2:] # convert number to binary string
    count = 0
    for digit in binary:
        if digit == '1':
            count += 1
    if count % 2 == 0:
        return True
    else:
        return False",0.8324,-11.9231440629243
856,1,"

def solve(arr):
    count = 0
    for i in range(len(arr)-1):
        if arr[i] != 0:
            for j in range(i+1, len(arr)):
                if arr[j] == 0:
                    arr[i], arr[j] = arr[j], arr[i]
                    count += 1
                    break
    return count",0.9116,-7.127247830367998
856,2,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        if arr[i] == 0:
            count += 1
    
    swaps = 0
    for i in range(count):
        if arr[i] == 1:
            swaps += 1
    
    return swaps",0.8795,-8.344822182556998
856,3,"

def solve(arr):
    swaps = 0
    for i in range(len(arr)):
        if arr[i] != i%2:
            for j in range(i+1, len(arr)):
                if arr[j] == i%2:
                    arr[i], arr[j] = arr[j], arr[i]
                    swaps += 1
                    break
    return swaps",0.9284,-5.723997373326502
856,4,"

def solve(arr):
    count = 0
    for i in range(len(arr)):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        if min_idx != i:
            arr[i], arr[min_idx] = arr[min_idx], arr[i]
            count += 1
    return count",0.9475,-4.582889211835602
856,5,"

def solve(arr):
    swaps = 0
    for i in range(len(arr)):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        if min_idx != i:
            arr[i], arr[min_idx] = arr[min_idx], arr[i]
            swaps += 1
    return swaps",0.9538,-4.024237043529998
857,1,"

def solve(list_of_strings):
    return list(map(lambda x: x, list_of_strings))",0.8426,-3.424987745475
857,2,"

def solve(strings):
    return list(map(lambda x: x, strings))",0.8992,-1.699514380022
857,3,"

def solve(strings):
    return list(map(list, strings))",0.821,-2.564138367572
857,4,"

def solve(lst):
    return list(map(lambda x: x, lst))",0.8442,-2.710515664668
857,5,"

def solve(strings):
    return list(map(list, strings))",0.821,-2.564138367572
858,1,"

def solve(list_of_lists):
    count = len(list_of_lists)
    squared_count = count**2
    return squared_count",0.823,-5.258297701190001
858,2,"

def solve(lists):
    return len(lists)**2",0.782,-3.1959214342399997
858,3,"

def solve(list_of_lists):
    count = len(list_of_lists)
    square = count**2
    return square",0.7716,-6.482780395553
858,4,"

def solve(list_of_lists):
    count = 0
    for lst in list_of_lists:
        if isinstance(lst, list):
            count += 1
    return count**2",0.8875,-4.652349373259
858,5,"

def solve(lst):
    count = 0
    for i in lst:
        if isinstance(i, list):
            count += 1
    return count**2",0.8682,-4.948312243709999
859,1,"

def solve(lst):
    sublists = [[]]
    for i in range(len(lst)):
        for j in range(i+1, len(lst)+1):
            sublists.append(lst[i:j])
    return sublists",0.9671,-1.506777182328
859,2,"

def solve(lst):
    sublists = [[]]
    for i in range(len(lst)):
        for j in range(i+1, len(lst)+1):
            sublists.append(lst[i:j])
    return sublists",0.9671,-1.506777182328
859,3,"

def solve(lst):
    sublists = [[]]
    for i in range(len(lst)):
        for j in range(i+1, len(lst)+1):
            sublists.append(lst[i:j])
    return sublists",0.9671,-1.506777182328
859,4,"

def solve(lst):
    sublists = []
    for i in range(len(lst)):
        for j in range(i+1, len(lst)+1):
            sublists.append(lst[i:j])
    return sublists",0.95,-2.2565901041914995
859,5,"

def solve(lst):
    sublists = [[]]
    for i in range(len(lst)):
        for j in range(i + 1, len(lst) + 1):
            sublists.append(lst[i:j])
    return sublists",0.9148,-4.273637160264
860,1,"

def solve(string):
    pattern = r""^[a-zA-Z0-9]+$""
    if re.match(pattern, string[-1]):
        return True
    return False",0.7785,-9.016131214300998
860,2,"

import re

def solve(string):
    pattern = ""^[a-zA-Z0-9]+$""
    if re.search(pattern, string):
        return True
    else:
        return False",0.8555,-6.086291702946
860,3,"

import re

def solve(string):
    pattern = re.compile(""[a-zA-Z0-9]+$"")
    match = pattern.match(string)
    if match:
        return True
    else:
        return False",0.8358,-7.715167312647002
860,4,"

import re

def solve(string):
    pattern = r""^[a-zA-Z0-9]+$""
    if re.search(pattern, string[-1]):
        return True
    else:
        return False",0.8866,-5.054002728077001
860,5,"

import re

def solve(string):
    if re.search(r""[^a-zA-Z0-9]$"", string):
        return False
    else:
        return True",0.8044,-7.618067004861
861,1,"

def solve(string, lst):
    anagrams = list(filter(lambda x: sorted(x) == sorted(string), lst))
    return anagrams",0.8186,-5.804971309297
861,2,"

def solve(string, string_list):
    return list(filter(lambda x: sorted(string) == sorted(x), string_list))",0.8578,-3.8340418093519992
861,3,"

def solve(string, string_list):
    return [word for word in string_list if sorted(string) == sorted(word)]",0.7246,-8.053765955120998
861,4,"

def solve(string, string_list):
    return list(filter(lambda x: sorted(string) == sorted(x), string_list))",0.8578,-3.8340418093519992
861,5,"

def solve(string, strings):
    return list(filter(lambda x: sorted(x) == sorted(string) and x != string, strings))",0.7724,-7.232253968918
862,1,"

def solve(text, n):
    words = text.split()
    counts = {}
    for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1
    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)
    most_common = sorted_counts[:n]
    return most_common",0.9231,-6.477334735619903
862,2,"

def solve(text, n):
    words = text.split()
    count = {}
    for word in words:
        if word not in count:
            count[word] = 1
        else:
            count[word] += 1
    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)
    most_common = []
    for i in range(n):
        most_common.append(sorted_count[i][0])
    return most_common",0.8968,-10.241791422012296
862,3,"
def solve(text, n): 
    words = text.split() 
    word_counts = {} 
    for word in words: 
        if word in word_counts: 
            word_counts[word] += 1 
        else: 
            word_counts[word] = 1 
    
    sorted_words = sorted(word_counts.items(), key=lambda x: x[1], reverse=True) 
    top_n_words = sorted_words[:n] 
    return top_n_words",0.8287,-17.8516022687175
862,4,"

def solve(text, n):
    # split the text into words
    words = text.split()
    
    # create a dictionary to store word counts
    counts = {}
    
    # loop through each word in the text
    for word in words:
        # convert word to lowercase
        word = word.lower()
        
        # remove any punctuation from the word
        word = word.strip("",.?!-:;"")
        
        # check if the word is already in the dictionary
        if word in counts:
            # if yes, increment its count by 1
            counts[word] += 1
        else:
            # if no, add the word to the dictionary with a count of 1
            counts[word] = 1
    
    # sort the dictionary by values in descending order
    sorted_counts = sorted(counts.items(), key=lambda x: x[1], reverse=True)
    
    # extract the top n most common words and their counts
    top_n_words = sorted_counts[:n]
    
    # create a list to store the most common words
    most_common_words = []
    
    # loop through each tuple in the list
    for word, count in top_n_words:
        # add the word to the list
        most_common_words.append(word)
    
    # return the list of most common words
    return most_common_words",0.8597,-42.63178417765972
862,5,"

def solve(text, n):
    word_list = text.split()
    words_dict = {}
    for word in word_list:
        if word in words_dict:
            words_dict[word] += 1
        else:
            words_dict[word] = 1
    sorted_words = sorted(words_dict.items(), key=lambda x: x[1], reverse=True)
    most_common_words = []
    for i in range(n):
        most_common_words.append(sorted_words[i][0])
    return most_common_words",0.8647,-14.9746918650461
863,1,"

def solve(arr):
    longest_seq = 0
    curr_seq = 0
    for num in sorted(arr):
        if curr_seq == 0:
            curr_seq = 1
        elif num == prev_num + 1:
            curr_seq += 1
        else:
            longest_seq = max(longest_seq, curr_seq)
            curr_seq = 1
        prev_num = num
    longest_seq = max(longest_seq, curr_seq)
    return longest_seq",0.8668,-14.582240094553002
863,2,"

def solve(nums):
    longest_length = 0
    for num in nums:
        current_length = 1
        current_num = num
        while current_num + 1 in nums:
            current_length += 1
            current_num += 1
        longest_length = max(longest_length, current_length)
    return longest_length",0.8952,-7.857448999545504
863,3,"

def solve(arr):
    arr.sort()
    longest_length = 1
    current_length = 1
    for i in range(1, len(arr)):
        if arr[i] == arr[i-1] + 1:
            current_length += 1
        else:
            if current_length > longest_length:
                longest_length = current_length
            current_length = 1
    if current_length > longest_length:
        longest_length = current_length
    return longest_length",0.9069,-9.770404720403
863,4,"

def solve(nums):
    longest = 0
    for i in range(len(nums)):
        count = 1
        curr = nums[i]
        while curr + 1 in nums:
            count += 1
            curr += 1
        longest = max(longest, count)
    return longest",0.865,-9.283448828081
863,5,"

def solve(arr):
    longest = 0
    for num in arr:
        if num-1 not in arr:
            current = num
            length = 1
            while current+1 in arr:
                current += 1
                length += 1
            longest = max(longest, length)
    return longest",0.8667,-9.872043010757004
864,1,"

def solve(strings):
    palindromes = filter(lambda x: x == x[::-1], strings)
    return list(palindromes)",0.8658,-4.6122210926652
864,2,"

def solve(lst):
    return list(filter(lambda x: x == x[::-1], lst))",0.9162,-1.7497003987426
864,3,"

def solve(strings):
    return list(filter(lambda x: x == x[::-1], strings))",0.8906,-2.3162125687324
864,4,"

def solve(lst):
    return list(filter(lambda x: x == x[::-1], lst))",0.9162,-1.7497003987426
864,5,"

def solve(lst):
  return list(filter(lambda x: x == x[::-1], lst))",0.7942,-4.609306694768998
865,1,"

def solve(n, lst):
  return list(map(lambda x: lst, range(n)))",0.7618,-5.169352817046001
865,2,"

def solve(lst, n):
    return list(map(lambda x: lst, range(n)))",0.873,-2.5800274634759996
865,3,"

def solve(lst, n):
    return list(map(lambda x: x * n, lst))",0.8388,-3.5158895047109997
865,4,"

def solve(lst, n):
    return list(map(lambda x: x*n, lst))",0.8869,-2.280679065785999
865,5,"

def solve(lst, n):
    return list(map(lambda x: x*n, lst))",0.8869,-2.280679065785999
866,1,"

def solve(month):
    thirty_one_days = [""January"", ""March"", ""May"", ""July"", ""August"", ""October"", ""December""]
    if month in thirty_one_days:
        return True
    else:
        return False",0.9506,-2.481551992185999
866,2,"
def solve(month):
    thirty_one_days = ['January', 'March', 'May', 'July', 'August', 'October', 'December']
    if month in thirty_one_days:
        return True
    else:
        return False",0.8915,-5.627021441630999
866,3,"

def solve(month):
    thirty_one_days = [""January"", ""March"", ""May"", ""July"", ""August"", ""October"", ""December""]
    if month in thirty_one_days:
        return True
    else:
        return False",0.9506,-2.481551992185999
866,4,"

def solve(month):
    if month in {""January"", ""March"", ""May"", ""July"", ""August"", ""October"", ""December""}:
        return True
    else:
        return False",0.8482,-6.747881752887999
866,5,"

def solve(month):
    if month in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:
        return True
    else:
        return False",0.9215,-3.269468333714999
867,1,"

def solve(array):
    sum = 0
    for num in array:
        sum += num
    if sum % 2 == 0:
        return 0
    else:
        return 1",0.8746,-5.896485544184501
867,2,"

def solve(arr):
    total = sum(arr)
    if total % 2 == 0:
        return arr
    else:
        return arr + [1]",0.929,-2.5765268747279992
867,3,"

def solve(arr):
    total = sum(arr)
    if total % 2 == 0:
        return arr
    else:
        return arr + [1]",0.929,-2.5765268747279992
867,4,"

def solve(arr):
    sum = 0
    for i in arr:
        sum += i
    if sum % 2 == 0:
        return arr
    else:
        return arr + [1]",0.9374,-2.974962833112999
867,5,"

def solve(arr):
    sum = 0
    for i in arr:
        sum += i
    if sum % 2 == 0:
        return arr
    else:
        arr.append(1)
        return arr",0.9128,-4.381389354552999
868,1,"

def solve(string):
    string = string.strip()
    last_word = string.split()[-1]
    return len(last_word)",0.8152,-5.518287657846001
868,2,"

def solve(string):
    words = string.split()
    if len(words) == 0:
        return 0
    else:
        return len(words[-1])",0.9469,-1.911123070251
868,3,"

def solve(s):
    s = s.strip()
    words = s.split()
    return len(words[-1])",0.7727,-6.188266352445
868,4,"

def solve(string):
    words = string.split()
    if len(words) == 0:
        return 0
    else:
        return len(words[-1])",0.9469,-1.911123070251
868,5,"

def solve(string):
    words = string.split()
    if len(words) == 0:
        return 0
    else:
        return len(words[-1])",0.9469,-1.911123070251
869,1,"

def solve(list_of_lists, start, end):
    new_list = []
    for sublist in list_of_lists:
        if not (sublist[0] < start or sublist[-1] > end):
            new_list.append(sublist)
    return new_list",0.848,-8.906066721080995
869,2,"

def solve(list_of_lists, start, end):
    new_list = []
    for sublist in list_of_lists:
        if start <= min(sublist) and max(sublist) <= end:
            new_list.append(sublist)
    return new_list",0.8685,-7.192729349164
869,3,"

def solve(list_of_lists, start, end):
    for sublist in list_of_lists:
        if sublist[0] < start or sublist[-1] > end:
            list_of_lists.remove(sublist)
    return list_of_lists",0.8752,-6.400802776299999
869,4,"

def solve(lists, min_range, max_range):
    for i in range(len(lists)-1, -1, -1):
        if type(lists[i]) == list:
            if min(lists[i]) < min_range or max(lists[i]) > max_range:
                lists.pop(i)
    return lists",0.8297,-12.504828312313496
869,5,"

def solve(list_of_lists, start, end):
    for sublist in list_of_lists:
        if any(element < start or element > end for element in sublist):
            list_of_lists.remove(sublist)
    return list_of_lists",0.8202,-9.318330144867
870,1,"

def solve(numbers):
    return sum(filter(lambda x: x > 0, numbers))",0.9228,-1.5257694246470002
870,2,"

def solve(nums):
    return sum(filter(lambda x: x > 0, nums))",0.9239,-1.5035713851439996
870,3,"

def solve(numbers):
    return sum(filter(lambda x: x > 0, numbers))",0.9228,-1.5257694246470002
870,4,"

def solve(nums):
    return sum(filter(lambda x: x > 0, nums))",0.9239,-1.5035713851439996
870,5,"

def solve(nums):
    return sum(filter(lambda x: x > 0, nums))",0.9239,-1.5035713851439996
871,1,"

def solve(str1, str2):
    if len(str1) != len(str2):
        return False
    temp = str1 + str1
    if temp.count(str2) > 0:
        return True
    else:
        return False",0.9375,-3.4823975506309996
871,2,"

def solve(str1, str2):
    if len(str1) != len(str2):
        return False
    temp = str1 + str1
    if str2 in temp:
        return True
    else:
        return False",0.9594,-2.071486245548
871,3,"

def solve(s1, s2):
    if len(s1) != len(s2):
        return False
    temp = s1 + s1
    if s2 in temp:
        return True
    else:
        return False",0.9259,-3.850233040297201
871,4,"

def solve(str1, str2):
    if len(str1) != len(str2):
        return False
    temp = str1 + str1
    if temp.count(str2) > 0:
        return True
    else:
        return False",0.9375,-3.4823975506309996
871,5,"

def solve(str1, str2):
    if len(str1) != len(str2):
        return False
    temp = str1 + str1
    if str2 in temp:
        return True
    else:
        return False",0.9594,-2.071486245548
872,1,"

def solve(list1, list2):
    for sublist in list1:
        if type(sublist) == list:
            if not any(sublist == x for x in list2):
                return False
        else:
            if sublist not in list2:
                return False
    return True",0.835,-11.000767202372
872,2,"

def solve(nested_list1, nested_list2):
    if nested_list1 == nested_list2:
        return True
    else:
        for item in nested_list1:
            if isinstance(item, list):
                if not solve(item, nested_list2):
                    return False
            else:
                if item not in nested_list2:
                    return False
        return True",0.8613,-11.499439728861107
872,3,"

def solve(list1, list2):
    for item in list1:
        if item not in list2:
            return False
    return True",0.9149,-2.757132810003
872,4,"

def solve(nested_list1, nested_list2):
    for sublist1 in nested_list1:
        if sublist1 not in nested_list2:
            return False
    return True",0.8649,-5.517160473915299
872,5,"

def solve(nested_list1, nested_list2):
  for sublist in nested_list1:
    if sublist not in nested_list2:
      return False
  return True",0.8359,-6.451151573288301
873,1,"

def solve(n):
    if n <= 1:
        return n
    else:
        return solve(n-1) + solve(n-2)",0.9628,-1.2140207743579998
873,2,"

def solve(n):
    if n <= 1:
        return n
    else:
        return solve(n-1) + solve(n-2)",0.9628,-1.2140207743579998
873,3,"

def solve(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solve(n-1) + solve(n-2)",0.9577,-1.947262555356
873,4,"

def solve(n):
  if n == 0:
    return 0
  elif n == 1:
    return 1
  else:
    return solve(n-1) + solve(n-2)",0.9056,-4.462324507710999
873,5,"

def solve(n):
    if n <= 1:
        return n
    else:
        return solve(n-1) + solve(n-2)",0.9628,-1.2140207743579998
874,1,"

def solve(string, concat_string):
    if len(string) < len(concat_string):
        return False
    elif len(string) == len(concat_string):
        if string == concat_string:
            return True
        else:
            return False
    else:
        for i in range(len(concat_string)):
            if string[i] != concat_string[i]:
                return False
        return True",0.8489,-12.942715574534995
874,2,"

def solve(string1, string2):
    if len(string1) < len(string2):
        return False
    for i in range(len(string2)):
        if string1[i] != string2[i]:
            return False
    return True",0.8615,-7.600191799633997
874,3,"

def solve(string):
    if len(string) == 0 or len(string) == 1:
        return False
    
    for i in range(1, len(string)):
        if string[:i] + string[i:] == string:
            return True
    
    return False",0.7865,-13.446267726438004
874,4,"

def solve(string, concat_str):
    if len(string) % len(concat_str) != 0:
        return False
    else:
        concat_count = len(string) // len(concat_str)
        if string == concat_str * concat_count:
            return True
        else:
            return False",0.8488,-9.998650153271
874,5,"

def solve(s, concat):
    if len(s) % len(concat) != 0:
        return False
    for i in range(len(s) // len(concat)):
        if s[i * len(concat) : (i + 1) * len(concat)] != concat:
            return False
    return True",0.825,-12.501021717003995
875,1,"

def solve(tuples):
    min_diff = float('inf')
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            diff = abs(tuples[i][0] - tuples[j][0]) + abs(tuples[i][1] - tuples[j][1])
            if diff < min_diff:
                min_diff = diff
    return min_diff",0.9745,-2.1470156816725003
875,2,"

def solve(tuples):
    min_diff = float('inf')
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            diff = abs(tuples[i][0] - tuples[j][0]) + abs(tuples[i][1] - tuples[j][1])
            if diff < min_diff:
                min_diff = diff
    return min_diff",0.9745,-2.1470156816725003
875,3,"

def solve(tuples):
    min_diff = abs(tuples[0][0] - tuples[0][1])
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            diff = abs(tuples[i][0] - tuples[j][1])
            if diff < min_diff:
                min_diff = diff
    return min_diff",0.9531,-3.8445557462194992
875,4,"

def solve(tuples):
    min_diff = abs(tuples[0][0] - tuples[0][1])
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            diff = abs(tuples[i][0] - tuples[j][1])
            if diff < min_diff:
                min_diff = diff
    return min_diff",0.9531,-3.8445557462194992
875,5,"

def solve(tuples):
    min_diff = float('inf')
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            diff = abs(tuples[i][0] - tuples[j][0]) + abs(tuples[i][1] - tuples[j][1])
            if diff < min_diff:
                min_diff = diff
    return min_diff",0.9745,-2.1470156816725003
876,1,"

def solve(num1, num2):
    if num1 > num2:
        greater = num1
    else:
        greater = num2

    while True:
        if (greater % num1 == 0) and (greater % num2 == 0):
            lcm = greater
            break
        greater += 1

    return lcm",0.9376,-4.7678086372871
876,2,"

def solve(a,b):
  if a > b:
    greater = a
  else:
    greater = b

  while(True):
    if((greater % a == 0) and (greater % b == 0)):
      lcm = greater
      break
    greater += 1

  return lcm",0.875,-8.682102813321002
876,3,"

def solve(x, y):
    lcm = (x*y) // gcd(x, y)
    return lcm

def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a%b)",0.8184,-10.620202372894996
876,4,"

def solve(a, b):
    if a > b:
        greater = a
    else:
        greater = b

    while True:
        if greater % a == 0 and greater % b == 0:
            lcm = greater
            break
        greater += 1

    return lcm",0.9214,-5.155420598488001
876,5,"

def solve(a, b):
    # find the larger number
    if a > b:
        larger = a
    else:
        larger = b
    # find the smaller number
    if a < b:
        smaller = a
    else:
        smaller = b
    # initialize lcm
    lcm = larger
    # loop until lcm is found
    while True:
        if lcm % smaller == 0 and lcm % larger == 0:
            break
        lcm += larger
    return lcm",0.869,-15.161353562513998
877,1,"

def solve(string):
    sorted_string = ''.join(sorted(string))
    return sorted_string",0.9099,-1.6999242295079997
877,2,"

def solve(string):
    sorted_string = """".join(sorted(string))
    return sorted_string",0.873,-2.4437340208890004
877,3,"

def solve(string):
    sorted_string = ''.join(sorted(string))
    return sorted_string",0.9099,-1.6999242295079997
877,4,"

def solve(string):
    sorted_string = ''.join(sorted(string))
    return sorted_string",0.9099,-1.6999242295079997
877,5,"

def solve(string):
    sorted_string = ''.join(sorted(string))
    return sorted_string",0.9099,-1.6999242295079997
878,1,"

def solve(tup, k):
    if len(tup) == k:
        return True
    return False",0.8617,-3.572758296175
878,2,"

def solve(tup, k):
    if len(tup) == k:
        return True
    else:
        return False",0.9209,-2.2235266576519996
878,3,"

def solve(tuple, k):
    if len(tuple) == k:
        return True
    else:
        return False",0.8874,-2.986884876042
878,4,"

def solve(tup, k):
    return len(set(tup)) == k",0.8091,-3.600520039691
878,5,"

def solve(tuple, k):
    return len(tuple) == k",0.7862,-3.36813925847
879,1,"

import re

def solve(string):
    pattern = r'a.*b$'
    match = re.search(pattern, string)
    if match:
        return True
    else:
        return False",0.9351,-2.685510791107
879,2,"

import re

def solve(string):
  pattern = r'a.*b$'
  result = re.match(pattern, string)
  if result:
    return True
  else:
    return False",0.8626,-5.911100693075
879,3,"

import re

def solve(string):
    pattern = r'a.*b$'
    match = re.search(pattern, string)
    if match:
        return True
    else:
        return False",0.9351,-2.685510791107
879,4,"

import re

def solve(string):
    pattern = r'a.+b$'
    match = re.search(pattern, string)
    if match:
        return True
    else:
        return False",0.8741,-5.383448744440002
879,5,"

import re

def solve(string):
    pattern = r'a.*b$'
    if re.search(pattern, string):
        return True
    else:
        return False",0.9235,-2.7853878890580006
880,1,"

def solve(a, b, c):
    D = b**2 - 4*a*c
    if D > 0:
        return 2
    elif D == 0:
        return 1
    else:
        return 0",0.9211,-4.271406417318599
880,2,"

def solve(a, b, c):
    discriminant = (b**2) - (4*a*c)
    
    if discriminant > 0:
        return 2
    elif discriminant == 0:
        return 1
    else:
        return 0",0.9384,-3.686082342442
880,3,"

def solve(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant > 0:
        return 2
    elif discriminant == 0:
        return 1
    else:
        return 0 ",0.8902,-6.510668881368
880,4,"

def solve(a, b, c):
    discriminant = b**2 - 4*a*c
    if discriminant > 0:
        return 2
    elif discriminant == 0:
        return 1
    else:
        return 0",0.951,-2.762504681368
880,5,"

def solve(a,b,c):
    discriminant = (b**2) - (4*a*c)
    if discriminant < 0:
        return 0
    elif discriminant == 0:
        return 1
    else:
        return 2",0.9071,-5.360468632949398
881,1,"

def solve(lst):
    even_sum = 0
    odd_sum = 0
    for num in lst:
        if num % 2 == 0:
            even_sum += num
        else:
            odd_sum += num
    return [even_sum, odd_sum]",0.9626,-2.2498360028428
881,2,"

def solve(lst):
    sum_even = 0
    sum_odd = 0
    for num in lst:
        if num%2 == 0:
            sum_even += num
        else:
            sum_odd += num
    return sum_even + sum_odd",0.8869,-6.722014171957599
881,3,"

def solve(lst):
    even_sum = 0
    odd_sum = 0
    for num in lst:
        if num % 2 == 0:
            even_sum += num
        else:
            odd_sum += num
    return even_sum, odd_sum
",0.8688,-8.1551134062588
881,4,"

def solve(lst):
    even_sum = 0
    odd_sum = 0
    for num in lst:
        if num % 2 == 0:
            even_sum += num
        else:
            odd_sum += num
    return [even_sum, odd_sum]",0.9626,-2.2498360028428
881,5,"

def solve(lst):
    even_sum = 0
    odd_sum = 0
    for num in lst:
        if num % 2 == 0:
            even_sum += num
        else:
            odd_sum += num
    return even_sum + odd_sum",0.9698,-1.7461902114288002
882,1,"

def solve(length, width):
    return 2 * (length + width)",0.7986,-3.823995723907
882,2,"

def solve(length, width):
    perimeter = 2 * (length + width)
    return perimeter",0.8344,-3.802188882978001
882,3,"

def solve(base, side):
    return 2 * (base + side)",0.9218,-1.3842918993699995
882,4,"

def solve(base, side):
    perimeter = 2 * (base + side)
    return perimeter",0.8804,-2.67602236117
882,5,"

def solve(base, side):
    return 2*(base + side)",0.8476,-2.64467420438
883,1,"

def solve(numbers, m, n):
    return list(filter(lambda x: x % m == 0 and x % n == 0, numbers))",0.9575,-1.390262542838
883,2,"

def solve(numbers, m, n):
    return list(filter(lambda x: x % m == 0 and x % n == 0, numbers))",0.9575,-1.390262542838
883,3,"

def solve(numbers, m, n):
    return list(filter(lambda x: x % m == 0 and x % n == 0, numbers))",0.9575,-1.390262542838
883,4,"

def solve(nums, m, n):
    return list(filter(lambda x: x % m == 0 and x % n == 0, nums))",0.9272,-2.4194252361990003
883,5,"

def solve(numbers, m, n):
    return list(filter(lambda x: x % m == 0 and x % n == 0, numbers))",0.9575,-1.390262542838
884,1,"

def solve(bits, range_start, range_end):
    for bit in bits:
        if bit < range_start or bit > range_end:
            return False
    return True",0.9185,-3.0615954393319997
884,2,"

def solve(bits, lower, upper):
    for bit in bits:
        if bit < lower or bit > upper:
            return False
    return True",0.9552,-1.4659996703120002
884,3,"

def solve(bits, lower, upper):
    for bit in bits:
        if bit < lower or bit > upper:
            return False
    return True",0.9552,-1.4659996703120002
884,4,"

def solve(bits, start, end):
    for bit in bits:
        if bit < start or bit > end:
            return False
    return True",0.944,-1.844321037132
884,5,"

def solve(bits, lower_bound, upper_bound):
    for bit in bits:
        if bit < lower_bound or bit > upper_bound:
            return False
    return True",0.8683,-5.082737911522499
885,1,"

def solve(s1, s2):
    if len(s1) != len(s2):
        return False
    mapping = {}
    for i in range(len(s1)):
        if s1[i] in mapping:
            if mapping[s1[i]] != s2[i]:
                return False
        else:
            mapping[s1[i]] = s2[i]
    return True",0.938,-5.055321207093803
885,2,"

def solve(s1, s2):
    if len(s1) != len(s2):
        return False
    mapping = {}
    for i in range(len(s1)):
        if s1[i] not in mapping:
            mapping[s1[i]] = s2[i]
        elif mapping[s1[i]] != s2[i]:
            return False
    return True",0.9459,-4.281012014240501
885,3,"

def solve(s1, s2):
    if len(s1) != len(s2):
        return False
    dict = {}
    for i in range(len(s1)):
        if s1[i] not in dict:
            dict[s1[i]] = s2[i]
        else:
            if dict[s1[i]] != s2[i]:
                return False
    return True",0.9202,-6.6525302550357015
885,4,"

def solve(s1, s2):
    if len(s1) != len(s2):
        return False
    mapping = {}
    for i in range(len(s1)):
        if s1[i] not in mapping:
            mapping[s1[i]] = s2[i]
        else:
            if mapping[s1[i]] != s2[i]:
                return False
    return True",0.9498,-4.117835981490801
885,5,"

def solve(string1, string2):
    if len(string1) != len(string2):
        return False
    mapping = {}
    for i in range(len(string1)):
        if string1[i] not in mapping:
            mapping[string1[i]] = string2[i]
        else:
            if mapping[string1[i]] != string2[i]:
                return False
    return True",0.9371,-5.201463064487798
886,1,"

def solve(lst):
    total = sum(lst)
    length = len(lst)
    return total / length",0.8446,-3.7154448325590006
886,2,"

def solve(nums):
    total = 0
    for num in nums:
        total += num
    return total / len(nums)",0.8866,-3.489016130291001
886,3,"

def solve(lst):
    return sum(lst)/len(lst)

# Example:
# lst = [1, 2, 3, 4, 5]
# print(solve(lst)) # Output: 3",0.7394,-13.588985470829003
886,4,"

def solve(list):
    sum = 0
    for num in list:
        sum += num
    return sum/len(list)",0.8653,-4.1946077842574985
886,5,"

def solve(numbers):
    total = 0
    for num in numbers:
        total += num
    return total / len(numbers)",0.8823,-3.632506567314
887,1,"

def solve(n):
    return n & 1 == 1 ",0.685,-5.675591733584
887,2,"

def solve(num):
    return num & 1",0.8367,-1.961790024743
887,3,"

def solve(num):
    if num & 1 == 1:
        return True
    else:
        return False",0.8752,-3.332342120665
887,4,"

def solve(num):
    if num & 1:
        return ""Odd""
    else:
        return ""Even""",0.9129,-2.2794679704739993
887,5,"

def solve(num):
    if num & 1:
        return True
    else:
        return False",0.883,-2.737234030926
888,1,"

def solve(nested_tuples):
    result = nested_tuples[0][0] - nested_tuples[0][1]
    for i in range(1, len(nested_tuples)):
        result -= nested_tuples[i][0] - nested_tuples[i][1]
    return result",0.9079,-5.5057994386466005
888,2,"

def solve(nested_tuples):
    result = nested_tuples[0][0] - nested_tuples[0][1]
    for tup in nested_tuples[1:]:
        result -= tup[0] - tup[1]
    return result",0.88,-6.2664445511830005
888,3,"

def solve(nested_tuples):
    result = nested_tuples[0][0]
    for i in range(len(nested_tuples)):
        for j in range(len(nested_tuples[i])):
            if i == 0 and j == 0:
                continue
            result -= nested_tuples[i][j]
    return result",0.9275,-4.895201070488
888,4,"

def solve(tuples):
    result = tuples[0][0] - tuples[1][0]
    return result",0.8075,-5.345134354173998
888,5,"

def solve(tuples):
    result = 0
    for tup in tuples:
        for num in tup:
            result -= num
    return result",0.8828,-3.990668918886001
889,1,"

def solve(lst):
    for i in range(len(lst)):
        lst[i] = lst[i][::-1]
    return lst",0.9462,-1.4932790624607
889,2,"

def solve(list_of_lists):
    for i in range(len(list_of_lists)):
        list_of_lists[i] = list_of_lists[i][::-1]
    return list_of_lists",0.9275,-2.7848468977111
889,3,"

def solve(list_of_lists):
    for i in range(len(list_of_lists)):
        list_of_lists[i] = list_of_lists[i][::-1]
    return list_of_lists",0.9275,-2.7848468977111
889,4,"

def solve(lists):
    for i in range(len(lists)):
        lists[i] = lists[i][::-1]
    return lists",0.9287,-2.1443866601444013
889,5,"

def solve(lists):
    new_lists = []
    for lst in lists:
        new_lst = []
        for i in range(len(lst)-1, -1, -1):
            new_lst.append(lst[i])
        new_lists.append(new_lst)
    return new_lists",0.8409,-9.702537141802
890,1,"

def solve(arr1, arr2):
    for i in range(len(arr1)):
        if arr1[i] != arr2[i]:
            return i
    return len(arr1)",0.9195,-3.2730313677925995
890,2,"

def solve(arr1, arr2):
    for i in range(len(arr2)):
        if arr2[i] not in arr1:
            return i",0.9111,-2.9809634193136
890,3,"

def solve(arr1, arr2):
    for i in range(len(arr1)):
        if arr1[i] != arr2[i]:
            return i
    return len(arr1)",0.9195,-3.2730313677925995
890,4,"

def solve(arr1, arr2):
    for i in range(len(arr2)):
        if arr1[i] != arr2[i]:
            return i
    return len(arr2)",0.9397,-2.4263573449756004
890,5,"

def solve(arr1, arr2):
    for i in range(len(arr2)):
        if arr2[i] not in arr1:
            return i",0.9111,-2.9809634193136
891,1,"

def solve(num1, num2):
    if len(str(num1)) == len(str(num2)):
        return True
    else:
        return False",0.9754,-0.7956770632142002
891,2,"

def solve(num1, num2):
    if len(str(num1)) == len(str(num2)):
        return True
    else:
        return False",0.9754,-0.7956770632142002
891,3,"

def solve(num1, num2):
    if len(str(num1)) == len(str(num2)):
        return True
    else:
        return False",0.9754,-0.7956770632142002
891,4,"
def solve(num1, num2):
    if len(str(num1)) == len(str(num2)):
        return True
    else:
        return False",0.8936,-3.6005078667466
891,5,"

def solve(num1, num2):
    if len(str(num1)) == len(str(num2)):
        return True
    else:
        return False",0.9754,-0.7956770632142002
892,1,"

def solve(string):
    return ' '.join(string.split())",0.8446,-2.1962821395959997
892,2,"

def solve(string):
    new_string = "" "".join(string.split())
    return new_string",0.817,-3.840910266709999
892,3,"

def solve(s):
    return "" "".join(s.split())",0.7474,-3.78485970352
892,4,"

def solve(string):
    return "" "".join(string.split())",0.9077,-1.258598034151
892,5,"

def solve(string):
    return "" "".join(string.split())",0.9077,-1.258598034151
893,1,"

def solve(lst):
    result = []
    for sublist in lst:
        result.append(sublist[-1])
    return result",0.9123,-2.3852723592077996
893,2,"

def solve(lst):
    return [sublist[-1] for sublist in lst]",0.9087,-1.7236866083567
893,3,"

def solve(lst):
    result = []
    for sublst in lst:
        result.append(sublst[-1])
    return result",0.9106,-2.5291837221105
893,4,"

def solve(lst):
    result = []
    for sublst in lst:
        result.append(sublst[-1])
    return result",0.9106,-2.5291837221105
893,5,"

def solve(lst):
    return [sublist[-1] for sublist in lst]",0.9087,-1.7236866083567
894,1,"

def solve(string):
  return tuple(float(num) for num in string.split())",0.7006,-6.047995400827
894,2,"

def solve(string):
    tuple_list = []
    for num in string.split():
        tuple_list.append(float(num))
    return tuple(tuple_list)",0.8017,-6.63086781731
894,3,"

def solve(string):
    return tuple(float(x) for x in string.split())",0.8132,-3.515973597863
894,4,"

def solve(string):
    tuple_lst = tuple(float(num) for num in string.split())
    return tuple_lst",0.7028,-8.112898512805
894,5,"

def solve(string):
    return tuple(float(i) for i in string.split(','))",0.7034,-6.331825455702
895,1,"

def solve(arr):
    if not arr:
        return 0
    n = len(arr)
    if n == 1:
        return arr[0]
    max_sum = [0] * n
    max_sum[0] = arr[0]
    max_sum[1] = max(arr[0], arr[1])
    for i in range(2, n):
        max_sum[i] = max(max_sum[i-1], max_sum[i-2] + arr[i])
    return max_sum[-1]",0.904,-11.205206087860503
895,2,"

def solve(arr):
    incl = 0
    excl = 0
    for i in arr:
        new_excl = max(incl, excl)
        incl = excl + i
        excl = new_excl
    return max(incl, excl)",0.9475,-3.0178958271077
895,3,"

def solve(arr):
    if not arr:
        return 0
    incl = arr[0]
    excl = 0
    for i in range(1, len(arr)):
        temp = incl
        incl = max(incl, excl + arr[i])
        excl = temp
    return incl",0.889,-7.532160489135004
895,4,"

def solve(arr):
    incl = 0
    excl = 0
    for i in arr:
        new_excl = excl if excl > incl else incl
        incl = excl + i
        excl = new_excl
    return excl if excl > incl else incl",0.9182,-5.032953437699502
895,5,"

def solve(arr):
    n = len(arr)
    if n == 0:
        return 0
    if n == 1:
        return arr[0]
    dp = [0] * n
    dp[0] = arr[0]
    dp[1] = max(arr[0], arr[1])
    for i in range(2, n):
        dp[i] = max(dp[i-1], dp[i-2] + arr[i])
    return dp[n-1]",0.9474,-5.785496697968901
896,1,"

def solve(tuples):
    return sorted(tuples, key=lambda x: x[-1])",0.9175,-1.7223385350650002
896,2,"

def solve(list_of_tuples):
    return sorted(list_of_tuples, key=lambda x: x[-1])",0.8666,-3.1508486883866995
896,3,"

def solve(tuples):
    return sorted(tuples, key=lambda x: x[-1])",0.9175,-1.7223385350650002
896,4,"

def solve(lst):
    return sorted(lst, key=lambda x: x[-1])",0.9073,-1.7507178393654996
896,5,"

def solve(lst):
    return sorted(lst, key=lambda x: x[-1])",0.9073,-1.7507178393654996
897,1,"

def solve(sentence, word):
    if word in sentence:
        return True
    else:
        return False",0.9355,-1.5333776978130005
897,2,"

def solve(word, sentence):
    if word in sentence:
        return True
    else:
        return False",0.9506,-1.166162667385
897,3,"

def solve(word, sentence):
    if word in sentence:
        return True
    else:
        return False",0.9506,-1.166162667385
897,4,"

def solve(word, sentence):
    if word in sentence:
        return True
    else:
        return False",0.9506,-1.166162667385
897,5,"

def solve(sentence, word):
  words = sentence.split()
  if word in words:
    return True
  else:
    return False",0.7797,-7.217351101257001
898,1,"

def solve(lst, n):
    result = []
    for i in range(len(lst)):
        if i+n <= len(lst):
            result.append(lst[i:i+n])
    return result",0.8977,-4.100768424713
898,2,"

def solve(lst, n):
    result = []
    for i in range(len(lst)-n+1):
        result.append(lst[i:i+n])
    return result",0.9378,-2.182786674626
898,3,"

def solve(lst, n):
    result = []
    for i in range(len(lst)-n+1):
        temp = lst[i:i+n]
        if temp == lst[i:i+n]:
            result.append(temp)
    return result",0.8476,-7.935521195176
898,4,"

def solve(lst, n):
    result = []
    for i in range(len(lst)-n+1):
        result.append(lst[i:i+n])
    return result",0.9378,-2.182786674626
898,5,"

def solve(lst, n):
    i = 0
    result = []
    
    while i < len(lst):
        if len(result) == n:
            break
        else:
            result.append(lst[i])
        i += 1
    
    return result",0.7263,-17.270357475294
899,1,"

def solve(arr):
    left = 0
    right = len(arr) - 1
    while left < right:
        if arr[left] > arr[right]:
            return False
        left += 1
        right -= 1
    return True",0.9241,-4.341278241954998
899,2,"

def solve(arr):
    for i in range(len(arr)-1):
        if arr[i] > arr[i+1]:
            return False
    return True",0.8413,-5.704106917005
899,3,"

def solve(arr):
    if not arr:
        return False
    left = 0
    right = len(arr) - 1
    while left < right:
        if arr[left] > arr[right]:
            return False
        left += 1
        right -= 1
    return True",0.879,-8.257430975655994
899,4,"

def solve(arr):
    left = 0
    right = len(arr) - 1
    while left < right:
        if arr[left] > arr[right]:
            return False
        left += 1
        right -= 1
    return True",0.9241,-4.341278241954998
899,5,"

def solve(arr):
    if len(arr) < 3:
        return True
    else:
        left = 0
        right = len(arr) - 1
        while left < right:
            if arr[left] > arr[right]:
                return False
            left += 1
            right -= 1
        return True",0.8843,-8.729804767837999
900,1,"

def solve(string, number):
    if string.startswith(str(number)):
        return True
    else:
        return False",0.9478,-1.286515779956
900,2,"

def solve(string, number):
    if string.startswith(str(number)):
        return True
    else:
        return False",0.9478,-1.286515779956
900,3,"

def solve(string, number):
    if string.startswith(str(number)):
        return True
    else:
        return False ",0.8205,-4.946117179956
900,4,"

def solve(string, number):
    if string.startswith(str(number)):
        return True
    else:
        return False",0.9478,-1.286515779956
900,5,"

def solve(string, number):
    if string.startswith(str(number)):
        return True
    else:
        return False",0.9478,-1.286515779956
901,1,"

def solve(n):
    result = 1
    for i in range(1, n+1):
        result *= i
    return result",0.9142,-2.7814018432640006
901,2,"

def solve(n):
    result = 1
    for i in range(2, n+1):
        result *= i // math.gcd(result, i)
    return result",0.8765,-5.009490105408002
901,3,"

def solve(n):
    result = n
    for i in range(1, n+1):
        result *= i // gcd(result, i)
    return result

def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)",0.8503,-10.543527600049002
901,4,"

def solve(n):
    smallest_multiple = 1
    for i in range(1, n+1):
        smallest_multiple *= i
    return smallest_multiple",0.8929,-3.851144225892
901,5,"

def solve(n):
    multiple = 1
    for i in range(2, n+1):
        multiple *= i
    return multiple",0.8317,-5.71155249441
902,1,"

def solve(dict1, dict2):
    combined_dict = dict1.copy()
    for key, value in dict2.items():
        if key in combined_dict:
            combined_dict[key] += value
        else:
            combined_dict[key] = value
    return combined_dict",0.9583,-2.4293744858171005
902,2,"

def solve(dict1, dict2):
  combined_dict = {}
  for key in dict1:
    if key in dict2:
      combined_dict[key] = dict1[key] + dict2[key]
    else:
      combined_dict[key] = dict1[key]
  for key in dict2:
    if key not in combined_dict:
      combined_dict[key] = dict2[key]
  return combined_dict",0.9348,-5.728903036932
902,3,"

def solve(dict1, dict2):

    for key in dict2:
        if key in dict1:
            dict1[key] += dict2[key]
        else:
            dict1[key] = dict2[key]
    
    return dict1",0.8477,-8.427440582660603
902,4,"

def solve(dict1, dict2):
    combined_dict = {}
    for key in dict1:
        if key in dict2:
            combined_dict[key] = dict1[key] + dict2[key]
        else:
            combined_dict[key] = dict1[key]
    for key in dict2:
        if key not in dict1:
            combined_dict[key] = dict2[key]
    return combined_dict",0.9647,-3.0512871566282995
902,5,"

def solve(dict1, dict2):
    combined_dict = {}
    
    for key in dict1:
        if key in dict2:
            combined_dict[key] = dict1[key] + dict2[key]
        else:
            combined_dict[key] = dict1[key]
            
    for key in dict2:
        if key not in combined_dict:
            combined_dict[key] = dict2[key]
            
    return combined_dict",0.9273,-6.6408822740954
903,1,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        count += bin(i).count('0') - 1
    return count",0.9213,-3.277460382009001
903,2,"

def solve(n):
    count = 0
    for i in range(1, n + 1):
        binary = bin(i)
        count += binary.count('0') - 1
    return count",0.7987,-10.111858140725
903,3,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        count += bin(i)[2:].count('0')
    return count",0.9162,-3.3257240585969994
903,4,"

def solve(n):

    bits = 0
    for i in range(1, n+1):
        bits += bin(i).count('0') - 1

    return bits",0.724,-12.917649530298
903,5,"

def solve(n):
    count = 0
    for i in range(1, n+1):
        binary = bin(i)[2:]
        for bit in binary:
            if bit == '0':
                count += 1
    return count",0.9222,-4.293010473853501
904,1,"

def solve(num):
    if num % 2 == 0:
        return True
    else:
        return False",0.9556,-1.136598768126
904,2,"

def solve(num):
    if num % 2 == 0:
        return True
    else:
        return False",0.9556,-1.136598768126
904,3,"

def solve(n):
    return n % 2 == 0",0.8219,-2.746652620015
904,4,"

def solve(n):
    if n % 2 == 0:
        return True
    else:
        return False",0.919,-2.112304672046
904,5,"

def solve(n):
  if n % 2 == 0:
    return True
  else:
    return False",0.7973,-5.664241789818002
905,1,"

def solve(n):
    sum = 0
    for i in range(n+1):
        sum += (nCr(n,i))**2
    return sum",0.8948,-3.89189193677
905,2,"

def solve(n):
    sum = 0
    for i in range(n+1):
        sum += (nCr(n,i))**2
    return sum

def nCr(n, r):
    return factorial(n) // (factorial(r) * factorial(n - r))

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)",0.8726,-11.987543480467
905,3,"

def solve(n):
    result = 0
    for i in range(n+1):
        result += (nCr(n, i))**2
    return result
    
def nCr(n, r):
    if r > n:
        return 0
    else:
        return factorial(n) // (factorial(r) * factorial(n-r))

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)",0.8784,-13.220638310235996
905,4,"

def solve(n):
    sum = 0
    for i in range(n+1):
        sum += (i**2)
    return sum",0.8351,-5.584541741449999
905,5,"
def solve(n):
    sum = 0
    for i in range(n+1):
        sum += (nCr(n, i))**2
    return sum

def nCr(n, r):
    if r > n - r:
        r = n - r
    ans = 1
    for i in range(r):
        ans = ans * (n - i)
        ans = ans // (i + 1)
    return ans",0.8534,-15.223224888334004
906,1,"

import re

def solve(url):
    pattern = ""(\d{4})/(\d{2})/(\d{2})""
    match = re.search(pattern, url)
    year = match.group(1)
    month = match.group(2)
    date = match.group(3)
    return year, month, date",0.9138,-6.2196673796534006
906,2,"

import re

def solve(url):
  regex = r'/(\d{4})/(\d{2})/(\d{2})/'
  match = re.search(regex, url)
  return match.group(1), match.group(2), match.group(3)",0.8149,-11.665288928034
906,3,"

import re

def solve(url):
    pattern = r'\d{4}/\d{2}/\d{2}'
    match = re.search(pattern, url)
    if match:
        date = match.group()
        year = date[:4]
        month = date[5:7]
        day = date[8:]
        return year, month, day
    else:
        return ""Invalid URL""",0.8894,-10.075307117826
906,4,"

import re

def solve(url):
    pattern = r'(\d{4})\/(\d{2})\/(\d{2})'
    match = re.search(pattern, url)
    year = match.group(1)
    month = match.group(2)
    date = match.group(3)
    return year, month, date",0.9199,-5.928610088092901
906,5,"

import re

def solve(url):
    match = re.search(r'\d{4}\/\d{2}\/\d{2}', url)
    if match:
        date_str = match.group()
        year = date_str[:4]
        month = date_str[5:7]
        day = date_str[8:]
        return year, month, day
    else:
        return None",0.8534,-13.321110077708497
907,1,"

def solve(n):
    lucky_numbers = []
    i = 1
    while len(lucky_numbers) < n:
        num = i
        while num % 7 == 0 or '7' in str(num):
            num += 1
        lucky_numbers.append(num)
        i = num + 1
    return lucky_numbers",0.8681,-10.181994281083997
907,2,"

def solve(n):
    lucky_numbers = [1]
    count = 1
    num = 2
    while count < n:
        if all(num % i != 0 for i in lucky_numbers):
            lucky_numbers.append(num)
            count += 1
        num += 1
    return lucky_numbers",0.8836,-8.292541122553
907,3,"

def solve(n):
    count = 0
    num = 1
    while count < n:
        if ""4"" not in str(num) and ""7"" not in str(num):
            count += 1
            print(num)
        num += 1",0.8658,-8.211533891833
907,4,"

def solve(n):
    lucky_numbers = []
    num = 1
    while len(lucky_numbers) < n:
        temp = num
        count = 0
        while temp > 0:
            digit = temp % 10
            if digit == 3 or digit == 7:
                count += 1
            temp //= 10
        if count == 3 or count == 7:
            lucky_numbers.append(num)
        num += 1
    return lucky_numbers",0.8989,-11.083158005423993
907,5,"

def solve(n):
    lucky_numbers = []
    num = 1
    while len(lucky_numbers) < n:
        num_str = str(num)
        if '4' not in num_str and '7' not in num_str:
            lucky_numbers.append(num)
        num += 1
    return lucky_numbers",0.9114,-6.214124698120999
908,1,"

def solve(arr):
    for i in range(len(arr)):
        if arr[i] == i:
            return i
    return -1",0.9694,-0.899960782052
908,2,"

def solve(arr):
    for i in range(len(arr)):
        if arr[i] == i:
            return i
    return -1",0.9694,-0.899960782052
908,3,"

def solve(arr):
    for i in range(len(arr)):
        if arr[i] == i:
            return i
    return -1",0.9694,-0.899960782052
908,4,"

def solve(arr):
    for i in range(len(arr)):
        if arr[i] == i:
            return i
    return -1",0.9694,-0.899960782052
908,5,"

def solve(arr):
    for i in range(len(arr)):
        if arr[i] == i:
            return arr[i]
    return -1",0.8989,-3.1963409402220004
909,1,"

def solve(num):
    num -= 1
    while str(num) != str(num)[::-1]:
        num -= 1
    return num",0.9488,-1.6830605973089998
909,2,"

def solve(num):
    num -= 1
    while str(num) != str(num)[::-1]:
        num -= 1
    return num",0.9488,-1.6830605973089998
909,3,"

def solve(num):
    num -= 1
    while str(num) != str(num)[::-1]:
        num -= 1
    return num",0.9488,-1.6830605973089998
909,4,"

def solve(num):
    while True:
        num -= 1
        if str(num) == str(num)[::-1]:
            return num",0.9164,-2.620478555711001
909,5,"

def solve(number):
    num = number - 1
    while True:
        if str(num) == str(num)[::-1]:
            return num
        num -= 1",0.8038,-8.300588296035002
910,1,"

def solve(year, month, day):
    if year < 1 or month < 1 or month > 12 or day < 1:
        return False
    if month == 2:
        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
            if day <= 29:
                return True
            else:
                return False
        else:
            if day <= 28:
                return True
            else:
                return False
    elif month in [4, 6, 9, 11]:
        if day <= 30:
            return True
        else:
            return False
    else:
        if day <= 31:
            return True
        else:
            return False",0.9443,-9.281602383566987
910,2,"

def solve(year, month, day):
    if year < 1:
        return False
    if month < 1 or month > 12:
        return False
    if day < 1:
        return False
    if month == 2:
        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
            if day > 29:
                return False
        else:
            if day > 28:
                return False
    elif month in [4, 6, 9, 11]:
        if day > 30:
            return False
    else:
        if day > 31:
            return False
    return True",0.9549,-6.927598542941496
910,3,"

def solve(year, month, day):
    if year < 0 or month < 1 or month > 12 or day < 1:
        return False
    elif month in [1, 3, 5, 7, 8, 10, 12]:
        return day <= 31
    elif month in [4, 6, 9, 11]:
        return day <= 30
    else:
        if year % 4 == 0:
            if year % 100 == 0:
                if year % 400 == 0:
                    return day <= 29
                else:
                    return day <= 28
            else:
                return day <= 29
        else:
            return day <= 28",0.9358,-10.542284641488497
910,4,"
def solve(year, month, day):
    if year < 1 or year > 9999:
        return False
    if month < 1 or month > 12:
        return False
    if day < 1 or day > 31:
        return False
    if month in [4, 6, 9, 11] and day > 30:
        return False
    if month == 2 and year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
        if day > 29:
            return False
    elif month == 2 and day > 28:
        return False
    return True",0.9039,-14.744992913310298
910,5,"

def solve(date):
    month, day, year = date.split('/')
    if int(year) % 4 == 0:
        leap_year = True
    else:
        leap_year = False
    if int(month) == 2:
        if leap_year == True:
            if int(day) > 0 and int(day) <= 29:
                return True
            else:
                return False
        else:
            if int(day) > 0 and int(day) <= 28:
                return True
            else:
                return False
    elif int(month) in [4, 6, 9, 11]:
        if int(day) > 0 and int(day) <= 30:
            return True
        else:
            return False
    else:
        if int(day) > 0 and int(day) <= 31:
            return True
        else:
            return False",0.8876,-22.541348409825
911,1,"

import heapq

def solve(nums):
    heapq.heapify(nums)
    max1 = heapq.heappop(nums)
    max2 = heapq.heappop(nums)
    max3 = heapq.heappop(nums)
    max_prod = max1 * max2 * max3
    heapq.heappush(nums, max1)
    heapq.heappush(nums, max2)
    heapq.heappush(nums, max3)
    min1 = heapq.heappop(nums)
    min2 = heapq.heappop(nums)
    max_prod = max(max_prod, min1 * min2 * max3)
    return max_prod",0.9135,-11.5748402902441
911,2,"

import heapq

def solve(nums):
    heap = heapq.heapify(nums)
    max1 = heapq.heappop(nums)
    max2 = heapq.heappop(nums)
    max3 = heapq.heappop(nums)
    return max1 * max2 * max3",0.8839,-6.914131386071001
911,3,"

def solve(nums):
    import heapq
    heapq.heapify(nums)
    max1 = heapq.nlargest(3, nums)
    max2 = heapq.nsmallest(2, nums)
    return max(max1[0] * max1[1] * max1[2], max1[0] * max2[0] * max2[1])",0.9134,-7.0624620155894
911,4,"

import heapq

def solve(nums):
    heap = heapq.nlargest(3, nums)
    return heap[0] * heap[1] * heap[2]",0.9096,-3.4102417715775
911,5,"

def solve(nums):
    import heapq
    heapq.heapify(nums)
    max1 = heapq.heappop(nums)
    max2 = heapq.heappop(nums)
    max3 = heapq.heappop(nums)
    min1 = heapq.heappop(nums)
    min2 = heapq.heappop(nums)
    
    return max(max1*max2*max3, max1*min1*min2)",0.9019,-8.981051754631599
912,1,"

import math

def solve(ln, m):
    return math.log(m, ln)",0.6222,-8.5408887358
912,2,"

def solve(x):
    ln = 0
    m = 0
    while x > 1:
        ln += 1
        x /= 2
    while x < 0.5:
        ln -= 1
        x *= 2
    while m < x:
        m += 1
    return ln, m",0.7981,-16.687054962258003
912,3,"

def solve(n):
    result = 0
    for i in range(1, n + 1):
        result += math.log(i)
    return result",0.8275,-6.438064510424998
912,4,"

import math

def solve(n):
    l = 0
    for i in range(1,n+1):
        l += math.log(i)
    return l",0.7403,-10.522889639638002
912,5,"

def solve(n):
    ln = 0
    for i in range(1, n+1):
        ln += 1/(i*(i+1))
    return ln",0.7551,-10.676141141170003
913,1,"

def solve(string):
    if string[-1].isdigit():
        return True
    else:
        return False",0.9598,-0.9446256146489996
913,2,"

def solve(string):
    if string[-1].isdigit():
        return True
    else:
        return False",0.9598,-0.9446256146489996
913,3,"

def solve(string):
    if string[-1].isdigit():
        return True
    else:
        return False",0.9598,-0.9446256146489996
913,4,"

def solve(string):
    if string[-1].isdigit():
        return True
    else:
        return False",0.9598,-0.9446256146489996
913,5,"

def solve(string):
    if string[-1].isdigit():
        return True
    else:
        return False",0.9598,-0.9446256146489996
914,1,"

def solve(string):
    if len(string) <= 1:
        return False
    first_char = string[0]
    second_char = string[1]
    for i in range(2, len(string)):
        if i % 2 == 0 and string[i] != first_char:
            return False
        elif i % 2 != 0 and string[i] != second_char:
            return False
    return True",0.9078,-8.703672111374003
914,2,"

def solve(s):
    if len(s) < 2:
        return False
    else:
        for i in range(len(s)-1):
            if s[i] == s[i+1]:
                return False
        return True",0.8896,-5.729638213238501
914,3,"

def solve(string):
    for i in range(len(string)-1):
        if string[i] == string[i+1]:
            return False
    return True",0.9207,-2.7263090163889996
914,4,"

def solve(s):
    for i in range(len(s)):
        if i+1 < len(s):
            if s[i] == s[i+1]:
                return False
    return True",0.8379,-7.073652425599
914,5,"

def solve(s):
    if len(s) < 2:
        return False
    
    first = s[0]
    second = s[1]
    
    for i in range(2, len(s)):
        if i % 2 == 0:
            if s[i] != first:
                return False
        else:
            if s[i] != second:
                return False
    
    return True",0.9158,-7.389063163981202
915,1,"

def solve(arr):
    return sorted(arr, key=lambda x: 0 if x >= 0 else 1)",0.8457,-4.189305445893
915,2,"

def solve(arr):
    return sorted(arr, key=lambda x: (x < 0, abs(x)))",0.8541,-3.628307323829
915,3,"

def solve(arr):
    pos = list(filter(lambda x: x > 0, arr))
    neg = list(filter(lambda x: x < 0, arr))
    return neg + pos",0.9189,-3.381589801847
915,4,"

def solve(arr):
    return sorted(arr, key=lambda x: (x >= 0, x))",0.8242,-4.25394405469
915,5,"

def solve(arr):
  return sorted(arr, key=lambda x: x>=0)",0.6791,-6.9647637955300015
916,1,"

def solve(arr, target):
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                if arr[i] + arr[j] + arr[k] == target:
                    return True
    return False",0.968,-2.015072651812999
916,2,"

def solve(arr, target):
    for i in range(len(arr)-2):
        for j in range(i+1, len(arr)-1):
            for k in range(j+1, len(arr)):
                if arr[i] + arr[j] + arr[k] == target:
                    return True
    return False",0.9723,-1.8513467357910005
916,3,"

def solve(arr, target):
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            for k in range(j+1, len(arr)):
                if arr[i] + arr[j] + arr[k] == target:
                    return True
    return False",0.968,-2.015072651812999
916,4,"

def solve(arr, target):
    for i in range(len(arr)-2):
        for j in range(i+1,len(arr)-1):
            for k in range(j+1,len(arr)):
                if (arr[i] + arr[j] + arr[k]) == target:
                    return True
    return False",0.8643,-9.480814133210002
916,5,"

def solve(arr, target):
    for i in range(len(arr)-2):
        for j in range(i+1, len(arr)-1):
            for k in range(j+1, len(arr)):
                if arr[i]+arr[j]+arr[k] == target:
                    return True
    return False",0.9496,-3.3110149055089995
917,1,"

def solve(string):
    prev_upper = False
    sequences = []
    
    for char in string:
        if char.isupper():
            if prev_upper:
                sequences[-1] += char
            else:
                sequences.append(char)
            prev_upper = True
        else:
            prev_upper = False
    
    return sequences",0.0,-10004.61430381105
917,2,"

def solve(string):
    result = []
    i = 0
    while i < len(string):
        if string[i].isupper() and i+1 < len(string) and string[i+1].islower():
            sequence = string[i]
            i += 1
            while i < len(string) and string[i].islower():
                sequence += string[i]
                i += 1
            result.append(sequence)
        else:
            i += 1
    return result",0.9222,-8.255920066788898
917,3,"

def solve(string):
    sequences = []
    upper = False
    for char in string:
        if char.isupper() and not upper:
            upper = True
        elif char.islower() and upper:
            sequences.append(string[string.index(char)-1:string.index(char)+1])
            upper = False
        else:
            upper = False
    return sequences",0.8813,-9.477288597266998
917,4,"

def solve(string):
    sequences = []
    i = 0
    while i < len(string) - 1:
        if string[i].isupper() and string[i+1].islower():
            j = i + 1
            while j < len(string) and string[j].islower():
                j += 1
            sequences.append(string[i:j])
            i = j - 1
        i += 1
    return sequences",0.9154,-8.394407498849002
917,5,"

def solve(string):
    result = []
    i = 0
    while i < len(string):
        if string[i].isupper() and i < len(string) - 1 and string[i+1].islower():
            seq = string[i]
            i += 1
            while i < len(string) and string[i].islower():
                seq += string[i]
                i += 1
            result.append(seq)
        else:
            i += 1
    return result",0.9004,-10.811420810257
918,1,"

def solve(coin_list, total):
    dp = [0] * (total + 1)
    dp[0] = 1
    for coin in coin_list:
        for i in range(coin, total + 1):
            dp[i] += dp[i - coin]
    return dp[total]",0.8695,-9.371387620297003
918,2,"

def solve(coins, amount):
    dp = [0] * (amount + 1)
    dp[0] = 1
    for coin in coins:
        for i in range(coin, amount + 1):
            dp[i] += dp[i - coin]
    return dp[amount]",0.9681,-2.106535899759
918,3,"

def solve(coins, amount):
    dp = [0] * (amount + 1)
    dp[0] = 1
    for coin in coins:
        for i in range(coin, amount + 1):
            dp[i] += dp[i - coin]
    return dp[amount]",0.9681,-2.106535899759
918,4,"
def solve(coins, amount):
    dp = [0] * (amount + 1)
    dp[0] = 1
    for coin in coins:
        for i in range(coin, amount + 1):
            dp[i] += dp[i - coin]
    return dp[amount]",0.9257,-5.017505967051001
918,5,"

def solve(coins, amount):
    dp = [0] * (amount + 1)
    dp[0] = 1
    
    for coin in coins:
        for i in range(coin, amount + 1):
            dp[i] += dp[i - coin]
            
    return dp[amount]",0.9355,-4.3987068259769995
919,1,"

def solve(lst):
    result = 1
    for num in lst:
        result *= num
    return result ",0.8183,-5.2137971858303995
919,2,"

def solve(lst):
    result = 1
    for num in lst:
        result *= num
    return result",0.939,-1.5725105858304
919,3,"

def solve(lst):
    result = 1
    for num in lst:
        result *= num
    return result",0.939,-1.5725105858304
919,4,"

def solve(lst):
    result = 1
    for num in lst:
        result *= num
    return result",0.939,-1.5725105858304
919,5,"

def solve(lst):
    prod = 1
    for num in lst:
        prod *= num
    return prod",0.8603,-3.7630684217523
920,1,"

def solve(tuple_list):
    return [tup for tup in tuple_list if any(tup)]",0.8557,-3.273243111718
920,2,"

def solve(tuple_list):
    new_list = []
    for tup in tuple_list:
        if any(item is not None for item in tup):
            new_list.append(tup)
    return new_list",0.8653,-5.932678228552999
920,3,"

def solve(tuple_list):
    cleaned_list = [t for t in tuple_list if any(v is not None for v in t)]
    return cleaned_list",0.742,-9.549503905700002
920,4,"

def solve(tuple_list):
    filtered_list = [tup for tup in tuple_list if not all(item is None for item in tup)]
    return filtered_list",0.7709,-8.585290857648
920,5,"

def solve(tuple_list):
    return [t for t in tuple_list if not all(x is None for x in t)]",0.8219,-5.1000327164989985
921,1,"

def solve(tuples, n):
    result = []
    for i in range(0, len(tuples), n):
        result.append(tuples[i:i+n])
    return result",0.9334,-2.6181890871469986
921,2,"

def solve(tuples, n):
    chunked_tuples = []
    for i in range(0, len(tuples), n):
        chunked_tuples.append(tuples[i:i+n])
    return chunked_tuples",0.9504,-2.2404438659770003
921,3,"

def solve(tuples, n):
    result = []
    for i in range(0, len(tuples), n):
        result.append(tuples[i:i + n])
    return result",0.8822,-4.888996390296997
921,4,"

def solve(tuples, n):
    chunked_tuples = []
    for i in range(0, len(tuples), n):
        chunked_tuples.append(tuples[i:i+n])
    return chunked_tuples",0.9504,-2.2404438659770003
921,5,"

def solve(input_list, n):
    output = []
    for i in range(0, len(input_list), n):
        output.append(tuple(input_list[i:i+n]))
    return output",0.8027,-8.571721440881996
922,1,"

def solve(arr):
    max1 = max(arr)
    arr.remove(max1)
    max2 = max(arr)
    return max1 * max2",0.8718,-4.390635413272001
922,2,"

def solve(arr):
    max_product = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            product = arr[i] * arr[j]
            if product > max_product:
                max_product = product
    return max_product",0.9322,-4.140896857640501
922,3,"

def solve(arr):
    arr.sort(reverse=True)
    highest_product = arr[0] * arr[1]
    return highest_product",0.6911,-10.345810715143
922,4,"

def solve(arr):
    max_product = float('-inf')
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            product = arr[i] * arr[j]
            if product > max_product:
                max_product = product
                pair = (arr[i], arr[j])
    return pair",0.9442,-3.9654024472400007
922,5,"

def solve(nums):
    max_prod = float('-inf')
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            prod = nums[i] * nums[j]
            if prod > max_prod:
                max_prod = prod
    return max_prod",0.8927,-6.810190598706698
923,1,"

def solve(str1, str2):
    m = len(str1)
    n = len(str2)
    dp = [[0 for x in range(n+1)] for x in range(m+1)]
    for i in range(m+1):
        for j in range(n+1):
            if i == 0 or j == 0:
                dp[i][j] = 0
            elif str1[i-1] == str2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    lcs = dp[m][n]
    return m + n - lcs",0.9683,-5.191472851484799
923,2,"

def solve(str1, str2):
    m = len(str1)
    n = len(str2)

    dp = [[0]*(n+1) for i in range(m+1)]

    for i in range(m+1):
        for j in range(n+1):
            if i == 0 or j == 0:
                dp[i][j] = 0
            elif str1[i-1] == str2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])

    lcs = dp[m][n]
    return m + n - lcs",0.9486,-8.332010788071896
923,3,"

def solve(str1, str2):
    m = len(str1)
    n = len(str2)
    dp = [[0 for j in range(n+1)] for i in range(m+1)]
    
    for i in range(m+1):
        for j in range(n+1):
            if i==0 or j==0:
                dp[i][j] = 0
            elif str1[i-1] == str2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    
    lcs = dp[m][n]
    return m+n-lcs",0.9308,-11.402954282778598
923,4,"

def solve(str1, str2):
    m = len(str1)
    n = len(str2)

    dp = [[0 for x in range(n + 1)] for x in range(m + 1)]

    for i in range(m + 1):
        for j in range(n + 1):
            if i == 0 or j == 0:
                dp[i][j] = 0
            elif str1[i - 1] == str2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    lcs = dp[m][n]
    return m + n - lcs",0.9607,-6.858304336619001
923,5,"

def solve(str1, str2):
    m = len(str1)
    n = len(str2)
    dp = [[0 for j in range(n+1)] for i in range(m+1)]
    for i in range(1, m+1):
        for j in range(1, n+1):
            if str1[i-1] == str2[j-1]:
                dp[i][j] = dp[i-1][j-1] + 1
            else:
                dp[i][j] = max(dp[i-1][j], dp[i][j-1])
    return m + n - dp[m][n]",0.9429,-8.170407946113802
924,1,"

def solve(num1, num2):
    if num1 > num2:
        return num1
    else:
        return num2",0.9636,-1.075898062987
924,2,"

def solve(num1, num2):
    if num1 > num2:
        return num1
    else:
        return num2",0.9636,-1.075898062987
924,3,"

def solve(num1, num2):
    if num1 > num2:
        return num1
    else:
        return num2",0.9636,-1.075898062987
924,4,"

def solve(num1, num2):
    if num1 > num2:
        return num1
    else:
        return num2",0.9636,-1.075898062987
924,5,"

def solve(a, b):
    if a > b:
        return a
    else:
        return b",0.9257,-1.7756222612980002
925,1,"

def solve(tuple):
    product = 1
    for num in tuple:
        product *= num
    return product",0.9365,-1.6400790695880003
925,2,"

def solve(tup):
    product = 1
    for num in tup:
        product *= num
    return product",0.9227,-2.0907830242105
925,3,"

def solve(tup):
    prod = 1
    for num in tup:
        prod *= num
    return prod",0.905,-2.5945573672955
925,4,"

def solve(tuple):
    product = 1
    for num in tuple:
        product *= num
    return product",0.9365,-1.6400790695880003
925,5,"

def solve(numbers):
    product = 1
    for num in numbers:
        product *= num
    return product",0.8942,-2.7958710504493
926,1,"

def solve(n):
    if n == 1 or n == 2:
        return 1
    else:
        return solve(n-1) + solve(n-2)",0.9433,-2.217419339128
926,2,"

def solve(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return solve(n-1) + solve(n-2)",0.9352,-3.0136618458170004
926,3,"

def solve(n):
    if n == 1:
        return 1
    elif n == 2:
        return 2
    else:
        return solve(n-1) + solve(n-2)",0.9404,-2.764251467008
926,4,"

def solve(n): 
    if n==1 or n==2: 
        return 1
    else: 
        return solve(n-1)+solve(n-2)",0.7914,-8.887883811330003
926,5,"

def solve(n):
    if n == 1:
        return 1
    elif n == 2:
        return 2
    else:
        return solve(n-1) + solve(n-2)",0.9404,-2.764251467008
927,1,"

def solve(root):
    if root is None:
        return 0
    else:
        return max(solve(root.left), solve(root.right)) + 1",0.9306,-2.4464832367840006
927,2,"

def solve(root):
    if root is None:
        return 0
    else:
        return max(solve(root.left), solve(root.right)) + 1",0.9306,-2.4464832367840006
927,3,"

def solve(root):
    if root is None:
        return 0
    else:
        left_height = solve(root.left)
        right_height = solve(root.right)
        return max(left_height, right_height) + 1",0.9394,-2.938482174636001
927,4,"

def solve(root):
    if root is None:
        return 0
    else:
        left_height = solve(root.left)
        right_height = solve(root.right)
        
        if left_height > right_height:
            return left_height + 1
        else:
            return right_height + 1",0.9265,-4.733556120317001
927,5,"

def solve(root):
    if root is None:
        return 0
    else:
        left_height = solve(root.left)
        right_height = solve(root.right)
        if left_height > right_height:
            return left_height + 1
        else:
            return right_height + 1",0.9112,-5.6695989238180005
928,1,"

def solve(date):
    return date.split(""-"")[2] + ""-"" + date.split(""-"")[1] + ""-"" + date.split(""-"")[0]",0.822,-6.076943450361001
928,2,"

def solve(date):
    new_date = date.split(""-"")
    return new_date[2] + ""-"" + new_date[1] + ""-"" + new_date[0]",0.8681,-5.090170300774001
928,3,"

def solve(date):
    split_date = date.split('-')
    new_date = split_date[2] + '-' + split_date[1] + '-' + split_date[0]
    return new_date",0.8874,-5.017331172083001
928,4,"

def solve(date):
  date_parts = date.split(""-"")
  day = date_parts[2]
  month = date_parts[1]
  year = date_parts[0]
  return ""{}-{}-{}"".format(day, month, year)",0.7955,-11.670118347973698
928,5,"

def solve(date):
    date_lst = date.split(""-"")
    return date_lst[2]+""-""+date_lst[1]+""-""+date_lst[0]",0.7756,-8.133359085763
929,1,"

def solve(tup):
    count_dict = {}
    for item in tup:
        if item in count_dict:
            count_dict[item] += 1
        else:
            count_dict[item] = 1
    return count_dict",0.9289,-3.615080806279
929,2,"

def solve(tup):
    count = {}
    for item in tup:
        if item in count:
            count[item] += 1
        else:
            count[item] = 1
    return {k: v for k, v in count.items() if v > 1}",0.9076,-5.914100379332499
929,3,"

def solve(tuple_input):
    count_dict = {}
    for item in tuple_input:
        if item in count_dict:
            count_dict[item] += 1
        else:
            count_dict[item] = 1
    count_list = []
    for key, value in count_dict.items():
        if value > 1:
            count_list.append((key, value))
    return count_list",0.8997,-8.5652181815605
929,4,"

def solve(tup):
    count = {}
    for item in tup:
        if item in count:
            count[item] += 1
        else:
            count[item] = 1
    return {key: value for key, value in count.items() if value > 1}",0.9066,-5.980008502748498
929,5,"

def solve(t):
    count_dict = {}
    for item in t:
        if item in count_dict:
            count_dict[item] += 1
        else:
            count_dict[item] = 1
    return count_dict",0.8792,-6.1805008307339975
930,1,"

import re

def solve(text):
    pattern = r""a*b*""
    # ""a"" followed by zero or more ""b's""
    # ""a"" can be followed by any number of ""b's""
    # ""a"" does not have to be followed by ""b""
    # ""b"" can appear zero or more times
    match = re.findall(pattern, text)
    # returns a list of all matches found in the text
    if match:
        print(""Match found!"")
    else:
        print(""No match found."")
    return match

# Example usage:
solve(""ab"")  # Output: [""ab""]
solve(""ac"")  # Output: [""a""]
solve(""abb"")  # Output: [""abb"", ""ab"", ""a""]
solve(""ba"")  # Output: [""a""]
solve(""bbb"")  # Output: [""b"", """", ""bb"", ""b"", ""bb"", ""b"", ""b"", ""b"", ""b"", ""b"", ""b"", ""b"", ""b"", ""b"", ""b"", ""b""]",0.6531,-96.72368730185006
930,2,"

import re
def solve(string):
    pattern = r'a[b]*'
    if re.search(pattern, string):
        return True
    else:
        return False",0.8264,-6.484694237283999
930,3,"

import re

def solve(string):
    pattern = ""ab*""
    matches = re.findall(pattern, string)
    if matches:
        return True
    else:
        return False",0.8551,-5.949841301448
930,4,"

def solve(string):
    pattern = r'a[b]*'
    match = re.search(pattern, string)
    if match:
        return True
    else:
        return False",0.8417,-6.2027175351100015
930,5,"

import re

def solve(string):
    pattern = r""a*b*""
    if re.search(pattern, string):
        return True
    else:
        return False",0.8374,-6.03540916684
931,1,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**3
    return sum",0.9721,-0.9343305589080002
931,2,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**3
    return sum",0.9721,-0.9343305589080002
931,3,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**3
    return sum",0.9721,-0.9343305589080002
931,4,"

def solve(n):
    sum = 0
    for i in range(1,n+1):
        sum += i**3
    return sum",0.9394,-1.999618891767
931,5,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i**3
    return sum",0.9721,-0.9343305589080002
932,1,"

def solve(lst):
    new_lst = []
    for word in lst:
        if word not in new_lst:
            new_lst.append(word)
    return new_lst",0.8981,-3.652681501825499
932,2,"

def solve(words):
  unique_words = []
  for word in words:
    if word not in unique_words:
      unique_words.append(word)
  return unique_words",0.8584,-5.190542350645
932,3,"

def solve(words):
    unique_words = []
    for word in words:
        if word not in unique_words:
            unique_words.append(word)
    return unique_words",0.9384,-2.1629936655169995
932,4,"

def solve(words):
    unique_words = []
    for word in words:
        if word not in unique_words:
            unique_words.append(word)
    return unique_words",0.9384,-2.1629936655169995
932,5,"

def solve(words):
    unique_words = []
    for word in words:
        if word not in unique_words:
            unique_words.append(word)
    return unique_words",0.9384,-2.1629936655169995
933,1,"

def solve(camel_case):
    snake_case = re.sub('((?<=[a-z])[A-Z]|(?!^)[A-Z](?=[a-z]))', r'_\1', camel_case).lower()
    return snake_case",0.824,-9.677589788557004
933,2,"

def solve(camel_case):
    snake_case = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', camel_case)
    snake_case = re.sub('([a-z0-9])([A-Z])', r'\1_\2', snake_case).lower()
    return snake_case",0.921,-5.515298140809198
933,3,"

def solve(camel_case):
    snake_case = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', camel_case)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', snake_case).lower()",0.9258,-4.705962218626298
933,4,"

def solve(string):
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', string).lower()",0.8216,-6.286218814687501
933,5,"

def solve(camel_case_string):
    snake_case_string = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', camel_case_string)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', snake_case_string).lower()",0.9319,-4.582830752119303
934,1,"
def solve(n):
    if n == 0:
        return 1
    elif n == 1:
        return 3
    else:
        return (2*n+1)*solve(n-1) + (n-1)*solve(n-2)",0.8473,-9.276942196543
934,2,"

def solve(n):
    if n == 0:
        return 1
    if n == 1:
        return 3
    if n == 2:
        return 13
    return (2 * solve(n-1)) + solve(n-2) + solve(n-3)",0.8515,-10.128039582057
934,3,"

def solve(n):
    if n == 0:
        return 1
    elif n == 1:
        return 3
    else:
        return 2 * solve(n-1) + solve(n-2) + 2",0.9069,-4.986543684322
934,4,"
def solve(n):
    if n == 0:
        return 1
    else:
        return (2*n+1)*solve(n-1) + solve(n-2)",0.7679,-10.302132802128
934,5,"

def solve(n):
    if n == 0:
        return 1
    elif n == 1:
        return 3
    else:
        return solve(n-1) + 2*solve(n-2) + solve(n-3)",0.9325,-3.772281419106
935,1,"

def solve(n):
    sum = 0
    for i in range(1,n+1):
        sum += i**2
    return sum",0.9298,-2.3302386191710007
935,2,"

def solve(n):
    sum = 0
    
    for i in range(1,n+1):
        sum += i**2
        
    return sum",0.763,-8.6570579930705
935,3,"

def solve(n):
    sum = 0
    for i in range(1, n+1):
        sum += i*i
    return sum",0.9321,-2.2483867707860004
935,4,"

def solve(n):
    sum = 0
    for i in range(1,n+1):
        sum += i**2
    return sum",0.9298,-2.3302386191710007
935,5,"

def solve(n):
    sum = 0
    for i in range(1,n+1):
        sum += i**2
    return sum",0.9298,-2.3302386191710007
936,1,"

def solve(tuples, ordered_list):
    new_tuples = []
    for item in ordered_list:
        for tup in tuples:
            if tup[0] == item:
                new_tuples.append(tup)
    return new_tuples",0.8937,-5.280015914103002
936,2,"

def solve(tuples, order_list):
    new_tuples = []
    for item in order_list:
        for tup in tuples:
            if tup[0] == item:
                new_tuples.append(tup)
    return new_tuples",0.8587,-7.162463149660001
936,3,"

def solve(tuples, order):
    result = []
    for item in order:
        for tup in tuples:
            if tup[0] == item:
                result.append(tup)
                break
    return result",0.8863,-5.429357468692999
936,4,"

def solve(tuples, order):
    ordered_tuples = []
    for item in order:
        for tup in tuples:
            if item in tup:
                ordered_tuples.append(tup)
                tuples.remove(tup)
                break
    return ordered_tuples",0.8488,-8.359383821864993
936,5,"

def solve(tuples, ordered_list):
    result = []
    for item in ordered_list:
        for t in tuples:
            if t[0] == item:
                result.append(t)
                break
    return result",0.8737,-6.212006606737999
937,1,"

def solve(string):
    char_count = {}
    for char in string:
        char_count[char] = char_count.get(char, 0) + 1
    max_count = 0
    most_common_char = ''
    for char, count in char_count.items():
        if count > max_count:
            max_count = count
            most_common_char = char
    return most_common_char",0.8995,-8.684355736478006
937,2,"

def solve(string):
    count = {}
    for char in string:
        if char in count:
            count[char] += 1
        else:
            count[char] = 1
    max_count = 0
    max_char = ''
    for char in count:
        if count[char] > max_count:
            max_count = count[char]
            max_char = char
    return max_char",0.9263,-6.428275116607001
937,3,"

def solve(string):
    # create a dictionary to store the count of each character
    char_count = {}
    
    # loop through the string and update the count for each character
    for char in string:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    
    # find the character with the highest count
    most_common_char = max(char_count, key=char_count.get)
    
    # return the most common character
    return most_common_char",0.8864,-13.382926456159796
937,4,"

def solve(s):
    count = {}
    for char in s:
        if char in count:
            count[char] += 1
        else:
            count[char] = 1
    max_char = """"
    max_count = 0
    for char, count in count.items():
        if count > max_count:
            max_char = char
            max_count = count
    return max_char",0.8654,-12.147442135212996
937,5,"

def solve(string):
    count = {}
    for char in string:
        if char in count:
            count[char] += 1
        else:
            count[char] = 1
    most_common = max(count, key=count.get)
    return most_common",0.9113,-5.110401686601298
938,1,"

def solve(arr1, arr2, arr3):

    # initialize the result list
    result = []

    # initialize the pointers for each array
    i = 0
    j = 0
    k = 0

    # loop until one of the pointers reaches the end of its respective array
    while i < len(arr1) and j < len(arr2) and k < len(arr3):

        # find the maximum value among the current elements from each array
        max_val = max(arr1[i], arr2[j], arr3[k])

        # append the maximum value to the result list
        result.append(max_val)

        # update the pointers based on which array the maximum value came from
        if max_val == arr1[i]:
            i += 1
        elif max_val == arr2[j]:
            j += 1
        else:
            k += 1

    # return the last three elements from the result list
    return result[-3:]",0.8464,-34.682668282272914
938,2,"

def solve(arr1, arr2, arr3):
    i = 0
    j = 0
    k = 0
    result = []
    min_diff = float('inf')

    while i < len(arr1) and j < len(arr2) and k < len(arr3):
        current_diff = abs(max(arr1[i], arr2[j], arr3[k]) - min(arr1[i], arr2[j], arr3[k]))
        if current_diff < min_diff:
            min_diff = current_diff
            result = [arr1[i], arr2[j], arr3[k]]
        
        min_val = min(arr1[i], arr2[j], arr3[k])
        if arr1[i] == min_val:
            i += 1
        elif arr2[j] == min_val:
            j += 1
        else:
            k += 1
    
    return result",0.9097,-17.88908327197051
938,3,"

def solve(arr1, arr2, arr3):
    i = 0
    j = 0
    k = 0
    min_diff = float('inf')
    result = []
    while i < len(arr1) and j < len(arr2) and k < len(arr3):
        max_num = max(arr1[i], arr2[j], arr3[k])
        min_num = min(arr1[i], arr2[j], arr3[k])
        diff = max_num - min_num
        if diff < min_diff:
            min_diff = diff
            result = [arr1[i], arr2[j], arr3[k]]
        if min_num == arr1[i]:
            i += 1
        elif min_num == arr2[j]:
            j += 1
        else:
            k += 1
    return result",0.9588,-7.491439780732792
938,4,"

def solve(arr1, arr2, arr3):
    result = []
    i = 0
    j = 0
    k = 0
    while i < len(arr1) and j < len(arr2) and k < len(arr3):
        min_val = min(arr1[i], arr2[j], arr3[k])
        max_val = max(arr1[i], arr2[j], arr3[k])
        result.append((min_val, max_val))
        if min_val == arr1[i]:
            i += 1
        elif min_val == arr2[j]:
            j += 1
        else:
            k += 1
    return result",0.942,-8.4868930922409
938,5,"

def solve(arr1, arr2, arr3):
    i = 0
    j = 0
    k = 0
    min_diff = float('inf')
    result = []

    while i < len(arr1) and j < len(arr2) and k < len(arr3):
        max_num = max(arr1[i], arr2[j], arr3[k])
        min_num = min(arr1[i], arr2[j], arr3[k])
        diff = max_num - min_num

        if diff < min_diff:
            min_diff = diff
            result = [arr1[i], arr2[j], arr3[k]]

        if min_num == arr1[i]:
            i += 1
        elif min_num == arr2[j]:
            j += 1
        else:
            k += 1

    return result",0.9565,-7.909204248754801
939,1,"

def solve(list_of_dicts):
    return sorted(list_of_dicts, key=lambda dict: dict['key'])",0.7292,-6.947320610502002
939,2,"

def solve(list_of_dicts, key):
    return sorted(list_of_dicts, key=lambda x: x[key])",0.8815,-2.9022558096949993
939,3,"

def solve(list_of_dicts):
    sorted_list = sorted(list_of_dicts, key=lambda x: x['key'])
    return sorted_list",0.8448,-4.721648725652002
939,4,"

def solve(list_of_dicts):
    list_of_dicts.sort(key = lambda x: x['key'])
    return list_of_dicts",0.8132,-5.376002160093
939,5,"

def solve(list_of_dicts, key):
    return sorted(list_of_dicts, key=lambda x: x[key])",0.8815,-2.9022558096949993
940,1,"

def solve(arr):
    def heapify(arr, n, i):
        largest = i
        l = 2 * i + 1
        r = 2 * i + 2
        if l < n and arr[l] > arr[largest]:
            largest = l
        if r < n and arr[r] > arr[largest]:
            largest = r
        if largest != i:
            arr[i], arr[largest] = arr[largest], arr[i]
            heapify(arr, n, largest)

    def build_heap(arr):
        n = len(arr)
        for i in range(n // 2 - 1, -1, -1):
            heapify(arr, n, i)

    def heap_sort(arr):
        n = len(arr)
        build_heap(arr)
        for i in range(n - 1, 0, -1):
            arr[i], arr[0] = arr[0], arr[i]
            heapify(arr, i, 0)

    heap_sort(arr)
    return arr",0.9408,-13.2919356815208
940,2,"

def solve(arr): 
    n = len(arr) 
  
    # Build a maxheap. 
    for i in range(n, -1, -1): 
        heapify(arr, n, i) 
  
    # One by one extract elements 
    for i in range(n-1, 0, -1): 
        arr[i], arr[0] = arr[0], arr[i] # swap 
        heapify(arr, i, 0) 
  
def heapify(arr, n, i): 
    largest = i # Initialize largest as root 
    l = 2 * i + 1     # left = 2*i + 1 
    r = 2 * i + 2     # right = 2*i + 2 
  
    # See if left child of root exists and is 
    # greater than root 
    if l < n and arr[i] < arr[l]: 
        largest = l 
  
    # See if right child of root exists and is 
    # greater than root 
    if r < n and arr[largest] < arr[r]: 
        largest = r 
  
    # Change root, if needed 
    if largest != i: 
        arr[i],arr[largest] = arr[largest],arr[i] # swap 
  
        # Heapify the root. 
        heapify(arr, n, largest)",0.9665,-9.77473458423971
940,3,"

def solve(arr):
    # Heapify the array
    def heapify(arr, n, i):
        largest = i
        left = 2*i + 1
        right = 2*i + 2
        
        if left < n and arr[left] > arr[largest]:
            largest = left
        
        if right < n and arr[right] > arr[largest]:
            largest = right
        
        if largest != i:
            arr[i], arr[largest] = arr[largest], arr[i]
            heapify(arr, n, largest)
    
    n = len(arr)
    
    for i in range(n//2, -1, -1):
        heapify(arr, n, i)
    
    # Sort the array
    for i in range(n-1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)
    
    return arr",0.8916,-22.945999829589592
940,4,"

def solve(arr):
    n = len(arr)

    # Build max heap
    for i in range(n//2 - 1, -1, -1):
        heapify(arr, n, i)

    # Heap sort
    for i in range(n-1, 0, -1):
        # Swap root and last element
        arr[i], arr[0] = arr[0], arr[i]
        # Heapify root element
        heapify(arr, i, 0)

    return arr

def heapify(arr, n, i):
    largest = i
    l = 2*i + 1
    r = 2*i + 2

    # Check if left child exists and is greater than root
    if l < n and arr[l] > arr[largest]:
        largest = l
    # Check if right child exists and is greater than root
    if r < n and arr[r] > arr[largest]:
        largest = r

    # Swap root and largest child if necessary
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]
        # Recursively heapify the affected subtree
        heapify(arr, n, largest)",0.906,-25.45751641659121
940,5,"

def solve(arr):
    def heapify(arr, n, i):
        largest = i 
        l = 2 * i + 1 
        r = 2 * i + 2 
        if l < n and arr[i] < arr[l]:
            largest = l
        if r < n and arr[largest] < arr[r]:
            largest = r
        if largest != i:
            arr[i], arr[largest] = arr[largest], arr[i]
            heapify(arr, n, largest)

    n = len(arr)
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)
    for i in range(n-1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]
        heapify(arr, i, 0)
    return arr",0.9283,-13.990631535671998
941,1,"

def solve(lst):
    count = 0
    for element in lst:
        if isinstance(element, tuple):
            return count
        else:
            count += 1
    return count",0.9072,-3.8961748942290018
941,2,"

def solve(lst):
    count = 0
    for element in lst:
        if type(element) == tuple:
            break
        count += 1
    return count",0.9148,-3.2943407864575005
941,3,"

def solve(lst):
    count = 0
    for element in lst:
        if isinstance(element, tuple):
            return count
        count += 1
    return count",0.9033,-3.763945593580501
941,4,"

def solve(lst):
    count = 0
    for element in lst:
        if type(element) == tuple:
            break
        count += 1
    return count",0.9148,-3.2943407864575005
941,5,"

def solve(lst):
    count = 0
    for item in lst:
        if isinstance(item, tuple):
            break
        count += 1
    return count",0.8889,-4.240187658819799
942,1,"

def solve(given_list, search_list):
    for element in search_list:
        if element in given_list:
            return True
    return False",0.8212,-6.1059472807769986
942,2,"

def solve(list1, list2):
    for element in list1:
        if element in list2:
            return True
    return False",0.9478,-1.608439946043
942,3,"

def solve(lst1, lst2):
    for elem in lst1:
        if elem in lst2:
            return True
    return False",0.9094,-2.8482988711199995
942,4,"

def solve(list1, list2):
    for element in list1:
        if element in list2:
            return True
    return False",0.9478,-1.608439946043
942,5,"

def solve(list1, list2):
    for elem in list1:
        if elem in list2:
            return True
    return False",0.9038,-3.033793407266
943,1,"

import heapq
def solve(list1, list2):
    result = []
    heapq.heapify(list1)
    heapq.heapify(list2)
    while list1 and list2:
        if list1[0] < list2[0]:
            result.append(heapq.heappop(list1))
        else:
            result.append(heapq.heappop(list2))
    result.extend(list1)
    result.extend(list2)
    return result",0.9207,-7.515776425042699
943,2,"

def solve(list1, list2):
    import heapq

    # combine both lists
    combined_list = list1 + list2
    
    # use heapq module to heapify the combined list
    heapq.heapify(combined_list)
    
    # create an empty list to store the sorted elements
    sorted_list = []
    
    # loop until the combined list is empty
    while combined_list:
        
        # remove the smallest element from the heap and append it to the sorted list
        smallest = heapq.heappop(combined_list)
        sorted_list.append(smallest)
    
    # return the sorted list
    return sorted_list",0.7989,-29.406061529062185
943,3,"

from heapq import merge

def solve(list1, list2):
    return list(merge(list1, list2))
    
#Example:
# solve([1,3,5,7], [2,4,6,8])  ==> [1,2,3,4,5,6,7,8]",0.7003,-24.227791219938105
943,4,"

import heapq

def solve(list1, list2):
    heap = []
    for num in list1:
        heapq.heappush(heap, num)
    for num in list2:
        heapq.heappush(heap, num)
    combined_list = []
    while heap:
        combined_list.append(heapq.heappop(heap))
    return combined_list",0.9214,-5.893128923608998
943,5,"

import heapq

def solve(list1, list2):
    heap = heapq.merge(list1, list2)
    return list(heap)",0.834,-5.080937427267
944,1,"

def solve(string):
    numbers = []
    positions = []
    for i in range(len(string)):
        if string[i].isdigit():
            numbers.append(string[i])
            positions.append(i)
    print(""Numbers:"", numbers)
    print(""Positions:"", positions)",0.941,-3.2213471893552996
944,2,"

def solve(string):
    numbers = []
    positions = []
    for i in range(len(string)):
        if string[i].isdigit():
            numbers.append(string[i])
            positions.append(i)
    print(""Numbers:"", numbers)
    print(""Positions:"", positions)",0.941,-3.2213471893552996
944,3,"

def solve(string):
    numbers = []
    positions = []
    for index, char in enumerate(string):
        if char.isdigit():
            numbers.append(char)
            positions.append(index)
    print(""Numbers:"", numbers)
    print(""Positions:"", positions)",0.9103,-4.790703388247501
944,4,"

def solve(string):
    numbers = []
    positions = []

    for i, char in enumerate(string):
        if char.isdigit():
            numbers.append(char)
            positions.append(i+1)

    print(""Numbers: "", numbers)
    print(""Positions: "", positions)",0.8401,-9.581124193409298
944,5,"

def solve(string):
    numbers = []
    positions = []
    for i, char in enumerate(string):
        if char.isdigit():
            numbers.append(char)
            positions.append(i)
    print(""Numbers:"", numbers)
    print(""Positions:"", positions)",0.9141,-4.579902442876501
945,1,"

def solve(tuples):
    result = set()
    for t in tuples:
        result.add(t)
    return result",0.7922,-5.824284448696
945,2,"

def solve(tuples):
    return set(tuples)",0.9571,-0.5258204761
945,3,"

def solve(tuples):
    return set(tuples)",0.9571,-0.5258204761
945,4,"
def solve(tuples):
    return set(tuples)",0.768,-3.1679328810799996
945,5,"

def solve(tuples):
    return set(tuples)",0.9571,-0.5258204761
946,1,"

def solve(text):
    counts = {}
    for char in text:
        if char in counts:
            counts[char] += 1
        else:
            counts[char] = 1
    
    most_common = []
    max_count = 0
    for char, count in counts.items():
        if count > max_count:
            most_common = [char]
            max_count = count
        elif count == max_count:
            most_common.append(char)
    
    return most_common, max_count",0.94,-6.315634447612601
946,2,"

def solve(text):
    counts = {}
    for word in text.split():
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1
    most_common = []
    for key, value in counts.items():
        if value == max(counts.values()):
            most_common.append((key, value))
    return most_common",0.8904,-8.941009707983996
946,3,"

def solve(text):
    # convert text to lowercase
    text = text.lower()
    
    # create a dictionary to store the counts of each element
    counts = {}
    
    # loop through each character in the text
    for char in text:
        # check if the character is a letter
        if char.isalpha():
            # check if the character is already in the dictionary
            if char in counts:
                # increment the count of the character by 1
                counts[char] += 1
            else:
                # add the character to the dictionary with a count of 1
                counts[char] = 1
    
    # find the maximum count
    max_count = max(counts.values())
    
    # create a list to store the most common elements
    most_common = []
    
    # loop through the dictionary to find the elements with the maximum count
    for key, value in counts.items():
        # check if the current value is equal to the maximum count
        if value == max_count:
            # add the key to the list of most common elements
            most_common.append(key)
    
    # sort the list in alphabetical order
    most_common.sort()
    
    # return the list of most common elements and their counts
    return most_common, max_count",0.8815,-33.790051286671016
946,4,"

def solve(text):
    
    # create a dictionary to store the counts of each element
    counts = {}
    
    # iterate through each character in the text
    for char in text:
        
        # if the character is already in the dictionary, increase its count by 1
        if char in counts:
            counts[char] += 1
            
        # if the character is not in the dictionary, add it with a count of 1
        else:
            counts[char] = 1
            
    # find the maximum count in the dictionary
    max_count = max(counts.values())
    
    # create a list to store the most common elements
    most_common = []
    
    # iterate through the dictionary
    for key, value in counts.items():
        
        # if the count of the element is equal to the maximum count, add it to the most_common list
        if value == max_count:
            most_common.append(key)
    
    # sort the most_common list in alphabetical order
    most_common.sort()
    
    # print the most common elements and their counts
    print(""Most common elements and their counts:"")
    for element in most_common:
        print(element, "":"", max_count)
        
    # return the most_common list for further use, if needed
    return most_common",0.8575,-41.36047796324101
946,5,"

def solve(text):
    counts = {}
    for char in text:
        if char in counts:
            counts[char] += 1
        else:
            counts[char] = 1
    
    max_count = max(counts.values())
    common_elements = [key for key, value in counts.items() if value == max_count]
    
    return common_elements, max_count",0.9078,-7.449844962362
947,1,"

def solve(words):
    shortest = len(words[0])
    for word in words:
        if len(word) < shortest:
            shortest = len(word)
    return shortest",0.9659,-1.2474917896336004
947,2,"

def solve(words):
    shortest_word = min(words, key=len)
    return len(shortest_word)",0.8552,-3.442418309476301
947,3,"

def solve(words):
    shortest = len(words[0])
    for word in words:
        if len(word) < shortest:
            shortest = len(word)
    return shortest",0.9659,-1.2474917896336004
947,4,"

def solve(words):
    shortest = len(words[0])
    for word in words:
        if len(word) < shortest:
            shortest = len(word)
    return shortest",0.9659,-1.2474917896336004
947,5,"

def solve(words):
    shortest = len(words[0])
    for word in words:
        if len(word) < shortest:
            shortest = len(word)
    return shortest",0.9659,-1.2474917896336004
948,1,"

def solve(tup, index):
    return tup[index]",0.9331,-0.90007482769
948,2,"

def solve(tup, n):
    return tup[n]",0.6757,-5.095948770490001
948,3,"

def solve(tup, index):
    return tup[index]",0.9331,-0.90007482769
948,4,"

def solve(tuple, index):
    return tuple[index]",0.8707,-1.6614998864
948,5,"

def solve(tuple, index):
    return tuple[index]",0.8707,-1.6614998864
949,1,"

def solve(tuple_list):
    return sorted(tuple_list, key=lambda x: sum([len(str(i)) for i in x]))",0.8857,-3.27678004344
949,2,"

def solve(tuple_list):
    sorted_list = sorted(tuple_list, key=lambda x: sum([len(str(num)) for num in x]))
    return sorted_list",0.8534,-5.23317826849
949,3,"

def solve(tup_list):
    tup_list.sort(key=lambda x: sum(map(lambda y: len(str(y)), x)), reverse=True)
    return tup_list",0.8061,-7.113451364712999
949,4,"

def solve(tuple_list):
    return sorted(tuple_list, key=lambda x: sum(len(str(i)) for i in x))",0.8719,-3.5642235586600006
949,5,"

def solve(tuple_list):
    sorted_tuple_list = sorted(tuple_list, key=lambda x: sum([len(str(num)) for num in x]))
    return sorted_tuple_list",0.8293,-6.549502656373
950,1,"

def solve(year):
    zodiac = [""Monkey"", ""Rooster"", ""Dog"", ""Pig"", ""Rat"", ""Ox"", ""Tiger"", ""Rabbit"", ""Dragon"", ""Snake"", ""Horse"", ""Goat""]
    return zodiac[(year-1900) % 12]",0.8972,-7.264942644555501
950,2,"

def solve(year):
    zodiac_signs = [""Monkey"", ""Rooster"", ""Dog"", ""Pig"", ""Rat"", ""Ox"", ""Tiger"", ""Rabbit"", ""Dragon"", ""Snake"", ""Horse"", ""Sheep""]
    return zodiac_signs[year % 12] ",0.8843,-8.363643997616602
950,3,"

def solve(year):
    zodiac_signs = ['Monkey', 'Rooster', 'Dog', 'Pig', 'Rat', 'Ox', 'Tiger', 'Rabbit', 'Dragon', 'Snake', 'Horse', 'Sheep']
    return zodiac_signs[year % 12]",0.9343,-4.5540495945991015
950,4,"

def solve(year):
    zodiac_signs = [""monkey"", ""rooster"", ""dog"", ""pig"", ""rat"", ""ox"", ""tiger"", ""rabbit"", ""dragon"", ""snake"", ""horse"", ""sheep""]
    return zodiac_signs[year % 12]",0.8873,-7.4108520591471
950,5,"

def solve(year):
    zodiac_signs = {0: ""Monkey"", 1: ""Rooster"", 2: ""Dog"", 3: ""Pig"", 4: ""Rat"", 5: ""Ox"", 6: ""Tiger"", 7: ""Rabbit"", 8: ""Dragon"", 9: ""Snake"", 10: ""Horse"", 11: ""Goat""}
    return zodiac_signs[year % 12]",0.9368,-6.7211321034378
951,1,"

def solve(list1, list2):
    max_count = 0
    for tup1 in list1:
        for tup2 in list2:
            count = 0
            for i in range(len(tup1)):
                if tup1[i] == tup2[i]:
                    count += 1
            if count > max_count:
                max_count = count
    return max_count",0.9339,-5.603976878838302
951,2,"

def solve(list1, list2):
    max_similar_index = 0
    for tuple1 in list1:
        for tuple2 in list2:
            if tuple1[0] == tuple2[0] and tuple1[1] == tuple2[1]:
                max_similar_index = max(max_similar_index, tuple1[1])
    return max_similar_index",0.904,-8.274072407599299
951,3,"

def solve(list1, list2):
    max_index = 0
    for tuple1 in list1:
        for tuple2 in list2:
            if tuple1[0] == tuple2[0]:
                max_index = max(max_index, tuple1[1], tuple2[1])
                break
    return max_index",0.8994,-7.423406559626302
951,4,"

def solve(list1, list2):
    max_idx = 0
    for t1 in list1:
        for t2 in list2:
            if t1[0] == t2[0]:
                max_idx = max(max_idx, t1[1], t2[1])
    return max_idx",0.8934,-7.553742591358398
951,5,"

def solve(list1, list2):
    max_similar = 0
    for tuple1 in list1:
        for tuple2 in list2:
            if tuple1[0] == tuple2[0] and tuple1[1] == tuple2[1]:
                if tuple1[0] + tuple1[1] > max_similar:
                    max_similar = tuple1[0] + tuple1[1]
    return max_similar",0.9137,-8.751756538193703
952,1,"

def solve(n, r, p): 
    if r > n: 
        return 0
    if r == 0 or r == n: 
        return 1
    num = 1
    den = 1
    for i in range(r): 
        num = (num * (n - i)) % p 
        den = (den * (i + 1)) % p 
    return (num * pow(den, p - 2, p)) % p",0.9266,-8.079642775587002
952,2,"

def solve(n, r, p):
    if r > n:
        return 0
    if r == 0 or r == n:
        return 1
    num = 1
    den = 1
    for i in range(r):
        num = (num * (n - i)) % p
        den = (den * (i + 1)) % p
    return (num * pow(den, p - 2, p)) % p",0.9304,-7.3528803737409
952,3,"

def solve(n, r, p):
    if n < r:
        return 0
    if r == 0 or n == r:
        return 1
    num = 1
    den = 1
    for i in range(1, r+1):
        num = (num * (n-i+1)) % p
        den = (den * i) % p
    return (num * pow(den, p-2, p)) % p",0.9137,-9.291595313214804
952,4,"

def solve(n, r, p):
    if r > n:
        return 0
    if r > n - r:
        r = n - r
    c = 1
    for i in range(r):
        c = c * (n - i) // (i + 1)
    return c % p",0.8905,-8.114184002797
952,5,"

def solve(n, r, p): 
    #initialize variables 
    fact_n = 1 
    fact_r = 1 
    fact_nr = 1 
    
    #calculate factorial of n 
    for i in range(1, n+1): 
        fact_n = (fact_n * i) % p 
        
    #calculate factorial of r 
    for i in range(1, r+1): 
        fact_r = (fact_r * i) % p 
        
    #calculate factorial of n-r 
    for i in range(1, n-r+1): 
        fact_nr = (fact_nr * i) % p 
        
    #calculate ncr mod p 
    ncr = (fact_n * pow(fact_r, p-2, p) * pow(fact_nr, p-2, p)) % p 
    
    return ncr",0.8859,-22.17616397340801
953,1,"

def solve(nums):
    subsets = set()
    for num in nums:
        subsets.add(num)
    return len(subsets)",0.8737,-3.644797701427
953,2,"

def solve(nums):
    subsets = set()
    for num in nums:
        subsets.add(num)
    return len(subsets)",0.8737,-3.644797701427
953,3,"

def solve(list1):
    subsets = set()
    for i in list1:
        subsets.add(i)

    return len(subsets)

# Example usage:
# solve([1, 2, 3, 1, 2, 4]) -> 4",0.5829,-30.223773942905
953,4,"

def solve(input_list):
    subset_list = []
    for num in input_list:
        if num not in subset_list:
            subset_list.append(num)
    return len(subset_list)",0.7907,-9.159272233832002
953,5,"

def solve(nums):
    return len(set(nums))",0.579,-6.010038848200002
954,1,"
def solve(amount):
    if amount > 0:
        profit = amount * 0.2
        return profit
    else:
        return None",0.8261,-6.113415379675
954,2,"

def solve(amount, cost, price):
    if price > cost:
        return price - cost
    else:
        return None",0.8203,-5.349160620882999
954,3,"

def solve(amount):
    if amount > 0:
        profit = round(amount * 0.1, 2)
        return profit
    else:
        return None",0.8382,-6.354494164776
954,4,"

def solve(amount):
    if amount > 0:
        profit = amount * 0.2
        return profit
    else:
        return None",0.8788,-4.133437413667001
954,5,"

def solve(amount):
    profit = amount - 100
    if profit > 0:
        return profit
    else:
        return None",0.8642,-4.3786392441199995
955,1,"

def solve(num):
    divisors = [1]
    for i in range(2, int(num/2) + 1):
        if num % i == 0:
            divisors.append(i)
    
    if sum(divisors) > num:
        return True
    else:
        return False",0.8635,-9.394731688073096
955,2,"

def solve(n):
    sum_divisors = 0
    for i in range(1, n):
        if n % i == 0:
            sum_divisors += i
    if sum_divisors > n:
        return True
    else:
        return False",0.9388,-3.601915565539501
955,3,"

def solve(n):
    sum = 0
    for i in range(1, n):
        if n % i == 0:
            sum += i
    if sum > n:
        return True
    else:
        return False",0.9391,-3.2027523986930007
955,4,"

def solve(num):
    sum = 0
    for i in range(1, num):
        if num % i == 0:
            sum += i
    if sum > num:
        return True
    else:
        return False",0.9469,-2.7849517586250014
955,5,"

def solve(num):
    sum_divisors = 0
    for i in range(1, num):
        if num % i == 0:
            sum_divisors += i
    if sum_divisors > num:
        return True
    else:
        return False",0.9444,-3.262307380355
956,1,"

import re

def solve(string):
    return re.findall('[A-Z][^A-Z]*', string)",0.9074,-2.235187472963
956,2,"

import re

def solve(string):
    return re.findall('[A-Z][a-z]*',string)",0.7268,-7.0212111787903
956,3,"

import re

def solve(string):
    split_string = re.findall('[A-Z][^A-Z]*', string)
    return split_string",0.8854,-3.5303059023184997
956,4,"

import re

def solve(string):
    return re.findall('[A-Z][^A-Z]*', string)",0.9074,-2.235187472963
956,5,"

import re

def solve(string):
    return re.findall('[A-Z][^A-Z]*', string)",0.9074,-2.235187472963
957,1,"

def solve(n):
    return n & -n",0.7646,-2.9529649249300003
957,2,"

def solve(n):
    if n == 0:
        return 0
    else:
        return int(math.log2(n & -n) + 1)",0.838,-6.186406505825
957,3,"

def solve(n):
    return (n & -n).bit_length()",0.8388,-2.8125033468839997
957,4,"

def solve(n):
    pos = 0
    while n > 0:
        if n & 1 == 1:
            return pos
        n = n >> 1
        pos += 1
    return -1",0.8782,-6.496414735148999
957,5,"

def solve(n):
    if n == 0:
        return 0
    position = 1
    while (n & 1) == 0:
        n = n >> 1
        position += 1
    return position",0.8864,-6.2708397433759995
958,1,"

def solve(num):
    roman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}
    result = ''
    for value, symbol in roman_numerals.items():
        while num >= value:
            result += symbol
            num -= value
    return result",0.9559,-5.542373575000699
958,2,"

def solve(num):
    roman = """"
    values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    symbols = [""M"", ""CM"", ""D"", ""CD"", ""C"", ""XC"", ""L"", ""XL"", ""X"", ""IX"", ""V"", ""IV"", ""I""]
    for i in range(len(values)):
        while num >= values[i]:
            roman += symbols[i]
            num -= values[i]
    return roman",0.9414,-7.487430718653999
958,3,"

def solve(num):
    roman = """"
    while num >= 1000:
        roman += ""M""
        num -= 1000
    if num >= 900:
        roman += ""CM""
        num -= 900
    if num >= 500:
        roman += ""D""
        num -= 500
    if num >= 400:
        roman += ""CD""
        num -= 400
    while num >= 100:
        roman += ""C""
        num -= 100
    if num >= 90:
        roman += ""XC""
        num -= 90
    if num >= 50:
        roman += ""L""
        num -= 50
    if num >= 40:
        roman += ""XL""
        num -= 40
    while num >= 10:
        roman += ""X""
        num -= 10
    if num >= 9:
        roman += ""IX""
        num -= 9
    if num >= 5:
        roman += ""V""
        num -= 5
    if num >= 4:
        roman += ""IV""
        num -= 4
    while num > 0:
        roman += ""I""
        num -= 1
    return roman",0.9713,-7.596062603668001
958,4,"

def solve(num):
    roman_numerals = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}
    roman_num = ''
    for key, value in roman_numerals.items():
        while num >= key:
            roman_num += value
            num -= key
    return roman_num",0.9446,-7.178410278639601
958,5,"

def solve(num):
    roman_num = """"
    roman_dict = {1000: ""M"", 900: ""CM"", 500: ""D"", 400: ""CD"", 100: ""C"", 90: ""XC"", 50: ""L"", 40: ""XL"", 10: ""X"", 9: ""IX"", 5: ""V"", 4: ""IV"", 1: ""I""}
    for key in roman_dict:
        while num >= key:
            roman_num += roman_dict[key]
            num -= key
    return roman_num",0.9341,-8.382485472100502
959,1,"

def solve(lst):
    return sum(lst)/len(lst)",0.8424,-2.2297563947935
959,2,"

def solve(lst):
    return sum(lst)/len(lst)",0.8424,-2.2297563947935
959,3,"

def solve(lst):
    if not lst:
        return 0
    return sum(lst) / len(lst)",0.7663,-6.387820680872
959,4,"

def solve(lst):
    total = 0
    for num in lst:
        total += num
    return total / len(lst)",0.8863,-3.4998915308249994
959,5,"

def solve(lst):
    sum = 0
    for num in lst:
        sum += num
    return sum / len(lst)",0.892,-3.3148112915533003
960,1,"

def solve(width, length, tile_width, tile_length):
    num_tiles_width = width // tile_width
    num_tiles_length = length // tile_length
    total_tiles = num_tiles_width * num_tiles_length
    return total_tiles",0.8735,-6.627988489344
960,2,"

def solve(width, height, tile_size):
    return (width // tile_size) * (height // tile_size)",0.7549,-7.029286411737
960,3,"

def solve(width, height, tile_width, tile_height):
    if width % tile_width == 0 and height % tile_height == 0:
        return (width // tile_width) * (height // tile_height)
    elif width % tile_height == 0 and height % tile_width == 0:
        return (width // tile_height) * (height // tile_width)
    else:
        return ""Cannot tile with given dimensions.""",0.8958,-10.014021498589004
960,4,"

def solve(n):
    if n == 0 or n == 1:
        return n
    else:
        return solve(n-1) + solve(n-2)",0.8509,-5.973028824336001
960,5,"
def solve(length, width):
    if length == 0 or width == 0:
        return 0
    elif length == 1:
        return width
    elif width == 1:
        return length
    else:
        return solve(length-1, width) + solve(length, width-1)",0.8754,-8.783622700284997
961,1,"

def solve(roman_numeral):
    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    result = 0
    for i in range(len(roman_numeral)):
        if i > 0 and roman_dict[roman_numeral[i]] > roman_dict[roman_numeral[i-1]]:
            result += roman_dict[roman_numeral[i]] - 2 * roman_dict[roman_numeral[i-1]]
        else:
            result += roman_dict[roman_numeral[i]]
    return result",0.9639,-5.141661959209494
961,2,"

def solve(roman):
    values = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    result = 0
    for i in range(len(roman)):
        if i > 0 and values[roman[i]] > values[roman[i-1]]:
            result += values[roman[i]] - 2 * values[roman[i-1]]
        else:
            result += values[roman[i]]
    return result",0.9616,-4.6990295764652
961,3,"

def solve(roman):
    values = {'M': 1000, 'D': 500, 'C': 100, 'L': 50, 'X': 10, 'V': 5, 'I': 1}
    result = 0
    for i in range(len(roman)):
        if i > 0 and values[roman[i]] > values[roman[i-1]]:
            result += values[roman[i]] - 2*values[roman[i-1]]
        else:
            result += values[roman[i]]
    return result",0.9452,-6.761241806008701
961,4,"

def solve(roman):
    roman_numeral_dict = {'M': 1000, 'CM': 900, 'D': 500, 'CD': 400, 'C': 100, 'XC': 90, 'L': 50, 'XL': 40, 'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1}
    integer = 0
    for i in range(len(roman)):
        if i > 0 and roman_numeral_dict[roman[i]] > roman_numeral_dict[roman[i-1]]:
            integer += roman_numeral_dict[roman[i]] - 2 * roman_numeral_dict[roman[i-1]]
        else:
            integer += roman_numeral_dict[roman[i]]
    return integer",0.9212,-14.275597045241202
961,5,"

def solve(roman):
    values = {'M': 1000, 'D': 500, 'C': 100, 'L': 50, 'X': 10, 'V': 5, 'I': 1}
    result = 0
    for i in range(len(roman)):
        if i > 0 and values[roman[i]] > values[roman[i - 1]]:
            result += values[roman[i]] - 2 * values[roman[i - 1]]
        else:
            result += values[roman[i]]
    return result",0.9501,-6.250961741036001
962,1,"

def solve(l, r):
    sum = 0
    for i in range(l, r+1):
        if i % 2 == 0:
            sum += i
    return sum ",0.8886,-5.0778245989013
962,2,"

def solve(l, r):
    sum = 0
    for i in range(l, r+1):
        if i%2 == 0:
            sum += i
    return sum",0.9398,-2.5473821232310003
962,3,"

def solve(l, r):
    sum = 0
    for i in range(l, r+1):
        if i % 2 == 0:
            sum += i
    return sum",0.9661,-1.4499865989013
962,4,"

def solve(l,r):
    sum = 0
    for i in range(l,r+1):
        if i%2 == 0:
            sum += i
    return sum",0.9357,-2.5905535862894005
962,5,"

def solve(l, r):
    sum = 0
    for i in range(l, r+1):
        if i%2 == 0:
            sum += i
    return sum",0.9398,-2.5473821232310003
963,1,"

def solve(a, b, c):
    discriminant = b**2 - 4*a*c
    return discriminant",0.9163,-2.271952452212
963,2,"

def solve(a,b,c):
    discriminant = (b**2) - (4*a*c)
    return discriminant",0.9011,-2.7089642521770005
963,3,"

def solve(a, b, c):
    discriminant = (b**2) - (4*a*c)
    return discriminant",0.9503,-1.4267673795370004
963,4,"

def solve(a, b, c):
    return (b**2) - (4*a*c)",0.881,-2.787125971668
963,5,"

def solve(a,b,c):
    discriminant = b**2 - 4*a*c
    return discriminant",0.8542,-3.782133164686
964,1,"

def solve(word):
    if len(word) % 2 == 0:
        return True
    else:
        return False",0.9764,-0.645793314484
964,2,"

def solve(word):
    if len(word) % 2 == 0:
        return True
    else:
        return False",0.9764,-0.645793314484
964,3,"

def solve(word):
    return len(word) % 2 == 0",0.8465,-2.6665505136900003
964,4,"

def solve(word):
    if len(word) % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.9037,-3.037889647524
964,5,"

def solve(word):
    if len(word) % 2 == 0:
        return ""Even""
    else:
        return ""Odd""",0.9037,-3.037889647524
965,1,"

def solve(camel_case_string):
    snake_case_string = """"
    for i in range(len(camel_case_string)):
        if camel_case_string[i].isupper():
            snake_case_string += ""_"" + camel_case_string[i].lower()
        else:
            snake_case_string += camel_case_string[i]
    return snake_case_string.strip(""_"")",0.9205,-5.801118493981497
965,2,"

def solve(camel_str):
    snake_str = """"
    for i in range(len(camel_str)):
        if camel_str[i].isupper() and i != 0:
            snake_str += ""_"" + camel_str[i].lower()
        else:
            snake_str += camel_str[i].lower()
    return snake_str",0.9208,-5.443739941707402
965,3,"

def solve(s):
    result = ''
    for i in range(len(s)):
        if s[i].isupper():
            result += '_' + s[i].lower()
        else:
            result += s[i]
    return result.lstrip('_')",0.8707,-7.060232719833999
965,4,"

def solve(s):
    snake_case = ''
    for i in range(len(s)):
        if s[i].isupper():
            if i == 0:
                snake_case += s[i].lower()
            else:
                snake_case += '_' + s[i].lower()
        else:
            snake_case += s[i]
    return snake_case",0.904,-7.067099903720002
965,5,"

def solve(camel_str):
    snake_str = ''
    for char in camel_str:
        if char.isupper():
            snake_str += '_' + char.lower()
        else:
            snake_str += char
    return snake_str.lstrip('_')",0.9059,-5.0394620007075
966,1,"

def solve(list_of_tuples):
    return [tup for tup in list_of_tuples if tup != ()]",0.8531,-3.655073119229
966,2,"

def solve(lst):
    return [t for t in lst if t != ()]",0.8173,-3.631077819162
966,3,"

def solve(lst):
    return [tup for tup in lst if tup != ()]",0.8843,-2.336689163344
966,4,"

def solve(tuples):
    return [t for t in tuples if t != ()]",0.8348,-3.430682151312
966,5,"

def solve(lst):
    return [tup for tup in lst if tup != ()]",0.8843,-2.336689163344
967,1,"

def solve(string):
    vowels = {'a', 'e', 'i', 'o', 'u'}
    for char in string.lower():
        if char not in vowels:
            return False
    return True",0.8728,-5.986556834838501
967,2,"

def solve(string):
    vowels = ['a', 'e', 'i', 'o', 'u']
    for vowel in vowels:
        if vowel not in string.lower():
            return False
    return True",0.9595,-1.8194849554566008
967,3,"

def solve(string):
    vowels = set('aeiou')
    return set(string.lower()) >= vowels",0.7742,-5.374692180589999
967,4,"

def solve(string):
    vowels = ['a', 'e', 'i', 'o', 'u']
    for vowel in vowels:
        if vowel not in string.lower():
            return False
    return True",0.9595,-1.8194849554566008
967,5,"

def solve(string):
    vowels = ['a', 'e', 'i', 'o', 'u']
    for vowel in vowels:
        if vowel not in string.lower():
            return False
    return True",0.9595,-1.8194849554566008
968,1,"

def solve(period, coeff, power):
    max_value = -float('inf')
    for x in range(period):
        value = coeff * (x ** power)
        if value > max_value:
            max_value = value
    return max_value",0.7728,-13.404135743636004
968,2,"

def solve(period, amplitude):
    max_value = amplitude
    for i in range(period):
        x = i * (2 * amplitude) / period
        if x > amplitude:
            x = (2 * amplitude) - x
        if x > max_value:
            max_value = x
    return max_value",0.7863,-16.106050983032
968,3,"

def solve(period):
    x = 0
    max_val = 0
    while x < period:
        curr_val = abs(period - x)
        if curr_val > max_val:
            max_val = curr_val
        x += 0.01
    return max_val",0.7129,-20.303440342717003
968,4,"

def solve(a, b):
    if a == b:
        return a
    else:
        return max(a, b)",0.7351,-8.30939492965
968,5,"

def solve(A, B, C, D):
    x = (B - A) / 2
    y = (D - C) / 2
    return abs(A + C + x - y)",0.6176,-22.171055604287
969,1,"

def solve(tuples):
    result = []
    for i in range(len(tuples)):
        for j in range(i+1, len(tuples)):
            if tuples[i][0] == tuples[j][0]:
                result.append(tuples[i] + tuples[j])
    return result",0.8931,-6.667306221791999
969,2,"

def solve(tuples):
    result = []
    for i in range(len(tuples)):
        temp = [tuples[i][0]]
        for j in range(i+1, len(tuples)):
            if tuples[i][0] == tuples[j][0]:
                temp.append(tuples[j][1])
        if len(temp) > 1:
            result.append(tuple(temp))
    return result",0.9244,-6.450000964984296
969,3,"

def solve(tuples):
    result = []
    for i in range(len(tuples)):
        if i + 1 < len(tuples):
            if tuples[i][0] == tuples[i+1][0]:
                result.append(tuples[i] + tuples[i+1])
            else:
                result.append(tuples[i])
        else:
            result.append(tuples[i])
    return result",0.8876,-9.658333756355995
969,4,"

def solve(tuples):
    result = []
    for i in range(len(tuples)):
        if i == len(tuples)-1:
            result.append(tuples[i])
            break
        if tuples[i][0] == tuples[i+1][0]:
            result.append((tuples[i][0], tuples[i][1] + tuples[i+1][1]))
        else:
            result.append(tuples[i])
    return result",0.9127,-8.224465701268697
969,5,"
def solve(tuples):
    result = []
    for i in tuples:
        if len(result) == 0:
            result.append(i)
        else:
            if i[0] == result[-1][0]:
                result[-1] = result[-1] + i[1:]
            else:
                result.append(i)
    return result",0.8188,-14.3982497088592
970,1,"

def solve(num1,num2):
    if num1 < num2:
        return num1
    else:
        return num2",0.8292,-5.2427185965167
970,2,"

def solve(a, b):
    if a < b:
        return a
    else:
        return b",0.9253,-1.7860868083569996
970,3,"

def solve(num1, num2):
    if num1 < num2:
        return num1
    else:
        return num2",0.9502,-1.480429225323
970,4,"

def solve(x, y):
    if x < y:
        return x
    else:
        return y",0.8975,-2.4869275952809997
970,5,"

def solve(num1, num2):
    if num1 < num2:
        return num1
    else:
        return num2",0.9502,-1.480429225323
971,1,"

def solve(n, a, b, c):
    # sort the lengths in ascending order
    lengths = sorted([a, b, c])
    
    # initialize a counter for the maximum number of segments
    max_segments = 0
    
    # loop through all possible combinations of segments
    for i in range(n//lengths[2] + 1):
        for j in range((n-i*lengths[2])//lengths[1] + 1):
            # calculate the remaining length after using segments of lengths a and b
            remaining_length = n - i*lengths[2] - j*lengths[1]
            # check if the remaining length can be divided evenly by the smallest length c
            if remaining_length % lengths[0] == 0:
                # if so, update the maximum number of segments
                max_segments = max(max_segments, i+j+remaining_length//lengths[0])
    
    # return the maximum number of segments
    return max_segments",0.8615,-31.615362658599995
971,2,"

def solve(n, a, b, c):
    # Sort the lengths in ascending order
    lengths = [a, b, c]
    lengths.sort()
    
    # Initialize the maximum number of segments to 0
    max_segments = 0
    
    # Iterate through all possible combinations of lengths
    for i in range(n//lengths[0] + 1):
        for j in range((n-i*lengths[0])//lengths[1] + 1):
            # Calculate the remaining length
            remaining_length = n - i*lengths[0] - j*lengths[1]
            
            # Check if the remaining length is divisible by the longest length
            if remaining_length % lengths[2] == 0:
                # Calculate the total number of segments
                total_segments = i + j + remaining_length // lengths[2]
                
                # Update the maximum number of segments if necessary
                if total_segments > max_segments:
                    max_segments = total_segments
    
    # Return the maximum number of segments
    return max_segments",0.888,-26.616250920613783
971,3,"

def solve(n, a, b, c):
    # sort the lengths in descending order
    lengths = sorted([a, b, c], reverse=True)
    # initialize a counter for the number of segments
    count = 0
    # loop through each length
    for length in lengths:
        # check if the length is larger than the remaining length
        if length > n:
            continue
        # if the length is smaller than the remaining length,
        # increment the counter by 1
        count += 1
        # update the remaining length by subtracting the current length
        n -= length
    # return the maximum number of segments that can be formed
    return count",0.7694,-38.54268732955131
971,4,"

def solve(n, a, b, c):
    # sort the lengths in descending order
    lengths = sorted([a, b, c], reverse=True)
    # initialize max segments count to 0
    max_segments = 0
    # iterate from 0 to n
    for i in range(n+1):
        # check if the remaining length can be formed using the given lengths
        if i % lengths[0] == 0:
            # increment max segments count
            max_segments += 1
            # update remaining length
            n -= i
    # return max segments count
    return max_segments",0.7456,-38.751407732005006
971,5,"

def solve(n, a, b, c):
    max_segments = 0
    
    # Find the maximum number of segments of length a
    max_a_segments = n // a
    
    # Loop through all possible values of a segments
    for a_segments in range(max_a_segments, -1, -1):
        remaining_length = n - (a_segments * a)
        
        # Find the maximum number of segments of length b
        max_b_segments = remaining_length // b
        
        # Loop through all possible values of b segments
        for b_segments in range(max_b_segments, -1, -1):
            remaining_length = n - (a_segments * a) - (b_segments * b)
            
            # Find the maximum number of segments of length c
            max_c_segments = remaining_length // c
            
            # Update the maximum number of segments if necessary
            max_segments = max(max_segments, a_segments + b_segments + max_c_segments)
    
    return max_segments",0.8739,-27.504623364802587
972,1,"

def solve(tup1, tup2):
    return (tup1, tup2)",0.9204,-1.6579948981134998
972,2,"

def solve(tuple1, tuple2):
    return (tuple1, tuple2)",0.9125,-1.6483427268443995
972,3,"

def solve(tuple1, tuple2):
    return (tuple1, tuple2)",0.9125,-1.6483427268443995
972,4,"

def solve(tup1, tup2):
    nested_tup = (tup1, tup2)
    return nested_tup",0.9089,-2.6760107544750995
972,5,"

def solve(tuple1, tuple2):
    nested_tuple = (tuple1, tuple2)
    return nested_tuple",0.9226,-1.9345004236278
973,1,"

def solve(string, n): 
    return string[n:] + string[:n]",0.7458,-5.278762096546
973,2,"

def solve(string, n):
    return string[n:] + string[:n]",0.8652,-2.4624577417339997
973,3,"

def solve(s, n):
    return s[n:] + s[:n]",0.8535,-2.6931684435635
973,4,"

def solve(string, n):
    rotated = string[n:] + string[:n]
    return rotated",0.8032,-4.602383914002997
973,5,"

def solve(string, n):
    n = n % len(string)
    return string[n:] + string[:n]",0.8248,-4.816232457355001
974,1,"

def solve(triangle):
    dp = triangle[-1]
    for row in range(len(triangle)-2,-1,-1):
        for col in range(len(triangle[row])):
            dp[col] = triangle[row][col] + min(dp[col],dp[col+1])
    return dp[0]",0.8594,-9.69684793428
974,2,"

def solve(triangle):
    n = len(triangle)
    dp = [[0]*n for _ in range(n)]
    dp[0][0] = triangle[0][0]
    for i in range(1, n):
        dp[i][0] = dp[i-1][0] + triangle[i][0]
        dp[i][i] = dp[i-1][i-1] + triangle[i][i]
    for i in range(2, n):
        for j in range(1, i):
            dp[i][j] = min(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]
    return min(dp[n-1])",0.9357,-9.976255691912604
974,3,"

def solve(triangle):
    for row in range(len(triangle) - 2, -1, -1):
        for col in range(len(triangle[row])):
            triangle[row][col] += min(triangle[row+1][col], triangle[row+1][col+1])
    return triangle[0][0]",0.9174,-5.864210832563001
974,4,"

def solve(triangle):
    for i in range(len(triangle)-2, -1, -1):
        for j in range(i+1):
            triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])
    return triangle[0][0]",0.952,-3.195415479844299
974,5,"

def solve(triangle):
    if not triangle:
        return 0
    for i in range(len(triangle)-2, -1, -1):
        for j in range(len(triangle[i])):
            triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])
    return triangle[0][0]",0.928,-5.676831758657403
